
                   6502 Macro Assembler   -   Version 4.00f 
                Copyright (C) 1985 by 2500 A.D. Software, Inc.


                         ***** Active Commands *****

                           Ctrl S = Stop Output
                           Ctrl Q = Start Output
                           Esc  C = Stop Assembly
                           Esc  T = Terminal Output
                           Esc  P = Printer Output
                           Esc  D = Disk Output
                           Esc  M = Multiple Output
                           Esc  N = No Output


  Tue Dec 29 2015 15:35                                                                                                  Page    1







               2500 A.D. 6502 Macro Assembler  -  Version 4.00f
               ------------------------------------------------

                       Input  Filename : GALA.asm
                       Output Filename : GALA.obj


    1                           
    2                           
    3                           ;----------------------------------------------
    4                           ;GALAFORCE
    5                           ; Original version for the BBC by Kevin Edwards
    6                           ; Atom conversion by Kees van Oss
    7                           ; 2011
    8                           ;----------------------------------------------
    9          3000             asm_code         equ $3000
   10                           
   11                           ;********************************************************************
   12                           ; Header for Atom emulator Wouter Ras
   13                           
   14   2FEA                                 org asm_code-22
   15   2FEA                    name_start
   16   2FEA   47 41 4C 41 46                    .db "GALAFORCE"                  ; 16 bytes filename
        2FEF   4F 52 43 45 
   17   2FF3                    name_end
   18   2FF3                                 .blkb (16-name_end+name_start),0
   19   2FFA   0030                              .dw asm_code                     ; 2 bytes startaddress
   20   2FFC   9730                              .dw exec                         ; 2 bytes linkaddress
   21   2FFE   6325                              .dw eind_asm-start_asm           ; 2 bytes filelength
   22                           
   23                           ;********************************************************************
   24                           
   25   3000                    start_asm          
   26   3000                            include CONST.inc
   27                           ;CONST
   28                           
   29          0028             maxaliens       equ 40
   30          0004             maxpatt         equ  4
   31          0010             myheight        equ 16
   32          0010             alheight        equ 16
   33          0008             bullheight      equ  8
   34          0002             mywidth         equ  2  ; Was 6
   35          0002             alwidth         equ  2  ; Was 6
   36          0003             process         equ  3
   37          0003             mymaxbull       equ  3
   38          0006             almaxbull       equ  6
   39          0001             xstep           equ  1
   40          0004             ystep           equ  4
   41                           
   42                           ;digits         equ $b00
   43                           
   44                           ;osasci         equ $FFE3
   45                           ;osbyte         equ $FFF4
   46          FE52             oswrch          equ $fe52 ; $FFEE
   47                           ;osword         equ $FFF1
   48                           
   49                           
   50                           
   51   3000                            include ZPWORK.inc
   52                           ;----------------------------------------------
   53                           ;ZPWORK $0
   54                           ;----------------------------------------------
   55                           
   56          0082             screen          equ $82    ; 2
   57          0084             data            equ $84    ; 2
   58          0086             screen2         equ $86    ; 2
   59          0088             temp            equ $88    ; 2
   60          008A             temp1           equ $8a    ; 2
   61          008C             width           equ $8c    ; 1
   62          0090             temp2           equ $90    ; 2
   63          0092             addres          equ $92    ; 2
   64          0094             temp3           equ $94    ; 2
   65          0096             addres1         equ $96    ; 2
   66          0098             temp4           equ $98    ; 2
   67          009A             wavbase         equ $9a         ; 2,    Address pointing to wavebase data
   68          00A0             stardat         equ $a0         ; 3*23, $A0-$E5
   69                           
   70          0260             colour          equ $260   ; 1
   71          0261             savey           equ $261   ; 1
   72                           
   73          0265             length          equ $265   ; 1
   74                           
   75          026B             rand1           equ $26b        ; Random 3 byte nr
   76                           
   77          026E             whichstar       equ $26e   ; 1
   78          026F             counter         equ $26f   ; 1
   79          0270             expldelay       equ $270   ; 1
   80                           
   81          0299             aliens          equ $299        ; Nr of aliens per wave
   82          029A             aliensm1        equ $29a        ; Nr of aliens per wave-1
   83                           
   84                           ;----------------------------------------------
   85                           ; Actual pattern storage for initial values
   86                           ;----------------------------------------------
   87                           
   88          0271             initst          equ $271        ; Status
   89          0275             initx           equ $275        ; Initial alien X-pos
   90          0279             inity           equ $279        ; Initial alien Y-pos
   91          027D             initdel         equ $27d        ; Initial pattern delay value
   92          0281             initcount       equ $281        ; Pattern delay counter before pattern starts
   93          0285             initnum         equ $285        ; Numbers of aliens to show
   94          0289             initrelx        equ $289        ; Initial relative X-movement
   95          028D             initrely        equ $28d        ; Initial relative Y-movement
   96          0291             initgra         equ $291        ; Initial alien graphic sprite 
   97          0295             initpnum        equ $295        ; Initial pattern nr
   98                           
   99                           
  100   3000                            include ABSWORK.inc
  101                           ;----------------------------------------------
  102                           ;ABSWORK $400
  103                           ;----------------------------------------------
  104                           
  105          0400             alst            equ $400
  106          0428             algra           equ alst+maxaliens
  107          0450             alpatlow        equ algra+maxaliens
  108          0478             alpathigh       equ alpatlow+maxaliens
  109          04A0             alpatoff        equ alpathigh+maxaliens
  110          04C8             alcount         equ alpatoff+maxaliens
  111          04F0             almult          equ alcount+maxaliens
  112          0518             aldirect        equ almult+maxaliens
  113          0540             alx             equ aldirect+maxaliens
  114          0568             aly             equ alx+maxaliens
  115          0590             al_loop_count   equ aly+maxaliens
  116          05B8             al_loop_start   equ al_loop_count+maxaliens
  117          05E0             alpatreflect    equ al_loop_start+maxaliens
  118                           
  119          0608             mybullx         equ alpatreflect+maxaliens
  120          060B             mybully         equ mybullx+mymaxbull
  121          060E             mybullst        equ mybully+mymaxbull
  122                           
  123          0611             albullx         equ mybullst+mymaxbull
  124          0617             albully         equ albullx+almaxbull
  125          061D             albullst        equ albully+almaxbull
  126          0623             albullspeed     equ albullst+almaxbull
  127                           
  128          0629             lives           equ albullspeed+almaxbull
  129          062A             myx             equ lives+1
  130          062B             myy             equ myx+1
  131          062C             myst            equ myy+1
  132          062D             score_base      equ myst+1
  133          062D             myscore         equ score_base
  134          0634             hiscore         equ myscore+7
  135                           
  136          063B             wavoff          equ hiscore+7
  137          063C             almove          equ wavoff+1
  138          063D             curwave         equ almove+1
  139          063E             procst          equ curwave+1
  140          063F             mybullact       equ procst+1
  141          0640             albullact       equ mybullact+1
  142          0641             initact         equ albullact+1
  143          0642             bombdel         equ initact+1
  144          0643             dem_section     equ bombdel+1
  145                           
  146          0644             sound_flag      equ dem_section+1
  147          0645             key_joy_flag    equ sound_flag+1
  148          0646             demo_flag       equ key_joy_flag+1
  149          0647             demo_count      equ demo_flag+1
  150          0648             demo_direction  equ demo_count+1
  151          0649             counter_sound   equ demo_direction+1
  152          064A             extra_life_flag equ counter_sound+1
  153          064B             sixteen_flag    equ extra_life_flag+1
  154          064C             pause_flag      equ sixteen_flag+1
  155                           
  156          064D             hstxt           equ pause_flag+1
  157          069D             hsnum           equ hstxt+8*10
  158          06D5             e_n_d           equ hsnum+8*7
  159                           
  160   3000                            include SPRITES.inc
  161                           ;----------------------------------------------
  162                           ;SPRITES
  163                           ;----------------------------------------------
  164                           
  165                           ;----------------------------------------------
  166                           ;sprite:
  167                           ;
  168                           ; Erase sprite at old pos and plot at new pos
  169                           ; A sprite is 16 x 16 colour pixels
  170                           ;
  171                           ; Input : A       = lb graphicsdata old
  172                           ;         X       = lb graphicsdata new
  173                           ;         Y       = hb graphicsdata new
  174                           ;         temp1   = hb graphicsdata old
  175                           ;         screen  = screenaddress old
  176                           ;         screen2 = screenaddress new
  177                           ;         temp1+1 = spriteheight 
  178                           ; Output: -
  179                           ;----------------------------------------------
  180                           
  181   3000                    sprite
  182   3000   8D 42 30                 STA gra1+1      ; Set lb graphicsdata old
  183   3003   8D 52 30                 STA gra2+1
  184   3006   8D 62 30                 STA gra3+1
  185   3009   8D 72 30                 STA gra4+1
  186                           
  187   300C   8E 49 30                 STX gra21+1     ; Set lb graphicsdata new
  188   300F   8E 59 30                 STX gra22+1
  189   3012   8E 69 30                 STX gra23+1
  190   3015   8E 79 30                 STX gra24+1
  191                           
  192   3018   A5 8A                    LDA temp1
  193   301A   8D 43 30                 STA gra1+2      ; Set hb graphicsdata old
  194   301D   8D 53 30                 STA gra2+2
  195   3020   8D 63 30                 STA gra3+2
  196   3023   8D 73 30                 STA gra4+2
  197                           
  198   3026   8C 4A 30                 STY gra21+2     ; Set hb graphicsdata new
  199   3029   8C 5A 30                 STY gra22+2
  200   302C   8C 6A 30                 STY gra23+2
  201   302F   8C 7A 30                 STY gra24+2
  202                           
  203   3032   A2 00                    LDX #0          ; Reset bytecounter
  204   3034   8E 96 30                 stx rowcount    ; Reset rowcounter (0-15)
  205                           
  206                           ;       jsr wait_sync   ; No snow --------------------------
  207   3037                    display
  208   3037   AD 96 30                 lda rowcount    ; Set vert.screen offset
  209   303A   29 07                    and #7
  210   303C   A8                       tay
  211   303D   B9 29 40                 lda scrtab,y
  212   3040   A8                       tay
  213   3041                    gra1
  214   3041   BD FF FF                 LDA $FFFF,X     ; Plot 4 pixels left outside
  215   3044   51 82                    EOR (screen),Y
  216   3046   91 82                    STA (screen),Y
  217   3048                    gra21
  218   3048   BD FF FF                 LDA $FFFF,X
  219   304B   51 86                    EOR (screen2),Y
  220   304D   91 86                    STA (screen2),Y
  221                           
  222   304F   E8                       INX
  223   3050   C8                       iny
  224   3051                    gra2
  225   3051   BD FF FF                 LDA $FFFF,X     ; Plot 4 pixels left inside
  226   3054   51 82                    EOR (screen),Y
  227   3056   91 82                    STA (screen),Y
  228   3058                    gra22
  229   3058   BD FF FF                 LDA $FFFF,X
  230   305B   51 86                    EOR (screen2),Y
  231   305D   91 86                    STA (screen2),Y
  232                           
  233   305F   E8                       INX
  234   3060   C8                       iny
  235   3061                    gra3
  236   3061   BD FF FF                 LDA $FFFF,X     ; Plot 4 pixels right inside
  237   3064   51 82                    EOR (screen),Y
  238   3066   91 82                    STA (screen),Y
  239   3068                    gra23
  240   3068   BD FF FF                 LDA $FFFF,X
  241   306B   51 86                    EOR (screen2),Y
  242   306D   91 86                    STA (screen2),Y
  243                           
  244   306F   E8                       INX
  245   3070   C8                       iny
  246   3071                    gra4
  247   3071   BD FF FF                 LDA $FFFF,X     ; Plot 4 pixels right outside
  248   3074   51 82                    EOR (screen),Y
  249   3076   91 82                    STA (screen),Y
  250   3078                    gra24
  251   3078   BD FF FF                 LDA $FFFF,X
  252   307B   51 86                    EOR (screen2),Y
  253   307D   91 86                    STA (screen2),Y
  254                           
  255   307F   E8                       INX
  256                           
  257   3080   EE 96 30                 inc rowcount    ; Next row
  258                           
  259   3083   AD 96 30                 lda rowcount    ; Increment hb after 8 rows
  260   3086   C9 08                    cmp #8
  261   3088   D0 04                    bne nxt_row
  262   308A   E6 83                    inc screen+1
  263   308C   E6 87                    inc screen2+1
  264   308E                    nxt_row
  265   308E   C6 8B                    dec temp1+1     ; Check if sprite is plot
  266   3090   D0 A5                    BNE display
  267   3092   4C 95 30                 JMP the_end
  268   3095                    the_end
  269   3095   60                       RTS
  270                           
  271   3096   00               rowcount        .db 0
  272                           
  273                           
  274                           
  275   3097                            include INIT.inc
  276                           ;----------------------------------------------
  277                           ;INIT
  278                           ;----------------------------------------------
  279                           
  280                           ;----------------------------------------------
  281                           ;exec:
  282                           ;
  283                           ; Program entry
  284                           ;
  285                           ; Input : -
  286                           ; Output: -
  287                           ;----------------------------------------------
  288                           
  289   3097                    exec
  290   3097   A0 0E                    LDY #$E                         ; Clear myscore + hiscore
  291   3099   A9 00                    LDA #0
  292   309B                    setup_hiscore
  293   309B   99 2C 06                 STA myscore-1,Y
  294   309E   88                       DEY
  295   309F   D0 FA                    BNE setup_hiscore
  296                           
  297   30A1   A9 03                    LDA #3                          ; Set HiScore=0030000
  298   30A3   8D 36 06                 STA hiscore+2
  299                           
  300                           ;--- Frame timer ---
  301                           
  302   30A6   A9 40                    lda #$40               ; Timer 1 continuous, Timer 2 one shot
  303   30A8   8D 0B B8                 sta $b80b
  304                           
  305   30AB   20 EA 4C                 jsr joyinit                     ; Initialise joystick
  306                           
  307                           ;--------------------
  308                           
  309   30AE   20 23 4D                 jsr clear4a                     ; Clear screen
  310                           
  311   30B1   20 16 37                 JSR seed_rnd                    ; Init random number
  312                           
  313   30B4   20 D8 3C                 JSR starinit                    ; Init stars
  314                           
  315   30B7   A0 02                    LDY #2                          ; Print SCR
  316   30B9   20 8F 3F                 JSR prnstr
  317                           
  318   30BC   A0 04                    LDY #4                          ; Print HI
  319   30BE   20 8F 3F                 JSR prnstr
  320                           
  321   30C1   A9 80                    LDA #$80                        ; Set flags
  322   30C3   8D 44 06                 STA sound_flag
  323   30C6   8D 4C 06                 STA pause_flag
  324   30C9   8D 45 06                 STA key_joy_flag
  325                           
  326   30CC   20 9F 37                 JSR display_sound_status        ; Display S/Q
  327   30CF   20 BE 37                 JSR display_key_joy_status      ; Display J/K
  328   30D2   20 04 3B                 JSR init_score                  ; Reset and print scores
  329   30D5   20 A1 31                 JSR wait_for_space              ; Loop screens until key/fire press
  330                           
  331   30D8   A8                       TAY                             ; Wavebase in A
  332                           
  333                           ;----------------------------------------------
  334                           ;restart:
  335                           ;
  336                           ; Infinite 'game' loop entry point
  337                           ;
  338                           ; Input : Y = wavenr
  339                           ; Output: -
  340                           ;----------------------------------------------
  341                           
  342   30D9                    restart
  343   30D9   A9 03                    LDA #3                          ; Set vars
  344   30DB   8D 29 06                 STA lives
  345   30DE   8D 4B 06                 STA sixteen_flag
  346   30E1   8D 4A 06                 STA extra_life_flag             ; +ve allows it to be printed
  347                           
  348   30E4   8C 3D 06                 STY curwave                     ; Store wave nr
  349                           
  350   30E7   B9 C2 4B                 LDA vecwavl,Y                   ; Set current wave baseaddress
  351   30EA   85 9A                    STA wavbase
  352   30EC   B9 D2 4B                 LDA vecwavh,Y
  353   30EF   85 9B                    STA wavbase+1
  354                           
  355   30F1   20 80 41                 JSR flagson                     ; Draw flags with wavenr
  356                           
  357   30F4   AD 46 06                 LDA demo_flag                   ; Check if in demomode ($80)
  358   30F7   30 05                    BMI no_st_tune                  ; No starttune in demomode
  359                           
  360   30F9   A0 00                    LDY #0                          ; Reset music pointer
  361   30FB   20 68 42                 JSR StartTune                   ; Play starttune
  362   30FE                    no_st_tune
  363   30FE   A9 00                    LDA #0                          ; Reset wave offsetpointer
  364   3100   8D 3B 06                 STA wavoff
  365                           
  366   3103   A0 03                    LDY #process
  367   3105   8C 99 02                 STY aliens                      ; Set initial aliens
  368   3108   88                       DEY
  369   3109   8C 9A 02                 STY aliensm1                    ; Set initial aliens-1
  370                           
  371   310C   20 04 3B                 JSR init_score                  ; Reset and print scores
  372   310F   4C 31 31                 JMP first_life                  ; Start game
  373                           
  374                           ;----------------------------------------------
  375                           ;next_life:
  376                           ;
  377                           ; Entry point if died and lives are not 0
  378                           ;
  379                           ; Input : -
  380                           ; Output: -
  381                           ;----------------------------------------------
  382                           
  383   3112                    next_life
  384   3112   20 4C 41                 JSR liveson                     ; Remove lives left
  385                           
  386   3115   A0 00                    LDY #0                          ; Set nr of aliens of first wave
  387   3117   B1 9A                    LDA (wavbase),Y
  388   3119   8D 99 02                 STA aliens
  389                           
  390   311C   8D 9A 02                 STA aliensm1                    ; Set nr of aliens-1
  391   311F   CE 9A 02                 dec aliensm1
  392   3122   CE 3B 06                 DEC wavoff
  393   3125   CE 29 06                 DEC lives                       ; Dec lives counter
  394   3128   D0 07                    BNE first_life                  ; If not 0, start game
  395                           
  396   312A   A2 80                    LDX #<lstman                    ; If lives=0, play tune
  397   312C   A0 32                    LDY #>lstman
  398   312E   20 4A 3E                 JSR mksound
  399                           
  400                           ;----------------------------------------------
  401                           ;first_life:
  402                           ;
  403                           ; Entry point first start or next live
  404                           ;
  405                           ; Input : -
  406                           ; Output: -
  407                           ;----------------------------------------------
  408                           
  409   3131                    first_life
  410   3131   20 4C 41                 JSR liveson                     ; Draw lives left
  411   3134   20 D5 36                 JSR rstall                      ; Reset gamevars
  412                           
  413   3137   20 66 37                 JSR pokmypos                    ; Calculate screenaddress ship
  414                           
  415   313A   A9 C0                    lda #$c0                        ; Make shure ship if plot
  416   313C   85 87                    sta screen2+1
  417                           
  418   313E   AD D2 4D                 LDA graph+36                    ; Set shipgraphic address
  419   3141   AA                       TAX
  420   3142   AC D3 4D                 LDY graph+37
  421   3145   84 8A                    STY temp1                       ; Save hb shipgraphic address
  422   3147   20 00 30                 JSR sprite
  423                           
  424   314A   20 F4 3B                 JSR message_loop                ; Plot 'Entering zone nr'
  425                           
  426   314D                    main_loop
  427   314D   EE 6F 02                 INC counter                     ; Inc loop counter
  428   3150   20 5D 3C                 JSR escape                      ; Check if ESC or fire is pressed
  429   3153   20 55 3D                 JSR rand                        ; Get random nr
  430   3156   20 A7 39                 JSR move_my_base                ; Check controls to move ship
  431   3159   20 10 3D                 JSR movestars                   ; Move stars
  432   315C   20 88 32                 JSR init_new_aliens             ; If possible, init new alien
  433   315F   20 4A 34                 JSR move_the_aliens             ; Move all aliens
  434   3162   20 6D 3D                 JSR process_my_bombs            ; Move my bombs
  435   3165   20 5F 3E                 JSR process_aliens_bombs        ; Move alien bombs
  436   3168   20 33 38                 JSR collision                   ; Check if there are any collisions
  437                           
  438   316B   AD 2C 06                 LDA myst                        ; If ship not hit, loop
  439   316E   10 DD                    BPL main_loop
  440                           
  441   3170   AD 3C 06                 LDA almove                      ; Check alien movement
  442   3173   10 D8                    BPL main_loop                   ; If no move, loop
  443                           
  444   3175   AD 40 06                 LDA albullact                   ; Check if myship hit
  445   3178   0D 3F 06                 ORA mybullact
  446   317B   D0 D0                    BNE main_loop                   ; If not, loop
  447                           
  448   317D   20 65 32                 JSR die_loop                    ; If myship hit, die
  449                           
  450   3180   AD 29 06                 LDA lives                       ; Get lives left
  451   3183   D0 8D                    BNE next_life                   ; If not 0, next life
  452                           
  453   3185   20 9B 3B                 JSR check_new_high              ; If lives=0, check if highscore
  454                           
  455   3188   A9 80                    LDA #>highscore_pos
  456   318A   85 83                    STA screen+1
  457   318C   20 07 3B                 JSR poke_hi_scr                 ; 'Print highscore
  458   318F                     
  459   318F   20 80 3C                 JSR game_over_loop              ; Print 'GAME OVER' and play tune
  460                           
  461   3192   20 8A 45                 JSR ahigh                       ; If highscore, input name
  462                           
  463   3195   20 A1 31                 JSR wait_for_space              ; Loop screens until key is pressed
  464                           
  465   3198   48                       PHA                             ; Save wavenr
  466   3199   20 80 41                 JSR flagson                     ; Erase flags
  467   319C   68                       PLA                             ; Get wavenr
  468                           
  469   319D   A8                       TAY                             ; Set Y=wavenr
  470                           
  471   319E   4C D9 30                 JMP restart                     ; Start new game
  472                           
  473                           
  474                           ;----------------------------------------
  475                           ;wait_for_space:
  476                           ;
  477                           ; Display text and loop screen until key is pressed
  478                           ;
  479                           ; Input : -
  480                           ; Output: A=wavenr, (0=space pressed,random=demomode)
  481                           ;----------------------------------------
  482                           
  483   31A1                    wait_for_space
  484   31A1   20 41 3C                 JSR end_message                 ; Display end message text
  485                           
  486   31A4   A9 00                    LDA #0                          ; Reset counter
  487   31A6   8D 6F 02                 STA counter
  488   31A9                    space_loop
  489   31A9   20 05 32                 JSR srlp                        ; Move stars
  490   31AC   EE 6F 02                 INC counter     
  491   31AF   F0 25                    BEQ hsclp                       ; If nothing pressed, display score
  492   31B1   20 A7 3C                 JSR chk_spc_fire                ; Check if space or fire is pressed
  493   31B4   D0 F3                    BNE space_loop
  494                           
  495   31B6   08                       PHP                             ; If space/fire pressed, save carry
  496   31B7   20 41 3C                 JSR end_message                 ; Remove end message text
  497   31BA                    jkch
  498   31BA   20 BE 37                 JSR display_key_joy_status      ; Remove key/joy status
  499   31BD   28                       PLP                             ; Restore carry
  500   31BE   A9 00                    LDA #0
  501   31C0   69 13                    ADC #19
  502   31C2   8D DF 40                 STA key_joy_letter              ; C=0 -> J(19), C=1 -> K(20)
  503   31C5   A2 FF                    LDX #$FF
  504   31C7   C9 14                    CMP #20
  505   31C9   F0 01                    BEQ set_kbd_negative
  506   31CB   E8                       INX
  507   31CC                    set_kbd_negative
  508   31CC   8A                       TXA
  509   31CD   20 BB 37                 JSR key_joy2                    ; A=$FF Key, A=0 Joy 
  510                           
  511   31D0   A9 00                    LDA #0                          ; Reset demoflag
  512   31D2   8D 46 06                 STA demo_flag                   ; Exit with wavenr=0
  513                           
  514   31D5   60                       RTS
  515                           
  516                           ;----------------------------------------
  517                           ; Print highscore table and check if space pressed
  518                           ;----------------------------------------
  519                           
  520   31D6                    hsclp
  521   31D6   20 41 3C                 JSR end_message                 ; Remove end message text
  522   31D9   20 2E 46                 JSR pht                         ; Display Highscore table
  523   31DC                    hscl2
  524   31DC   20 05 32                 JSR srlp                        ; Move stars
  525   31DF   EE 6F 02                 INC counter
  526   31E2   F0 0C                    BEQ into_demo                   ; If nothing pressed, go to demo
  527   31E4   20 A7 3C                 JSR chk_spc_fire                ; Check if space or fire is pressed
  528   31E7   D0 F3                    BNE hscl2
  529                           
  530   31E9   08                       PHP
  531   31EA   20 2E 46                 JSR pht                         ; Remove Highscore table
  532   31ED   4C BA 31                 JMP jkch                        ; Display key/joy status
  533                           
  534   31F0                    into_demo
  535   31F0   20 2E 46                 JSR pht                         ; Remove Highscore table
  536                           
  537   31F3   A2 FF                    LDX #$FF                        ; Reset demo vars
  538   31F5   8E 46 06                 STX demo_flag
  539   31F8   8E 47 06                 STX demo_count
  540   31FB   E8                       INX
  541   31FC   8E 43 06                 STX dem_section
  542                           
  543   31FF   20 55 3D                 JSR rand
  544   3202   29 07                    AND #7                          ; Random wavenr for demo
  545   3204   60                       RTS
  546                           
  547                           ;----------------------------------------
  548                           ;Move stars with delay
  549                           ;----------------------------------------
  550                           
  551   3205                    srlp
  552   3205   A2 0F                    LDX #15                         ; Wait a while
  553   3207   20 A3 36                 JSR delay2
  554                           
  555   320A   20 10 3D                 JSR movestars                   ; Move stars
  556   320D   4C AC 36                 JMP pause                       ; Check S or P key pressed and exit
  557                           
  558                           ;----------------------------------------
  559                           ;process_demo:
  560                           ;
  561                           ; If in demomode, set random demo direction
  562                           ;
  563                           ; Input : -
  564                           ; Output: -
  565                           ;----------------------------------------
  566                           
  567   3210                    process_demo
  568   3210   AD 46 06                 LDA demo_flag                   ; Check if in demomode
  569   3213   10 12                    BPL not_in_demo                 ; Exit if not
  570                           
  571   3215   CE 47 06                 DEC demo_count                  ; Dec demo counter
  572   3218   10 0D                    BPL not_in_demo
  573                           
  574   321A   AD 6C 02                 LDA rand1+1                     ; Set random direction
  575   321D   8D 48 06                 STA demo_direction
  576   3220   29 0F                    AND #15
  577   3222   69 0A                    ADC #10
  578   3224   8D 47 06                 STA demo_count
  579   3227                    not_in_demo
  580   3227   60                       RTS
  581                           
  582                           ;----------------------------------------
  583                           ;dem_sound:
  584                           ;
  585                           ; Interrupt sound routine
  586                           ; Not used in Atom version!!!!!!!!!!!
  587                           ;----------------------------------------
  588                           
  589   3228                    dem_sound
  590   3228   C9 04                    CMP #4
  591   322A   D0 30                    BNE ex_dem2
  592   322C   2C 4C 06                 BIT pause_flag
  593   322F   10 2B                    BPL ex_dem2
  594   3231   8A                       TXA
  595   3232   48                       PHA
  596   3233   98                       TYA
  597   3234   48                       PHA
  598   3235   20 B5 42                 JSR Refresh
  599   3238   20 B6 42                 JSR MusicTest
  600   323B   D0 1B                    BNE ex_dem
  601   323D   CE 43 06                 DEC dem_section
  602   3240   10 05                    BPL not_new_tune
  603   3242   A9 07                    LDA #7
  604   3244   8D 43 06                 STA dem_section
  605   3247                    not_new_tune
  606   3247   AE 43 06                 LDX dem_section
  607   324A   BC 5D 32                 LDY dem_table,X
  608   324D   AD 46 06                 LDA demo_flag
  609   3250   10 06                    BPL ex_dem
  610   3252   20 68 42                 JSR StartTune
  611   3255   20 B5 42                 JSR Refresh
  612   3258                    ex_dem
  613   3258   68                       PLA
  614   3259   A8                       TAY
  615   325A   68                       PLA
  616   325B   AA                       TAX
  617   325C                    ex_dem2
  618   325C   60                       RTS
  619                           
  620                           ; Backwards order for demo
  621                           ; tunes ie 21,21,42,42,..
  622                           
  623   325D                    dem_table
  624   325D   38 38 31 31              .db 56,56,49,49
  625   3261   2A 2A 15 15              .db 42,42,21,21
  626                           
  627                           ;----------------------------------------------
  628                           ;die_loop:
  629                           ;
  630                           ; If in demomode, exit. 
  631                           ; If in gamemode, check S and P keys and play tune
  632                           ;
  633                           ; Input : -
  634                           ; Output: -
  635                           ;----------------------------------------------
  636                           
  637   3265                    die_loop
  638   3265   2C 46 06                 BIT demo_flag                           ; Check if in demomode
  639   3268   30 15                    BMI dl1                                 ; If so, exit
  640                           
  641   326A   A0 02                    LDY #2                                  ; If died, play tune
  642   326C   20 68 42                 JSR StartTune
  643   326F                    dl2
  644   326F   20 10 3D                 JSR movestars                           ; Move stars
  645   3272   20 AC 36                 JSR pause                               ; Check if S or P key is pressed
  646   3275                     
  647   3275   A2 16                    LDX #22                                 ; Wait a while
  648   3277   20 A3 36                 JSR delay2
  649                           
  650   327A   20 B6 42                 JSR MusicTest                           ; Check if tune ended
  651   327D   D0 F0                    BNE dl2                                 ; If not, loop
  652   327F                    dl1
  653   327F   60                       RTS                                     ; Exit 
  654                           
  655                           ;----------------------------------------------
  656                           ; Last man tune
  657                           ;----------------------------------------------
  658                           
  659   3280                    lstman
  660   3280   1300                     .dw $13
  661   3282   0900                     .dw 9
  662   3284   A000                     .dw 160
  663   3286   3200                     .dw 50
  664                           
  665                           
  666                           
  667   3288                            include ALIENS1.inc
  668                           ;----------------------------------------------
  669                           ;ALIENS1
  670                           ;----------------------------------------------
  671                           
  672                           ;----------------------------------------------
  673                           ;init_new_aliens:
  674                           ;
  675                           ; If first entry:
  676                           ; - initialize wave vars
  677                           ; - Plot flags with wavenr
  678                           ; - Play tune 
  679                           ;
  680                           ; Input : -
  681                           ; Output: -
  682                           ;----------------------------------------------
  683                           
  684   3288                    init_new_aliens
  685   3288   AD 2C 06                 LDA myst                ; Check if myship visable
  686   328B   10 01                    BPL init_new_al2        ; If yes, init aliens
  687   328D   60                       RTS
  688                           
  689   328E                    init_new_al2
  690   328E   AD 41 06                 LDA initact             ; Check if first entry (all 0)
  691   3291   0D 3C 06                 ORA almove
  692   3294   0D 40 06                 ORA albullact
  693   3297   D0 59                    BNE alien1              ; Not first entry, exit
  694                           
  695   3299   AC 3B 06                 LDY wavoff              ; Set Wave offset pointer
  696   329C   D0 12                    BNE inital1             ; If not first wave, jump
  697                           
  698   329E   B1 9A                    LDA (wavbase),Y         ; Read nr of aliens per wave
  699   32A0   8D 99 02                 STA aliens              ; Set nr of aliens
  700                           
  701   32A3   8C 3E 06                 STY procst              ; Start alien=0 !!!
  702                           
  703   32A6   38                       SEC
  704   32A7   E9 01                    SBC #1
  705   32A9   8D 9A 02                 STA aliensm1            ; Set nr of aliens-1
  706                           
  707   32AC   EE 3B 06                 INC wavoff              ; Inc wave offset pointer
  708                           
  709   32AF   C8                       INY                     ; Inc wave offset pointer
  710   32B0                    inital1
  711   32B0   EE 3B 06                 INC wavoff              ; Inc wave offset pointer
  712   32B3   B1 9A                    LDA (wavbase),Y         ; Get pattern nr
  713   32B5   10 3C                    BPL alien2              ; If not end of patterns, jump 
  714                           
  715   32B7   20 80 41                 JSR flagson             ; Erase flags
  716                           
  717   32BA   EE 3D 06                 INC curwave             ; Set current wave
  718                           
  719   32BD   A9 00                    LDA #0                  ; Reset above level 16 flag
  720   32BF   8D 4B 06                 STA sixteen_flag
  721                           
  722   32C2   20 80 41                 JSR flagson             ; Plot wavenr with flags
  723                           
  724   32C5   2C 46 06                 BIT demo_flag           ; Check if demomode
  725   32C8   30 10                    BMI init_snd            ; If demomode, skip starttune
  726   32CA                            
  727   32CA   A0 06                    LDY #6                  ; Set music pointer
  728                           
  729   32CC   AD 3D 06                 LDA curwave             ; Check wavenr
  730   32CF   F0 06                    BEQ nt_zone16           ; Jump if wavenr=0
  731   32D1   29 0F                    AND #$F
  732   32D3   D0 02                    BNE nt_zone16           ; Jump if 1<=wavenr<=15
  733                           
  734   32D5   A0 08                    LDY #8                  ; Set music pointer
  735   32D7                    nt_zone16
  736   32D7   20 68 42                 JSR StartTune           ; Play tune
  737   32DA                    init_snd
  738   32DA   20 F4 3B                 JSR message_loop        ; Print 'ENTERING WAVE..'
  739                           
  740   32DD   AD 3D 06                 LDA curwave             ; Get current wavenr
  741   32E0   29 0F                    AND #15                 ; Filter 0-15
  742   32E2   A8                       TAY                     ; Max 16 waves so wrap around !!! 
  743                           
  744   32E3   A2 00                    LDX #0                  ; Reset waveoffset
  745   32E5   8E 3B 06                 STX wavoff
  746                           
  747   32E8   B9 C2 4B                 LDA vecwavl,Y
  748   32EB   85 9A                    STA wavbase             ; Set lb wavedata address
  749   32ED   B9 D2 4B                 LDA vecwavh,Y
  750   32F0   85 9B                    STA wavbase+1           ; Get hb wavedata address
  751   32F2                    alien1
  752   32F2   60                       RTS
  753                           ;----------------------------------------------
  754                           ;alien2:
  755                           ;
  756                           ; Initialize aliens
  757                           ;
  758                           ; Input : A=pattern nr (45 is special)
  759                           ; Output: -
  760                           ;----------------------------------------------
  761                           
  762   32F3                    alien2
  763   32F3   C9 2D                    CMP #45                 ; Check special level
  764   32F5   D0 09                    BNE special
  765                           
  766   32F7   A2 21                    LDX #33                 ; If special level, set 33 aliens
  767   32F9   8E 99 02                 STX aliens
  768   32FC   CA                       DEX
  769   32FD   8E 9A 02                 STX aliensm1
  770   3300                    special
  771   3300   A8                       TAY
  772   3301   B9 E2 4B                 LDA vecpatl,Y
  773   3304   85 8A                    STA temp1               ; Set lb pattern
  774   3306   B9 10 4C                 LDA vecpath,Y
  775   3309   85 8B                    STA temp1+1             ; Get hb pattern
  776                           
  777   330B   A0 00                    LDY #0
  778   330D   B1 8A                    LDA (temp1),Y           ; Get nr of patterns
  779   330F   85 90                    STA temp2               ; Store nr of pattern
  780                           
  781   3311   C8                       INY                     ; Point to next 
  782   3312                    alien4
  783   3312   A2 00                    LDX #0                  ; Reset pointer
  784   3314                    alien5
  785   3314   BD 71 02                 LDA initst,X            ; Loop patterns until bit7 clear
  786   3317   10 07                    BPL alien6              ; Found, jump
  787   3319   E8                       INX                     ; Next pattern
  788   331A   E0 04                    CPX #maxpatt
  789   331C   D0 F6                    BNE alien5
  790                           
  791   331E   F0 46                    BEQ process_aliens      ; Not found, process aliens
  792   3320                    alien6
  793   3320   B1 8A                    LDA (temp1),Y           ; Get initial X-pos alien
  794   3322   10 04                    BPL normal_process      ; If bit7=0, jump
  795                           
  796   3324   29 7F                    AND #$7F                ; Filter 0-127
  797   3326   10 CB                    BPL alien2              ; Forced jump
  798                           
  799   3328                    normal_process
  800   3328   C8                       INY
  801   3329   9D 75 02                 STA initx,X             ; Set X-pos alien
  802                           
  803   332C   B1 8A                    LDA (temp1),Y
  804   332E   C8                       INY
  805   332F   9D 79 02                 STA inity,X             ; Set Y-pos alien
  806                           
  807   3332   B1 8A                    LDA (temp1),Y
  808   3334   C8                       INY
  809   3335   9D 7D 02                 STA initdel,X           ; Set pattern delay
  810   3338   9D 81 02                 STA initcount,X         ; Set pattern delay counter
  811                           
  812   333B   B1 8A                    LDA (temp1),Y
  813   333D   C8                       INY
  814   333E   9D 85 02                 STA initnum,X           ; Set nr of aliens to show
  815                           
  816   3341   B1 8A                    LDA (temp1),Y
  817   3343   C8                       INY
  818   3344   9D 89 02                 STA initrelx,X          ; Set relative X-offset next alien
  819                           
  820   3347   B1 8A                    LDA (temp1),Y
  821   3349   C8                       INY
  822   334A   9D 8D 02                 STA initrely,X          ; Set relative Y-offset next alien
  823                           
  824   334D   B1 8A                    LDA (temp1),Y
  825   334F   C8                       INY
  826   3350   9D 91 02                 STA initgra,X           ; Set initial alien sprite nr
  827                           
  828   3353   B1 8A                    LDA (temp1),Y
  829   3355   C8                       INY
  830   3356   9D 95 02                 STA initpnum,X          ; Set initial pattern nr
  831                           
  832   3359   A9 80                    LDA #$80
  833   335B   9D 71 02                 STA initst,X            ; Mark alien as visible
  834                           
  835   335E   EE 41 06                 INC initact             ; Inc aliens on screen counter
  836   3361   C6 90                    DEC temp2               ; Check if more then 1 pattern
  837   3363   D0 AD                    BNE alien4              ; If more, init more aliens
  838                           
  839   3365   60                       RTS
  840                           
  841   3366                            include ALIENS2.inc
  842                           ;----------------------------------------------
  843                           ;ALIENS2
  844                           ;----------------------------------------------
  845                           
  846                           ;----------------------------------------------
  847                           ;proces_aliens:
  848                           ;
  849                           ; Check 4 patterns per wave
  850                           ; Check for every pattern if alien has to be initialized
  851                           ; If so, plot alien
  852                           ;
  853                           ; Input : -
  854                           ; Output: -
  855                           ;----------------------------------------------
  856                           
  857   3366                    process_aliens
  858   3366   AD 2C 06                 LDA myst                        ; Check if myship is vivible
  859   3369   10 05                    BPL process_ok                  ; Yes, jump
  860   336B   A2 02                    LDX #2                          ; No, delay
  861   336D   4C A3 36                 JMP delay2                      ; Exit
  862                           
  863                           ;--- Loop patterns ---
  864                           
  865   3370                    process_ok
  866   3370   A2 03                    LDX #maxpatt-1                  ; Set max patterns
  867   3372                    proc1
  868   3372   BD 71 02                 LDA initst,X                    ; Check if pattern active
  869   3375   10 08                    BPL proc2                       ; Not active, skip
  870                           
  871   3377   BD 81 02                 LDA initcount,X                 ; Check delay before start pattern
  872   337A   F0 07                    BEQ proc6                       ; Delay ended, start pattern
  873   337C   DE 81 02                 DEC initcount,X                 ; Dec delay counter
  874   337F                    proc2
  875   337F   CA                       DEX                             ; Next pattern
  876   3380   10 F0                    BPL proc1
  877   3382   60                       RTS
  878                           
  879                           ;--- Loop aliens to find empty space ---
  880                           ;--- X = pattern pointer ---
  881                           
  882   3383                    proc6
  883   3383   BD 7D 02                 LDA initdel,X                   ; Reset delay counter
  884   3386   9D 81 02                 STA initcount,X
  885                           
  886   3389   AC 9A 02                 LDY aliensm1
  887   338C                    proc3
  888   338C   B9 00 04                 LDA alst,Y                      ; Check alien status
  889   338F   10 05                    BPL proc4                       ; If not visible, use this
  890   3391   88                       DEY
  891   3392   10 F8                    BPL proc3                       ; Next alien            
  892   3394   30 E9                    BMI proc2                       ; Forced jump
  893                           
  894                           ;--- Empty space found, add alien ---
  895                           ;--- X = pattern pointer ---
  896                           ;--- Y = alien pointer ---
  897                           
  898   3396                    proc4
  899   3396   A9 00                    LDA #0
  900   3398   99 A0 04                 STA alpatoff,Y                  ; Reset pattern offset pointer
  901   339B   99 F0 04                 STA almult,Y                    ; Reset mulplier
  902                           
  903   339E   A9 80                    LDA #$80                        ; Mark alien as visible
  904   33A0   99 00 04                 STA alst,Y 
  905                           
  906   33A3   BD 75 02                 LDA initx,X                     ; Set X-pos alien
  907   33A6   99 40 05                 STA alx,Y
  908   33A9   48                       PHA                             ; Save alien X-pos
  909                           
  910   33AA   BD 79 02                 LDA inity,X                     ; Set Y-pos alien
  911   33AD   99 68 05                 STA aly,Y
  912                           
  913   33B0   BD 91 02                 LDA initgra,X                   ; Set alien graphic sprite
  914   33B3   99 28 04                 STA algra,Y
  915   33B6   85 94                    STA temp3                       ; Save graphic sprite nr
  916                           
  917   33B8   38                       SEC                             ; Get alien sprite nr = (graphic-12)/2
  918   33B9   E9 0C                    SBC #12
  919   33BB   4A                       LSR A
  920                           
  921   33BC   86 91                    STX temp2+1                     ; Save pattern pointer
  922                           
  923   33BE   AA                       TAX                             ; Set alien pointer
  924   33BF   BD 79 39                 LDA alien_hits,X                ; Get hits needed to kill alien from database
  925   33C2   99 C8 04                 STA alcount,Y                   ; Set alien hitcounter
  926                           
  927   33C5   A6 91                    LDX temp2+1                     ; Get pattern pointer
  928   33C7   BD 95 02                 LDA initpnum,X                  ; Get initial pattern nr
  929   33CA   99 E0 05                 STA alpatreflect,Y              ; Set pattern for alien
  930                           
  931   33CD   29 7F                    AND #$7F                        
  932   33CF   AA                       TAX                             ; Set patterdata pointer
  933   33D0   BD 3E 4C                 LDA vecpatdl,X
  934   33D3   99 50 04                 STA alpatlow,Y                  ; Set alien pattern data address
  935   33D6   BD 5C 4C                 LDA vecpatdh,X
  936   33D9   99 78 04                 STA alpathigh,Y
  937                           
  938   33DC   68                       PLA                             ; Get alien X-pos
  939   33DD   AA                       TAX                             ; Save X-pos
  940                           
  941   33DE   20 55 3D                 JSR rand                        ; Get random nr
  942   33E1   29 0F                    AND #15                         ; Filter between 0-15
  943                           
  944   33E3   E0 1E                    CPX #30                         ; Check limit right
  945   33E5   F0 06                    BEQ alter_start_x
  946                           
  947   33E7   E0 1F                    CPX #31                         ; If over right border, don't change X-pos
  948   33E9   D0 05                    BNE use_original_x
  949                           
  950   33EB   69 0F                    ADC #15                         ; Set random position right half
  951   33ED                    alter_start_x
  952   33ED   99 40 05                 STA alx,Y                       ; Set X-pos alien
  953                           
  954   33F0                    use_original_x
  955   33F0   A6 91                    LDX temp2+1                     ; Get pattern pointer
  956   33F2   EE 3C 06                 INC almove                      ; Set alien to be moved
  957   33F5   DE 85 02                 DEC initnum,X                   ; Dec alien to show counter
  958   33F8   D0 08                    BNE proc5                       ; If not all aliens on screen, jump
  959                           
  960   33FA   A9 00                    LDA #0                          ; All aliens on screen, reset status
  961   33FC   9D 71 02                 STA initst,X
  962   33FF   CE 41 06                 DEC initact                     ; Dec actual aliens on screen pointer
  963   3402                    proc5
  964   3402   18                       CLC
  965   3403   BD 75 02                 LDA initx,X                     ; Adjust init X-pos for next alien
  966   3406   7D 89 02                 ADC initrelx,X
  967   3409                    chk_xinit_wrap
  968   3409   C9 20                    CMP #32                         ; Check limit right
  969   340B   90 05                    BCC no_initx_wrap
  970   340D   E9 20                    SBC #32                         ; If over right limit, wrap left
  971   340F   4C 09 34                 JMP chk_xinit_wrap              ; Check again
  972                           
  973   3412                    no_initx_wrap
  974   3412   9D 75 02                 STA initx,X                     ; Set new init X-pos alien
  975                           
  976   3415   18                       CLC
  977   3416   BD 79 02                 LDA inity,X                     ; Adjust init Y-pos for next alien
  978   3419   7D 8D 02                 ADC initrely,X
  979   341C   9D 79 02                 STA inity,X                     ; Set new init Y-pos alien
  980                           
  981   341F   BE 40 05                 LDX alx,Y                       ; Get alien X-pos
  982   3422   B9 68 05                 LDA aly,Y                       ; Get alien Y-pos
  983   3425   A8                       TAY
  984   3426   20 2E 34                 JSR alien_on_off                ; Plot alien
  985                           
  986   3429   A6 91                    LDX temp2+1                     ; Get pattern pointer
  987   342B   4C 7F 33                 JMP proc2                       ; Next pattern
  988                           
  989                           ;----------------------------------------------
  990                           ;alien_on_off:
  991                           ;
  992                           ; Plot/erase alien
  993                           ;
  994                           ; Input : X=X-pos alien
  995                           ;         Y=Y-pos alien
  996                           ;         temp3=spritenr
  997                           ; Output: -
  998                           ;----------------------------------------------
  999                           
 1000   342E                    alien_on_off
 1001   342E   20 2D 37                 JSR xycalc                      ; Calculate screenaddress
 1002   3431   85 83                    STA screen+1
 1003   3433   86 82                    STX screen
 1004   3435   A9 10                    LDA #alheight
 1005   3437   85 8B                    STA temp1+1                     ; Set spriteheight
 1006                           
 1007   3439   A9 C0                    LDA #$C0                        ; Make sure sprite is plot
 1008   343B   85 87                    STA screen2+1
 1009                           
 1010   343D   A6 94                    LDX temp3                       ; Get spritepointer
 1011   343F   BD AE 4D                 LDA graph,X                     ; Get lb graphics spritedata
 1012   3442   BC AF 4D                 LDY graph+1,X                   ; Get hb graphics spritedata
 1013   3445   84 8A                    STY temp1
 1014   3447   4C 00 30                 JMP sprite                      ; Plot sprite
 1015                           
 1016   344A                            include ALIENS3.inc
 1017                           ;----------------------------------------------
 1018                           ;ALIENS3
 1019                           ;----------------------------------------------
 1020                           
 1021                           ;----------------------------------------------
 1022                           ;move_the_aliens:
 1023                           ;
 1024                           ; Move 6 aliens before processing
 1025                           ;
 1026                           ; Input : -
 1027                           ; Output: -
 1028                           ;----------------------------------------------
 1029                           
 1030   344A                    move_the_aliens
 1031   344A   A9 03                    LDA #process
 1032   344C   85 98                    STA temp4               ; Set looppointer=6
 1033                           
 1034   344E   AE 3E 06                 LDX procst              ; Get actual alien processed
 1035   3451                    move_aliens
 1036   3451   BD 00 04                 LDA alst,X              ; Get alien status
 1037   3454   30 21                    BMI move2               ; If visible -> move aliens
 1038   3456   20 A1 36                 JSR delay               ; Else wait a while
 1039   3459                    move5
 1040   3459   EE 3E 06                 INC procst              ; Point to next alien
 1041   345C   AE 3E 06                 LDX procst              ; Get actual alien processed
 1042   345F   EC 99 02                 CPX aliens              ; Last alien?
 1043   3462   D0 0E                    BNE move3               ; No, jump
 1044                           
 1045   3464   20 66 33                 JSR process_aliens      ; Process aliens
 1046   3467   20 AC 36                 JSR pause               ; Wait a while
 1047                           
 1048   346A   A2 00                    LDX #0                  ; Point to first alien
 1049   346C   8E 3E 06                 STX procst
 1050                           
 1051   346F   EE 70 02                 INC expldelay           ; Inc explosion delay counter
 1052   3472                    move3
 1053   3472   C6 98                    DEC temp4               ; Dec looppointer
 1054   3474   D0 DB                    BNE move_aliens         ; If not looped 6 times, jump
 1055                           
 1056   3476   60                       RTS
 1057                           
 1058                           ;----------------------------------------------
 1059                           ;move2:
 1060                           ;
 1061                           ; If bit0 of alien status =1 then alien is exploding
 1062                           ; If multiplier<>0 then move alien
 1063                           ; If multiplier=0 init pattern and execute actions
 1064                           ;
 1065                           ; Input : A=Alien status
 1066                           ;         X=Actual processed alien
 1067                           ; Output: -
 1068                           ;----------------------------------------------
 1069                           
 1070   3477                    move2
 1071   3477   4A                       LSR A                   ; Check bit0 alien status (exploding)
 1072   3478   90 06                    BCC move7               ; Not exploding, jump
 1073   347A   20 3A 35                 JSR explosion           ; If set, next explosion sprite
 1074   347D   4C 59 34                 JMP move5               ; Return
 1075   3480                    move7
 1076   3480   BD F0 04                 LDA almult,X            ; Check alien multiplier
 1077   3483   D0 3E                    BNE move4               ; Plot next sprite
 1078                           
 1079   3485   BD 50 04                 LDA alpatlow,X
 1080   3488   85 90                    STA temp2               ; Set lb alien pattern data
 1081   348A   BD 78 04                 LDA alpathigh,X
 1082   348D   85 91                    STA temp2+1             ; Set hb alien pattern data
 1083                           
 1084   348F   BC A0 04                 LDY alpatoff,X          ; Set pattern data offset pointer
 1085   3492   FE A0 04                 INC alpatoff,X          ; Inc offset pointer
 1086                           
 1087   3495   B1 90                    LDA (temp2),Y           ; Get Action to be executed
 1088                                                           ; If bit7=1 then set multiplier
 1089                                                           ; Next data is action
 1090   3497   30 03                    BMI branch_wont_reach   ; If bit7=1 jump
 1091                           
 1092   3499   4C 27 35                 JMP move6               ; Execute action
 1093                           
 1094   349C                    branch_wont_reach
 1095   349C   29 7F                    AND #$7F                ; Clear bit7
 1096   349E   9D F0 04                 STA almult,X            ; Set alien multiplier
 1097                           
 1098   34A1   C8                       INY                     ; Point to next data
 1099   34A2   FE A0 04                 INC alpatoff,X          ; Inc offset pointer
 1100                           
 1101   34A5   B1 90                    LDA (temp2),Y           ; Get next pattern data byte
 1102   34A7   BC E0 05                 LDY alpatreflect,X      ; Check if movement has to be reversed
 1103   34AA   10 14                    BPL not_reverse         ; If bit7=0, no reverse
 1104                           
 1105   34AC   C9 30                    CMP #48 
 1106   34AE   B0 0E                    BCS flip_acute_angle    ; If action >=48 jump
 1107                           
 1108   34B0   A8                       TAY                     ; Save action
 1109   34B1   29 F8                    AND #$F8                ; Set bit0-2=0 (>7)
 1110   34B3   85 8A                    STA temp1               ; Save action
 1111                           
 1112   34B5   98                       TYA                     ; Get action
 1113   34B6   29 07                    AND #7                  ; Set bit3-7=0
 1114                           
 1115   34B8   A8                       TAY                     ; Set pointer (bit0-2 action)
 1116   34B9   B9 96 35                 LDA flip_table,Y        ; Get direction
 1117   34BC   05 8A                    ORA temp1               ; Restore bits 3-7
 1118                           
 1119   34BE                    flip_acute_angle
 1120   34BE   49 07                    EOR #7                  ; Invert bits0-2
 1121   34C0                    not_reverse
 1122   34C0   9D 18 05                 STA aldirect,X          ; Set alien direction
 1123   34C3                    move4
 1124   34C3   BD 40 05                 LDA alx,X               ; Get alien X-pos
 1125   34C6   BC 68 05                 LDY aly,X               ; Get alien Y-pos
 1126   34C9   AA                       TAX
 1127   34CA   20 2D 37                 JSR xycalc              ; Calculate screenaddress
 1128   34CD   85 83                    STA screen+1
 1129   34CF   86 82                    STX screen
 1130                           
 1131   34D1   AE 3E 06                 LDX procst              ; Get alien processed pointer
 1132   34D4   DE F0 04                 DEC almult,X            ; Dec alien multiplier
 1133                           
 1134   34D7   BC 18 05                 LDY aldirect,X          ; Get alien direction
 1135   34DA   C0 40                    CPY #$40
 1136   34DC   90 06                    BCC moving_alien        ; If <$40 jump
 1137                           
 1138   34DE   20 A1 36                 JSR delay               ; If >=$40 wait
 1139   34E1   4C 59 34                 JMP move5               ; Next alien
 1140                           
 1141                           ;----------------------------------------------
 1142                           ;move_alien:
 1143                           ;
 1144                           ; Add relative X/Y to actual alien X/Y and move alien
 1145                           ;
 1146                           ; Input : X=alien pointer
 1147                           ; Output: -
 1148                           ;----------------------------------------------
 1149                           
 1150   34E4                    moving_alien
 1151   34E4   18                       CLC
 1152   34E5   BD 40 05                 LDA alx,X               ; Get alien X-pos
 1153   34E8   79 C3 37                 ADC addrelx,Y           ; Add relative-X
 1154   34EB                    check_x_wrap
 1155   34EB   C9 20                    CMP #32                 ; Check limit right
 1156   34ED   90 05                    BCC x_not_wrapped       ; If not exceeded, jump
 1157   34EF   E9 20                    SBC #32                 ; Wrap left
 1158   34F1   4C EB 34                 JMP check_x_wrap        ; Check again
 1159                           
 1160   34F4                    x_not_wrapped
 1161   34F4   9D 40 05                 STA alx,X               ; Set X-pos alien
 1162                           
 1163   34F7   18                       CLC
 1164   34F8   BD 68 05                 LDA aly,X               ; Get alien Y-pos
 1165   34FB   79 FB 37                 ADC addrely,Y           ; Add relative-Y
 1166   34FE   9D 68 05                 STA aly,X               ; Set Y-pos alien
 1167                           
 1168   3501   A8                       TAY                     ; Save alien Y-pos
 1169   3502   BD 40 05                 LDA alx,X               ; Get alien X-pos
 1170   3505                    dalg
 1171   3505   AA                       TAX                     ; Set alien X-pos
 1172   3506   20 2D 37                 JSR xycalc              ; Calculate screenaddress
 1173   3509   85 87                    STA screen2+1
 1174   350B   86 86                    STX screen2
 1175                           
 1176   350D   A9 10                    LDA #alheight
 1177   350F   85 8B                    STA temp1+1             ; Set spriteheight
 1178                           
 1179   3511   AE 3E 06                 LDX procst              ; Get alien processed pointer
 1180   3514   BC 28 04                 LDY algra,X             ; Set alien graphics pointer
 1181   3517   BE AE 4D                 LDX graph,Y
 1182   351A   B9 AF 4D                 LDA graph+1,Y
 1183   351D   85 8A                    STA temp1
 1184   351F   A8                       TAY                     ; Set hb alien graphics
 1185   3520   8A                       TXA                     ; Set lb alien graphics
 1186   3521   20 00 30                 JSR sprite              ; Plot sprite
 1187   3524   4C 59 34                 JMP move5               ; Next alien
 1188                           
 1189                           ;----------------------------------------------
 1190                           ;move6:
 1191                           ;
 1192                           ; Execute action
 1193                           ;
 1194                           ; Input : A=action
 1195                           ;         Y=pattern data offset pointer
 1196                           ;----------------------------------------------
 1197                           
 1198   3527                    move6
 1199   3527   C8                       INY                     ; Point to next data
 1200   3528   84 95                    STY temp3+1             ; Save pointer
 1201                           
 1202   352A   A8                       TAY                     ; Set action pointer
 1203   352B   B9 9E 35                 LDA actiontab,Y
 1204   352E   85 8A                    STA temp1               ; Set lb action routine
 1205   3530   B9 9F 35                 LDA actiontab+1,Y
 1206   3533   85 8B                    STA temp1+1             ; Set hb action routine
 1207                           
 1208   3535   A4 95                    LDY temp3+1             ; Restore pointer
 1209   3537   6C 8A 00                 JMP (temp1)             ; Execute action
 1210                           
 1211                           ;----------------------------------------------
 1212                           ;explosion:
 1213                           ;
 1214                           ; Check if explosion delay is reached, if so
 1215                           ; plot explosion
 1216                           ;
 1217                           ; Input : -
 1218                           ; Output:
 1219                           ;----------------------------------------------
 1220                           
 1221   353A                    explosion
 1222   353A   AD 70 02                 LDA expldelay           ; Check delay of 2 frames
 1223   353D   29 01                    AND #1
 1224   353F   D0 54                    BNE expl4               ; If not, exit
 1225                           
 1226   3541   BD 40 05                 LDA alx,X               ; Get alien X-pos
 1227   3544   BC 68 05                 LDY aly,X               ; Get alien Y-pos
 1228   3547   AA                       TAX
 1229   3548   20 2D 37                 JSR xycalc              ; Calculate screenaddress
 1230   354B   85 83                    STA screen+1
 1231   354D   86 82                    STX screen
 1232   354F   85 87                    STA screen2+1           ; No move
 1233   3551   86 86                    STX screen2
 1234                           
 1235   3553   A9 10                    LDA #alheight
 1236   3555   85 8B                    STA temp1+1             ; Set sprite height
 1237                           
 1238   3557   AE 3E 06                 LDX procst              ; Get processtatus
 1239   355A   BC 28 04                 LDY algra,X             ; Set alien graphics pointer
 1240   355D   B9 AF 4D                 LDA graph+1,Y           ; Get hb alien graphics
 1241   3560   85 8A                    STA temp1
 1242                           
 1243   3562   B9 AE 4D                 LDA graph,Y             ; Get lb alien graphics
 1244   3565   85 94                    STA temp3
 1245                           
 1246   3567   C0 0C                    CPY #12                 ; Check pointer
 1247   3569   90 08                    BCC expl2
 1248                           
 1249   356B   A9 00                    LDA #0
 1250   356D   9D 28 04                 STA algra,X
 1251   3570   A8                       TAY
 1252   3571   F0 16                    BEQ expl3               ; Forced jump
 1253   3573                    expl2
 1254   3573   C8                       INY
 1255   3574   C8                       INY
 1256   3575   98                       TYA
 1257   3576   9D 28 04                 STA algra,X             ; Alien- = explosion graphics
 1258                           
 1259   3579   C0 0C                    CPY #12
 1260   357B   90 0C                    BCC expl3
 1261                           
 1262   357D   A9 C0                    LDA #$C0                ; Mark alien move
 1263   357F   85 87                    STA screen2+1
 1264                           
 1265   3581   A9 00                    LDA #0
 1266   3583   9D 00 04                 STA alst,X              ; Mark alien status
 1267   3586   CE 3C 06                 DEC almove
 1268   3589                    expl3
 1269   3589   BE AE 4D                 LDX graph,Y             ; Get lb alien graphics
 1270   358C   B9 AF 4D                 LDA graph+1,Y           ; Get hb alien graphics
 1271   358F   A8                       TAY
 1272   3590   A5 94                    LDA temp3               ; Get explosion nr
 1273   3592   4C 00 30                 JMP sprite              ; Plot explosion
 1274   3595                    expl4
 1275   3595   60                       RTS
 1276                           
 1277                           ;----------------------------------------------
 1278                           ; Flip table for reverse patterns
 1279                           ; Values EORed because of EOR#7
 1280                           ; which is used after to flip
 1281                           ; the acute angled 'climbs'.
 1282                           ;----------------------------------------------
 1283                           
 1284   3596                    flip_table
 1285   3596   07                       .db 7   ; 0 EOR 7
 1286   3597   04                       .db 4   ; 3 EOR 7
 1287   3598   05                       .db 5   ; 2 EOR 7
 1288   3599   06                       .db 6   ; 1 EOR 7
 1289   359A   00                       .db 0   ; 7 EOR 7
 1290   359B   01                       .db 1   ; 6 EOR 7
 1291   359C   02                       .db 2   ; 5 EOR 7
 1292   359D   03                       .db 3   ; 4 EOR 7
 1293                           
 1294   359E                            include ALIENS4.inc
 1295                           ;----------------------------------------------
 1296                           ;ALIENS 4
 1297                           ;----------------------------------------------
 1298                           
 1299   359E                    actiontab
 1300   359E   AE35                     .dw dat_loop            ;  0
 1301   35A0   B935                     .dw dat_newpat          ;  2
 1302   35A2   D335                     .dw dat_newalien        ;  4
 1303   35A4   4036                     .dw dat_die             ;  6
 1304   35A6   4B36                     .dw dat_dropbomb        ;  8
 1305   35A8   5B36                     .dw dat_for_loop        ; 10
 1306   35AA   6B36                     .dw dat_next            ; 12
 1307   35AC   7936                     .dw mve                 ; 14
 1308                           
 1309   35AE                    dat_loop
 1310   35AE   FE A0 04                 INC alpatoff,X
 1311   35B1   B1 90                    LDA (temp2),Y
 1312   35B3   9D A0 04                 STA alpatoff,X
 1313   35B6   4C 80 34                 JMP move7
 1314                           
 1315   35B9                    dat_newpat
 1316   35B9   FE A0 04                 INC alpatoff,X
 1317   35BC   B1 90                    LDA (temp2),Y
 1318   35BE   A8                       TAY
 1319   35BF   B9 3E 4C                 LDA vecpatdl,Y
 1320   35C2   9D 50 04                 STA alpatlow,X
 1321   35C5   B9 5C 4C                 LDA vecpatdh,Y
 1322   35C8   9D 78 04                 STA alpathigh,X
 1323   35CB   A9 00                    LDA #0
 1324   35CD   9D A0 04                 STA alpatoff,X
 1325   35D0   4C 80 34                 JMP move7
 1326                           
 1327   35D3                    dat_newalien
 1328   35D3   FE A0 04                 INC alpatoff,X
 1329   35D6   B1 90                    LDA (temp2),Y
 1330   35D8   85 8A                    STA temp1
 1331                           
 1332   35DA   AC 9A 02                 LDY aliensm1
 1333   35DD                    dat_newal2
 1334   35DD   B9 00 04                 LDA alst,Y
 1335   35E0   10 05                    BPL dat_newal3
 1336   35E2   88                       DEY
 1337   35E3   10 F8                    BPL dat_newal2
 1338   35E5   30 56                    BMI dat_newal4
 1339                           
 1340   35E7                    dat_newal3
 1341   35E7   A9 80                    LDA #$80
 1342   35E9   99 00 04                 STA alst,Y
 1343   35EC   0A                       ASL A
 1344   35ED   99 F0 04                 STA almult,Y
 1345   35F0   99 A0 04                 STA alpatoff,Y
 1346   35F3   20 55 3D                 JSR rand
 1347   35F6   29 02                    AND #2
 1348   35F8   85 8B                    STA temp1+1
 1349   35FA   18                       CLC
 1350   35FB   69 0C                    ADC #12
 1351   35FD   99 28 04                 STA algra,Y
 1352   3600   85 94                    STA temp3
 1353   3602   BD E0 05                 LDA alpatreflect,X
 1354   3605   99 E0 05                 STA alpatreflect,Y
 1355   3608   BD 40 05                 LDA alx,X
 1356   360B   48                       PHA
 1357   360C   99 40 05                 STA alx,Y
 1358   360F   BD 68 05                 LDA aly,X
 1359   3612   69 10                    ADC #16                 ; Was 8
 1360   3614   99 68 05                 STA aly,Y
 1361   3617   48                       PHA
 1362   3618   A6 8A                    LDX temp1
 1363   361A   BD 3E 4C                 LDA vecpatdl,X
 1364   361D   99 50 04                 STA alpatlow,Y
 1365   3620   BD 5C 4C                 LDA vecpatdh,X
 1366   3623   99 78 04                 STA alpathigh,Y
 1367   3626   A5 8B                    LDA temp1+1
 1368   3628   4A                       LSR A
 1369   3629   AA                       TAX
 1370   362A   BD 79 39                 LDA alien_hits,X
 1371   362D   99 C8 04                 STA alcount,Y
 1372   3630   68                       PLA
 1373   3631   A8                       TAY
 1374   3632   68                       PLA
 1375   3633   AA                       TAX
 1376   3634   EE 3C 06                 INC almove
 1377   3637   20 2E 34                 JSR alien_on_off
 1378   363A   AE 3E 06                 LDX procst
 1379   363D                    dat_newal4
 1380   363D   4C 59 34                 JMP move5
 1381                           
 1382   3640                    dat_die
 1383   3640   BD 00 04                 LDA alst,X
 1384   3643   09 01                    ORA #1
 1385   3645   9D 00 04                 STA alst,X
 1386   3648   4C 59 34                 JMP move5
 1387                           
 1388   364B                    dat_dropbomb
 1389   364B   20 55 3D                 JSR rand
 1390   364E   29 03                    AND #3
 1391   3650   D0 06                    BNE not_allowed
 1392   3652   20 21 3F                 JSR init_bomb
 1393   3655   AE 3E 06                 LDX procst
 1394   3658                    not_allowed
 1395   3658   4C 80 34                 JMP move7
 1396                           
 1397   365B                    dat_for_loop
 1398   365B   FE A0 04                 INC alpatoff,X
 1399   365E   B1 90                    LDA (temp2),Y
 1400   3660   9D 90 05                 STA al_loop_count,X
 1401   3663   C8                       INY
 1402   3664   98                       TYA
 1403   3665   9D B8 05                 STA al_loop_start,X
 1404   3668   4C 80 34                 JMP move7
 1405                           
 1406   366B                    dat_next
 1407   366B   DE 90 05                 DEC al_loop_count,X
 1408   366E   30 06                    BMI end_of_loop
 1409   3670   BD B8 05                 LDA al_loop_start,X
 1410   3673   9D A0 04                 STA alpatoff,X
 1411   3676                    end_of_loop
 1412   3676   4C 80 34                 JMP move7
 1413                           
 1414   3679                    mve
 1415   3679   BD 40 05                 LDA alx,X
 1416   367C   BC 68 05                 LDY aly,X
 1417   367F   AA                       TAX
 1418   3680   20 2D 37                 JSR xycalc
 1419   3683   85 83                    STA screen+1
 1420   3685   86 82                    STX screen
 1421   3687   AE 3E 06                 LDX procst
 1422   368A   A9 28                    LDA #40
 1423   368C   9D 68 05                 STA aly,X
 1424   368F   A8                       TAY
 1425   3690   A9 02                    LDA #2
 1426   3692   9D 40 05                 STA alx,X
 1427   3695   4C 05 35                 JMP dalg
 1428                           
 1429   3698                            include ROUT1.inc
 1430                           ;----------------------------------------------
 1431                           ;ROUT1
 1432                           ;----------------------------------------------
 1433                           
 1434                           ;----------------------------------------------
 1435                           ;check_joy:
 1436                           ;
 1437                           ; Check if button of joystick is pressed
 1438                           ;
 1439                           ; Input : X=1 -> left
 1440                           ;         X=2 -> up
 1441                           ; Output: C=0 direction detected
 1442                           ;         C=1 direction not detected
 1443                           ;----------------------------------------------
 1444                           
 1445   3698                    check_joy
 1446                           ;       LDA #$80
 1447                           ;       JSR osbyte
 1448                           ;       CPY #$C0                ; Check if button 1 pressed
 1449   3698   60                       RTS
 1450                           
 1451                           ;----------------------------------------------
 1452                           ;check_joy2:
 1453                           ;
 1454                           ; Check if button of joystick is pressed
 1455                           ;
 1456                           ; Input : X=1 -> right
 1457                           ;         X=2 -> down
 1458                           ; Output: C=0 direction detected
 1459                           ;         C=1 direction not detected
 1460                           ;----------------------------------------------
 1461                           
 1462   3699                    check_joy2
 1463                           ;       LDA #$80
 1464                           ;       JSR osbyte
 1465                           ;       CPY #$40                ; Check if button 2 pressed
 1466                           ;       ROR A
 1467                           ;       EOR #$80
 1468                           ;       ROL A
 1469   3699   60                       RTS
 1470                           
 1471                           ;----------------------------------------------
 1472                           ;pause4:
 1473                           ;
 1474                           ; Entry pause4    -> Check if key 'P' is pressed
 1475                           ; Entry check_key -> check if key in X pressed
 1476                           ;
 1477                           ; Input : -
 1478                           ; Output: A=0  key pressed
 1479                           ;         A=-1 key not pressed
 1480                           ;----------------------------------------------
 1481                           
 1482   369A                    pause4
 1483   369A   A2 30                    LDX #$30                ; Key 'P'
 1484                           
 1485   369C                    check_key
 1486   369C   8A                       TXA
 1487   369D   20 40 4D                 JSR scan_key
 1488   36A0   60                       RTS
 1489                           
 1490                           ;----------------------------------------------
 1491                           ;delay:
 1492                           ;
 1493                           ; Entry delay  -> waits +/- 3100 cycles
 1494                           ; Entry delay2 -> waits X * 1024 cycles
 1495                           ;
 1496                           ; Input : -
 1497                           ; Output: Wait X * 1024 cycles
 1498                           ;----------------------------------------------
 1499                           
 1500   36A1                    delay
 1501   36A1   A2 03                    LDX #3
 1502   36A3                    delay2
 1503   36A3   A0 00                    LDY #0
 1504   36A5                    delay3
 1505   36A5   88                       DEY
 1506   36A6   D0 FD                    BNE delay3
 1507   36A8   CA                       DEX
 1508   36A9   D0 F8                    BNE delay2
 1509   36AB                    nopause
 1510   36AB   60                       RTS
 1511                           
 1512                           ;----------------------------------------------
 1513                           ;pause:
 1514                           ;
 1515                           ; Check if key 'S' is pressed and update status
 1516                           ; Check if key 'P' pressed and update status
 1517                           ; If 'P'is pressed, wait until 'P' is pressed again
 1518                           ;
 1519                           ; Input : -
 1520                           ; Output: Update 'S' and 'P' status
 1521                           ;----------------------------------------------
 1522                           
 1523   36AC                    pause
 1524   36AC   20 78 37                 JSR sound_on_off        ; Check 'S' and update status
 1525   36AF   20 9A 36                 JSR pause4              ; Check 'P'
 1526   36B2   D0 F7                    BNE nopause
 1527   36B4   18                       CLC
 1528   36B5   6E 4C 06                 ROR pause_flag
 1529   36B8                    pause1
 1530   36B8   20 9A 36                 JSR pause4              ; Wait until 'P' is released
 1531   36BB   F0 FB                    BEQ pause1
 1532                           
 1533   36BD   A0 00                    LDY #0                  ; Print 'P' status
 1534   36BF   20 8F 3F                 JSR prnstr
 1535   36C2                    pause2
 1536   36C2   20 9A 36                 JSR pause4              ; Wait until 'P' is pressed
 1537   36C5   D0 FB                    BNE pause2
 1538   36C7                    pause3
 1539   36C7   20 9A 36                 JSR pause4              ; Wait until 'P' is released
 1540   36CA   F0 FB                    BEQ pause3
 1541                           
 1542   36CC   38                       SEC
 1543   36CD   6E 4C 06                 ROR pause_flag
 1544                           
 1545   36D0   A0 00                    LDY #0                  ; Erase 'P' status
 1546   36D2   4C 8F 3F                 JMP prnstr
 1547                           
 1548                           ;----------------------------------------------
 1549                           ;rstall:
 1550                           ;
 1551                           ; Reset all game vars
 1552                           ; Entry seed_rnd -> Init rand1 with random values
 1553                           ;
 1554                           ; Input : -
 1555                           ; Output: Reset game vars + init random var rand1
 1556                           ;----------------------------------------------
 1557                           
 1558   36D5                    rstall
 1559   36D5   A9 00                    LDA #0                  ; Reset gamevars
 1560   36D7   8D 2C 06                 STA myst
 1561   36DA   8D 3C 06                 STA almove
 1562   36DD   8D 3E 06                 STA procst
 1563   36E0   8D 3F 06                 STA mybullact
 1564   36E3   8D 40 06                 STA albullact
 1565   36E6   8D 42 06                 STA bombdel
 1566   36E9   8D 41 06                 STA initact
 1567                           
 1568   36EC   A0 27                    LDY #maxaliens-1        ; Reset alien data
 1569   36EE                    rst1
 1570   36EE   99 00 04                 STA alst,Y
 1571   36F1   88                       DEY
 1572   36F2   10 FA                    BPL rst1
 1573                           
 1574   36F4   A2 03                    LDX #maxpatt-1          ; Reset alien status
 1575   36F6                    rst2
 1576   36F6   9D 71 02                 STA initst,X
 1577   36F9   CA                       DEX
 1578   36FA   10 FA                    BPL rst2
 1579                           
 1580   36FC   A0 02                    LDY #mymaxbull-1        ; Reset mybullets
 1581   36FE                    rst3
 1582   36FE   99 0E 06                 STA mybullst,Y
 1583   3701   88                       DEY
 1584   3702   10 FA                    BPL rst3
 1585                           
 1586   3704   A0 05                    LDY #almaxbull-1        ; Reset alienbullets
 1587   3706                    rst4
 1588   3706   99 1D 06                 STA albullst,Y
 1589   3709   88                       DEY
 1590   370A   10 FA                    BPL rst4
 1591                           
 1592   370C   A9 0E                    LDA #14                 ; Set myship position
 1593   370E   8D 2A 06                 STA myx
 1594   3711   A9 A0                    LDA #176-16
 1595   3713   8D 2B 06                 STA myy
 1596                           
 1597   3716                    seed_rnd
 1598   3716   AD 04 B8                 LDA $b804               ; Feed random var rand1
 1599   3719   09 01                    ORA #1
 1600   371B   8D 6B 02                 STA rand1
 1601   371E   A9 F0                    LDA #240
 1602   3720   09 01                    ORA #1
 1603   3722   8D 6C 02                 STA rand1+1
 1604   3725   A9 FC                    LDA #$FC
 1605   3727   09 01                    ORA #1
 1606   3729   8D 6D 02                 STA rand1+2
 1607   372C   60                       RTS
 1608                           
 1609                           ;----------------------------------------------
 1610                           ;xycalc:
 1611                           ;
 1612                           ; Calculate screen address from X and Y
 1613                           ; 0<=X<=Screenwidth in bytes
 1614                           ; 8<=Y 
 1615                           ;
 1616                           ; Input : X,Y
 1617                           ; Output: X=lb and A=hb screenaddress
 1618                           ;----------------------------------------------
 1619                           
 1620   372D                    xycalc
 1621   372D   8A                       TXA
 1622   372E                    xycalc4
 1623   372E   C9 1D                    CMP #29                 ; Check right border X
 1624   3730   90 05                    BCC xycalc3
 1625   3732   E9 1D                    SBC #29                 ; If exceed, display left
 1626   3734   4C 2E 37                 JMP xycalc4
 1627   3737                    xycalc3
 1628   3737   AA                       TAX                     ; Save X
 1629                           
 1630   3738   C0 08                    CPY #8                  ; Check top border
 1631   373A   B0 03                    BCS xycalc2
 1632   373C   A9 C0                    LDA #$C0                ; Return flag upper border exceeded
 1633   373E   60                       RTS
 1634   373F                    xycalc2
 1635   373F   84 8A                    sty temp1               ; Convert X,Y to screenaddress
 1636   3741   A0 00                    ldy #0
 1637   3743   84 8B                    sty temp1+1
 1638   3745   06 8A                    asl temp1
 1639   3747   26 8B                    rol temp1+1
 1640   3749   06 8A                    asl temp1
 1641   374B   26 8B                    rol temp1+1
 1642   374D   06 8A                    asl temp1
 1643   374F   26 8B                    rol temp1+1
 1644   3751   06 8A                    asl temp1
 1645   3753   26 8B                    rol temp1+1
 1646   3755   06 8A                    asl temp1
 1647   3757   26 8B                    rol temp1+1
 1648   3759   18                       clc
 1649   375A   8A                       txa
 1650   375B   65 8A                    adc temp1
 1651   375D   85 8A                    sta temp1
 1652   375F   A5 8B                    lda temp1+1
 1653   3761   69 80                    adc #$80
 1654   3763   85 8B                    sta temp1+1
 1655   3765   60                       rts
 1656                           
 1657                           ;----------------------------------------------
 1658                           ;pokmypos:
 1659                           ;
 1660                           ; Prepare myship for plotting sprite
 1661                           ;
 1662                           ; Input : -
 1663                           ; Output: screen  -> screenaddress
 1664                           ;         temp1+1 -> spriteheight
 1665                           ;----------------------------------------------
 1666                           
 1667   3766                    pokmypos
 1668   3766   AE 2A 06                 LDX myx                 ; Calculate screenaddress
 1669   3769   AC 2B 06                 LDY myy
 1670   376C   20 2D 37                 JSR xycalc
 1671   376F   86 82                    STX screen
 1672   3771   85 83                    STA screen+1
 1673                           
 1674   3773   A0 10                    LDY #myheight           ; Set spriteheight
 1675   3775   84 8B                    STY temp1+1
 1676   3777                    sound_exit
 1677   3777   60                       RTS
 1678                           
 1679                           ;----------------------------------------------
 1680                           ;sound_on_off:
 1681                           ;
 1682                           ; Test if key S pressed after 15 loops
 1683                           ; If so, check keyboard/joystick and change status
 1684                           ; Entry display_sound_status -> print 'S' status
 1685                           ;
 1686                           ; Input : -
 1687                           ; Output: If 'S'or 'K' pressed, update status
 1688                           ;----------------------------------------------
 1689                           
 1690   3778                    sound_on_off
 1691   3778   EE 49 06                 INC counter_sound       ; Wait for 15 loops 'S' pressed
 1692   377B   AD 49 06                 LDA counter_sound
 1693   377E   29 0F                    AND #$F
 1694   3780   D0 F5                    BNE sound_exit
 1695                           
 1696   3782   20 A4 37                 JSR key_joy             ; Check keyboard/joystick status
 1697                           
 1698   3785   A2 33                    LDX #$33                ; Check if key 'S' pressed
 1699   3787   20 9C 36                 JSR check_key
 1700   378A   D0 EB                    BNE sound_exit
 1701                           
 1702   378C   20 9F 37                 JSR display_sound_status ; Erase 'S' status
 1703   378F   AD DA 40                 LDA sound_letter        ; Switch S to Q or vice versa
 1704   3792   49 06                    EOR #6                  ; S EOR 6 = Q, Q EOR 6 =S
 1705   3794   8D DA 40                 STA sound_letter
 1706   3797   AD 44 06                 LDA sound_flag
 1707   379A   49 80                    EOR #$80
 1708   379C   8D 44 06                 STA sound_flag
 1709                           
 1710   379F                    display_sound_status
 1711   379F   A0 10                    LDY #16                 ; display 'S' or 'Q'
 1712   37A1   4C 8F 3F                 JMP prnstr
 1713                           
 1714                           ;----------------------------------------------
 1715                           ;key_joy:
 1716                           ;
 1717                           ; Test if key K pressed, if so change status
 1718                           ; Entry display_key_joy_status -> print 'K' status
 1719                           ;
 1720                           ; Input : -
 1721                           ; Output: If 'K' pressed, update status
 1722                           ;----------------------------------------------
 1723                           
 1724   37A4                    key_joy
 1725   37A4   A2 2B                    LDX #$2b                ; K key
 1726   37A6   20 9C 36                 JSR check_key
 1727   37A9   D0 CC                    BNE sound_exit
 1728                           
 1729   37AB   20 BE 37                 JSR display_key_joy_status ; Erase 'K' status
 1730   37AE   AD DF 40                 LDA key_joy_letter      ; Switch K to J or vice versa
 1731   37B1   49 07                    EOR #7                  ;K EOR 7 = J, J EOR 7 = K
 1732   37B3   8D DF 40                 STA key_joy_letter
 1733   37B6   AD 45 06                 LDA key_joy_flag
 1734   37B9   49 80                    EOR #$80
 1735   37BB                    key_joy2
 1736   37BB   8D 45 06                 STA key_joy_flag
 1737                           
 1738   37BE                    display_key_joy_status
 1739   37BE   A0 12                    LDY #18                 ; display 'K' or 'J'
 1740   37C0   4C 8F 3F                 JMP prnstr
 1741                           
 1742                           ;----------------------------------------------
 1743                           ;Storage relative X and Y movements aliens
 1744                           ;----------------------------------------------
 1745                           
 1746   37C3                    addrelx
 1747   37C3   00 01 00 FF              .db 0,xstep,0,-xstep
 1748   37C7   01 01 FF FF              .db xstep,xstep,-xstep,-xstep
 1749   37CB   00 02 00 FE              .db 0,2*xstep,0,-2*xstep
 1750   37CF   02 02 FE FE              .db 2*xstep,2*xstep,-2*xstep,-2*xstep
 1751   37D3   00 03 00 FD              .db 0,3*xstep,0,-3*xstep
 1752   37D7   03 03 FD FD              .db 3*xstep,3*xstep,-3*xstep,-3*xstep
 1753   37DB   00 04 00 FC              .db 0,4*xstep,0,-4*xstep
 1754   37DF   04 04 FC FC              .db 4*xstep,4*xstep,-4*xstep,-4*xstep
 1755   37E3   00 05 00 FB              .db 0,5*xstep,0,-5*xstep
 1756   37E7   05 05 FB FB              .db 5*xstep,5*xstep,-5*xstep,-5*xstep
 1757   37EB   00 06 00 FA              .db 0,6*xstep,0,-6*xstep
 1758   37EF   06 06 FA FA              .db 6*xstep,6*xstep,-6*xstep,-6*xstep
 1759   37F3   02 02 FE FE              .db 2,2,-2,-2
 1760   37F7   02 02 FE FE              .db 2,2,-2,-2
 1761   37FB                    addrely
 1762   37FB   FC 00 04 00              .db -ystep,0,ystep,0
 1763   37FF   FC 04 04 FC              .db -ystep,ystep,ystep,-ystep
 1764   3803   F8 00 08 00              .db -2*ystep,0,2*ystep,0
 1765   3807   F8 08 08 F8              .db -2*ystep,2*ystep,2*ystep,-2*ystep
 1766   380B   F4 00 0C 00              .db -3*ystep,0,3*ystep,0
 1767   380F   F4 0C 0C F4              .db -3*ystep,3*ystep,3*ystep,-3*ystep
 1768   3813   F0 00 10 00              .db -4*ystep,0,4*ystep,0
 1769   3817   F0 10 10 F0              .db -4*ystep,4*ystep,4*ystep,-4*ystep
 1770   381B   EC 00 14 00              .db -5*ystep,0,5*ystep,0
 1771   381F   EC 14 14 EC              .db -5*ystep,5*ystep,5*ystep,-5*ystep
 1772   3823   E8 00 18 00              .db -6*ystep,0,6*ystep,0
 1773   3827   E8 18 18 E8              .db -6*ystep,6*ystep,6*ystep,-6*ystep
 1774   382B   F0 04 10 FC              .db -16,4,16,-4
 1775   382F   FC 10 04 F0              .db -4,16,4,-16
 1776                           
 1777   3833                            include ROUT2.inc
 1778                           ;----------------------------------------------
 1779                           ;ROUT2
 1780                           ;----------------------------------------------
 1781                           
 1782   3833                    collision
 1783   3833   AD 2C 06                 LDA myst                        ; Check myship is visible
 1784   3836   10 01                    BPL collis2
 1785   3838   60                       RTS                             ; No, return
 1786                           
 1787   3839                    collis2
 1788   3839   AE 9A 02                 LDX aliensm1                    ; Get nr of aliens on screen
 1789   383C                    coll1
 1790   383C   86 98                    STX temp4                       ; Save nr
 1791   383E   BD 00 04                 LDA alst,X                      ; Get alien status
 1792   3841   30 08                    BMI coll2                       ; Check if not exploding
 1793   3843                    coll3
 1794   3843   A6 98                    LDX temp4                       ; Next alien
 1795   3845   CA                       DEX
 1796   3846   10 F4                    BPL coll1
 1797   3848   4C 2C 39                 JMP aliensbombs                 ; Check if myship is hit
 1798                           
 1799                           ; Check if an alien has hit me
 1800                           
 1801   384B                    coll2
 1802   384B   4A                       LSR A
 1803   384C   B0 F5                    BCS coll3
 1804                           
 1805   384E   BD 68 05                 LDA aly,X
 1806   3851   CD 2B 06                 CMP myy
 1807   3854   90 09                    BCC coll4
 1808   3856   ED 2B 06                 SBC myy
 1809   3859   C9 10                    CMP #alheight
 1810   385B   B0 5D                    BCS check_bomb
 1811   385D   90 0D                    BCC coll_xcoord
 1812   385F                    coll4
 1813   385F   AD 2B 06                 LDA myy
 1814   3862   69 01                    ADC #1
 1815   3864   38                       SEC
 1816   3865   FD 68 05                 SBC aly,X
 1817   3868   C9 10                    CMP #myheight
 1818   386A   B0 4E                    BCS check_bomb
 1819                           
 1820   386C                    coll_xcoord
 1821   386C   BD 40 05                 LDA alx,X
 1822   386F   CD 2A 06                 CMP myx
 1823   3872   90 09                    BCC coll5
 1824   3874   ED 2A 06                 SBC myx
 1825   3877   C9 02                    CMP #mywidth
 1826   3879   B0 3F                    BCS check_bomb
 1827   387B   90 0A                    BCC crash
 1828   387D                    coll5
 1829   387D   AD 2A 06                 LDA myx
 1830   3880   FD 40 05                 SBC alx,X
 1831   3883   C9 02                    CMP #alwidth
 1832   3885   B0 33                    BCS check_bomb
 1833                           
 1834   3887                    crash
 1835   3887   38                       SEC                             ; Mark myship not visible
 1836   3888   6E 2C 06                 ROR myst
 1837                           
 1838   388B   A0 27                    LDY #maxaliens-1                ; Max alien nr
 1839   388D                    iym_dead1
 1840   388D   B9 00 04                 LDA alst,Y                      ; Mark aliens to explode
 1841   3890   09 01                    ORA #1
 1842   3892   99 00 04                 STA alst,Y
 1843   3895   88                       DEY
 1844   3896   10 F5                    BPL iym_dead1
 1845                           
 1846   3898   EE 99 02                 INC aliens
 1847   389B   EE 9A 02                 INC aliensm1
 1848   389E   AC 9A 02                 LDY aliensm1
 1849                           
 1850   38A1   A9 81                    LDA #$81
 1851   38A3   99 00 04                 STA alst,Y
 1852   38A6   AD 2B 06                 LDA myy
 1853   38A9   99 68 05                 STA aly,Y
 1854   38AC   AD 2A 06                 LDA myx
 1855   38AF   99 40 05                 STA alx,Y
 1856                           
 1857   38B2   A9 24                    LDA #36                         ; Set alien graphics
 1858   38B4   99 28 04                 STA algra,Y
 1859   38B7   4C 85 39                 JMP expsnd
 1860                           
 1861                           ; Now check if an alien has hit one of my bullets
 1862                           
 1863   38BA                    check_bomb
 1864   38BA   BD 00 04                 LDA alst,X
 1865   38BD   4A                       LSR A
 1866   38BE   B0 83                    BCS coll3
 1867                           
 1868   38C0   A0 02                    LDY #mymaxbull-1
 1869   38C2                    chkalbull
 1870   38C2   84 99                    STY temp4+1
 1871   38C4   A6 98                    LDX temp4
 1872   38C6   B9 0E 06                 LDA mybullst,Y
 1873   38C9   30 08                    BMI cab1
 1874   38CB                    cab2
 1875   38CB   A4 99                    LDY temp4+1
 1876   38CD   88                       DEY
 1877   38CE   10 F2                    BPL chkalbull
 1878   38D0   4C 43 38                 JMP coll3
 1879                           
 1880   38D3                    cab1
 1881   38D3   BD 68 05                 LDA aly,X                       ; Get alien y
 1882   38D6   D9 0B 06                 CMP mybully,Y                   ; Check if mybullet hits alien
 1883   38D9   90 F0                    BCC cab2
 1884                           
 1885   38DB   F9 0B 06                 SBC mybully,Y
 1886                           
 1887   38DE   C9 F0                    cmp #-alheight                  ; Check if bullet at bottom sprite
 1888   38E0   B0 E9                    BCS cab2            ; +bullheight
 1889                           
 1890   38E2                    cab4
 1891   38E2   BD 40 05                 LDA alx,X
 1892   38E5   D9 08 06                 CMP mybullx,Y
 1893   38E8   90 07                    BCC cab5
 1894   38EA   F9 08 06                 SBC mybullx,Y
 1895   38ED   D0 DC                    BNE cab2
 1896   38EF   F0 0B                    BEQ crash2
 1897   38F1                    cab5
 1898   38F1   B9 08 06                 LDA mybullx,Y
 1899   38F4   38                       SEC
 1900   38F5   FD 40 05                 SBC alx,X
 1901   38F8   C9 02                    CMP #alwidth
 1902   38FA   B0 CF                    BCS cab2
 1903                           
 1904   38FC                    crash2
 1905   38FC   A9 00                    LDA #0
 1906   38FE   99 0E 06                 STA mybullst,Y
 1907   3901   DE C8 04                 DEC alcount,X
 1908   3904   08                       PHP
 1909   3905   D0 08                    BNE not_dead
 1910   3907   BD 00 04                 LDA alst,X
 1911   390A   09 01                    ORA #1
 1912   390C   9D 00 04                 STA alst,X
 1913   390F                    not_dead
 1914   390F   A4 99                    LDY temp4+1
 1915   3911   BE 08 06                 LDX mybullx,Y
 1916   3914   B9 0B 06                 LDA mybully,Y
 1917   3917   A8                       TAY
 1918   3918   20 27 3E                 JSR move_bomb
 1919   391B   CE 3F 06                 DEC mybullact
 1920   391E   28                       PLP
 1921   391F   D0 08                    BNE not_dead2
 1922   3921   A6 98                    LDX temp4
 1923   3923   20 2B 3B                 JSR add_to_score
 1924   3926   20 85 39                 JSR expsnd
 1925   3929                    not_dead2
 1926   3929   4C CB 38                 JMP cab2
 1927                           
 1928                           ; Now check if the alien's bombs have hit my ship
 1929                           
 1930   392C                    aliensbombs
 1931   392C   A0 05                    LDY #almaxbull-1
 1932   392E                    albom1
 1933   392E   84 99                    STY temp4+1
 1934   3930   B9 1D 06                 LDA albullst,Y
 1935   3933   30 06                    BMI albom3
 1936   3935                    albom2
 1937   3935   A4 99                    LDY temp4+1
 1938   3937   88                       DEY
 1939   3938   10 F4                    BPL albom1
 1940                           
 1941   393A   60                       RTS              ; This is always required!!
 1942                           
 1943   393B                    albom3
 1944   393B   AD 2B 06                 LDA myy
 1945   393E   D9 17 06                 CMP albully,Y
 1946   3941   90 F2                    BCC albom2
 1947   3943   F9 17 06                 SBC albully,Y
 1948   3946   C9 10                    CMP #myheight
 1949   3948   B0 EB                    BCS albom2        ;+bullheight
 1950                           
 1951   394A   AD 2A 06                 LDA myx
 1952   394D   D9 11 06                 CMP albullx,Y
 1953   3950   90 07                    BCC albom4
 1954   3952   F9 11 06                 SBC albullx,Y
 1955   3955   D0 DE                    BNE albom2
 1956   3957   F0 0B                    BEQ crash3
 1957   3959                    albom4
 1958   3959   B9 11 06                 LDA albullx,Y
 1959   395C   38                       SEC
 1960   395D   ED 2A 06                 SBC myx
 1961   3960   C9 02                    CMP #mywidth
 1962   3962   B0 D1                    BCS albom2
 1963                           
 1964   3964                    crash3
 1965   3964   A9 00                    LDA #0
 1966   3966   99 1D 06                 STA albullst,Y
 1967   3969   BE 11 06                 LDX albullx,Y
 1968   396C   B9 17 06                 LDA albully,Y
 1969   396F   A8                       TAY
 1970   3970   20 68 3F                 JSR disp_bomb
 1971   3973   CE 40 06                 DEC albullact
 1972   3976   4C 87 38                 JMP crash
 1973                           
 1974   3979                    alien_hits
 1975   3979   01 01 01 01 01           .db 1,1,1,1,1
 1976   397E   0A 02 05 05              .db 10,2,5,5
 1977   3982   02 02                    .db 2,2
 1978   3984   02                       .db 2
 1979                           
 1980   3985                    expsnd
 1981   3985   A9 02                    LDA #2
 1982   3987   A2 0F                    LDX #15
 1983   3989   A0 02                    LDY #2
 1984   398B   20 4A 3E                 JSR mksound
 1985   398E   A9 02                    LDA #2
 1986   3990   A2 09                    LDX #9
 1987   3992   A0 40                    LDY #64
 1988   3994   4C 4A 3E                 JMP mksound             ; FX sound for explosion
 1989                           
 1990                           ; SOUND data for explosion!
 1991                           
 1992   3997                    exps1
 1993   3997   1000                     .dw $10
 1994   3999   F1FF                     .dw -15
 1995   399B   0700                     .dw 7
 1996   399D   0400                     .dw 4
 1997                           
 1998   399F                    exps2
 1999   399F   1100                     .dw $11
 2000   39A1   0100                     .dw 1
 2001   39A3   9600                     .dw 150         ; 200
 2002   39A5   0400                     .dw 4
 2003                           
 2004                           
 2005   39A7                            include ROUT3.inc
 2006                           ;----------------------------------------------
 2007                           ;ROUT3
 2008                           ;----------------------------------------------
 2009                           
 2010                           ;----------------------------------------------
 2011                           ;move_my_base:
 2012                           ;
 2013                           ; Check controls to move myship or automove in
 2014                           ; demomode
 2015                           ;
 2016                           ; Input : -
 2017                           ; Output: -
 2018                           ;----------------------------------------------
 2019                           
 2020   39A7                    move_my_base
 2021   39A7   AD 2C 06                 LDA myst                ; Ship visible?
 2022   39AA   10 01                    BPL ok_to_move          ; Yes, check if move
 2023   39AC   60                       RTS
 2024                           
 2025   39AD                    ok_to_move
 2026   39AD   20 10 32                 JSR process_demo        ;
 2027                           
 2028   39B0   A0 00                    LDY #0
 2029   39B2   84 94                    STY temp3               ; Reset key/joystick buffer X-dir
 2030   39B4   84 95                    STY temp3+1             ; Reset key/joystick buffer Y-dir
 2031                           
 2032   39B6   2C 46 06                 BIT demo_flag           ; Check if in demomode
 2033   39B9   10 0C                    BPL manual_control      ; No, check controls
 2034                           
 2035   39BB   C8                       INY                     ; Demo left
 2036   39BC   2C 48 06                 BIT demo_direction
 2037   39BF   10 01                    BPL dem_right
 2038   39C1   C8                       INY                     ; Demo right
 2039   39C2                    dem_right
 2040   39C2   84 94                    STY temp3               ; Save demo move
 2041   39C4   4C 08 3A                 JMP possible_move
 2042                           
 2043   39C7                    manual_control
 2044   39C7   2C 45 06                 BIT key_joy_flag        ; Check if keyboard/joystick controls
 2045   39CA   30 20                    BMI use_keyboard
 2046                           
 2047   39CC   A9 00                    lda #0
 2048   39CE   85 94                    sta temp3
 2049   39D0   20 08 4D                 jsr joyget
 2050   39D3   29 0F                    and #$f
 2051   39D5   AA                       tax
 2052   39D6   BD DC 39                 lda joy_set,x
 2053   39D9   4C 08 3A                 jmp possible_move
 2054                           
 2055                           ;       LDX #1                  ; Check joystick left
 2056                           ;       JSR check_joy
 2057                           ;       ROL temp3
 2058                           ;
 2059                           ;       LDX #1                  ; Check joystick right
 2060                           ;       JSR check_joy2
 2061                           ;       ROL temp3
 2062                           ;
 2063                           ;       LDX #2                  ; Check joystick up
 2064                           ;       JSR check_joy
 2065                           ;       ROL temp3+1
 2066                           ;
 2067                           ;       LDX #2                  ; Check joystick down
 2068                           ;       JSR check_joy2
 2069                           ;       ROL temp3+1
 2070                           ;
 2071                           ;       JMP possible_move
 2072                           
 2073   39DC                    joy_set:
 2074   39DC   00 04 08 0C 01           .byte 0,4,8,12,1,5,9,13,2,6,10,14,3,7,11,15
        39E1   05 09 0D 02 06 
        39E6   0A 0E 03 07 0B 
        39EB   0F 
 2075                           
 2076   39EC                    use_keyboard
 2077   39EC   A2 3A                    LDX #$3a                ; Check left = 'Z' key
 2078   39EE   20 9C 36                 JSR check_key
 2079   39F1   26 94                    ROL temp3
 2080                           
 2081   39F3   A2 38                    LDX #$38                ; Check right = 'X' key
 2082   39F5   20 9C 36                 JSR check_key
 2083   39F8   26 94                    ROL temp3
 2084                           
 2085   39FA   A2 1B                    LDX #$1b                ; Check up = ';' key
 2086   39FC   20 9C 36                 JSR check_key
 2087   39FF   26 95                    ROL temp3+1
 2088                           
 2089   3A01   A2 1E                    LDX #$1e                ; Check down = '.' key
 2090   3A03   20 9C 36                 JSR check_key
 2091   3A06   26 95                    ROL temp3+1
 2092                           
 2093   3A08                    possible_move
 2094   3A08   20 66 37                 JSR pokmypos            ; Prepare myship for plotting sprite
 2095                           
 2096   3A0B   A4 94                    LDY temp3               ; Read key buffer X-dir
 2097   3A0D   B9 64 3A                 LDA key_press_relx,Y    ; Get relative X-offset
 2098   3A10   18                       CLC                     ; Add to current X-pos
 2099   3A11   6D 2A 06                 ADC myx
 2100                           
 2101   3A14   C9 1D                    CMP #29                 ; Check right border screen
 2102   3A16   B0 03                    BCS bad_x_position      ; Jump if border reached
 2103   3A18   8D 2A 06                 STA myx                 ; Save new X-pos
 2104                           
 2105   3A1B                    bad_x_position
 2106   3A1B   A4 95                    LDY temp3+1             ; Read key buffer Y-dir
 2107   3A1D   B9 60 3A                 LDA key_press_rely,Y    ; Get relative Y-offset
 2108   3A20   18                       CLC                     ; Add to current Y-pos
 2109   3A21   6D 2B 06                 ADC myy
 2110                           
 2111   3A24   C9 6C                    CMP #124-16             ; Check myship top border
 2112   3A26   90 07                    BCC bad_y_pos           ; Jump if border reached
 2113   3A28   C9 A8                    CMP #184-16             ; Check myship bottom border
 2114   3A2A   B0 03                    BCS bad_y_pos           ; Jump if border reached
 2115   3A2C                    good_y_pos
 2116   3A2C   8D 2B 06                 STA myy                 ; Save new Y-pos
 2117                           
 2118   3A2F                    bad_y_pos
 2119   3A2F   AC 2B 06                 LDY myy                 ; Get myship Y-pos
 2120   3A32   AE 2A 06                 LDX myx                 ; Get myship X-pos
 2121   3A35   20 2D 37                 JSR xycalc              ; Calculate screenaddress
 2122   3A38   85 87                    STA screen2+1
 2123   3A3A   86 86                    STX screen2
 2124                           
 2125   3A3C   45 83                    EOR screen+1            ; Check hb screen if ship has moved
 2126   3A3E   D0 05                    BNE ship_has_moved      ; Yes, jump
 2127   3A40   8A                       txa                     ; Check lb screen if ship has moved
 2128   3A41   45 82                    EOR screen
 2129   3A43   F0 10                    BEQ ship_hasnt_moved    ; No, jump
 2130                           
 2131   3A45                    ship_has_moved
 2132   3A45   A9 10                    LDA #myheight           ; Set spriteheight
 2133   3A47   85 8B                    STA temp1+1
 2134                           
 2135   3A49   AD D2 4D                 LDA graph+36            ; Set spritegraphics address
 2136   3A4C   AA                       TAX
 2137   3A4D   AC D3 4D                 LDY graph+37
 2138   3A50   84 8A                    STY temp1
 2139   3A52   4C 00 30                 JMP sprite              ; Move sprite
 2140                           
 2141   3A55                    ship_hasnt_moved
 2142   3A55   AD 48 06                 LDA demo_direction      ; Update auto demo move
 2143   3A58   49 80                    EOR #$80
 2144   3A5A   8D 48 06                 STA demo_direction
 2145   3A5D   4C A1 36                 JMP delay
 2146                           
 2147                           ;----------------------------------------------
 2148                           ;Data for relative X- and Y- offset myship
 2149                           ;----------------------------------------------
 2150                           
 2151   3A60                    key_press_rely
 2152   3A60   00 03 FD 00              .db 0,3,-3,0
 2153                           
 2154   3A64                    key_press_relx
 2155   3A64   00 01 FF 00              .db 0,1,$FF,0
 2156                           
 2157                           ;----------------------------------------------
 2158                           ;print_scores:
 2159                           ;
 2160                           ; Print score digit X on screen from score_base
 2161                           ; 0<=X<= 6 Myscore
 2162                           ; 7<=X<=13 Highscore
 2163                           ; Digits can be left- or right aligned because a
 2164                           ; digit is 6 pixels width
 2165                           ;
 2166                           ; Input : X      = digit to be printed
 2167                           ;         screen = screen address digit
 2168                           ; Output: C=1 position=even, C=0 position=odd
 2169                           ;----------------------------------------------
 2170                           
 2171   3A68                    print_scores
 2172   3A68   86 8A                    STX temp1               ; Save digitnr
 2173   3A6A   BD C0 3A                 lda score_pos,x
 2174   3A6D   85 82                    sta screen
 2175   3A6F   BD CE 3A                 lda dig_filter1,x
 2176   3A72   8D F8 3A                 sta filter1
 2177   3A75   BD DC 3A                 lda dig_filter2,x
 2178   3A78   8D F9 3A                 sta filter2
 2179                           
 2180   3A7B   BC 2D 06                 LDY score_base,X        ; Get digit
 2181   3A7E   BE FA 3A                 LDX mult24tab,Y         ; Get lb graphdata address digit
 2182   3A81   8E A8 3A                 STX paddr+1
 2183   3A84   8E B3 3A                 stx paddr1+1
 2184                           
 2185   3A87   A6 8A                    ldx temp1
 2186   3A89   18                       clc                     ; Digit is right aligned
 2187   3A8A   AD A8 3A                 lda paddr+1             ; Add 80 to graphdata address
 2188   3A8D   7D EA 3A                 adc addr_pos,x
 2189   3A90   8D A8 3A                 sta paddr+1
 2190   3A93   18                       clc
 2191   3A94   AD B3 3A                 lda paddr1+1
 2192   3A97   7D EA 3A                 adc addr_pos,x
 2193   3A9A   8D B3 3A                 sta paddr1+1
 2194                           
 2195                           ;even_digit
 2196   3A9D   A2 07                    LDX #7                  ; Copy digit to screen
 2197   3A9F                    pscore1
 2198   3A9F   BC 29 40                 ldy scrtab,x
 2199   3AA2   B1 82                    lda (screen),Y
 2200   3AA4   2D F8 3A                 and filter1
 2201   3AA7                    paddr
 2202   3AA7   1D 00 53                 ora digits,X            ; Digit graphics left byte
 2203   3AAA   91 82                    sta (screen),Y
 2204   3AAC   C8                       iny
 2205   3AAD   B1 82                    lda (screen),Y
 2206   3AAF   2D F9 3A                 and filter2
 2207   3AB2                    paddr1
 2208   3AB2   1D 00 54                 ora digits+$100,X       ; Digit graphics right byte
 2209   3AB5   91 82                    sta (screen),y
 2210   3AB7   CA                       DEX
 2211   3AB8   10 E5                    BPL pscore1
 2212                           
 2213   3ABA   A5 8A                    LDA temp1               ; Return carry if odd pos
 2214   3ABC   6A                       ror a
 2215   3ABD   A6 8A                    ldx temp1
 2216   3ABF   60                       RTS
 2217                           
 2218   3AC0   05 06 08 09 0B   score_pos       .db 5,6,8,9,11,12,14
        3AC5   0C 0E 
 2219   3AC7   15 16 18 19 1B                   .db 21,22,24,25,27,28,30
        3ACC   1C 1E 
 2220   3ACE   00 F0 00 F0 00   dig_filter1     .db $00,$f0,$00,$f0,$00,$f0,$00
        3AD3   F0 00 
 2221   3AD5   00 F0 00 F0 00                   .db $00,$f0,$00,$f0,$00,$f0,$00
        3ADA   F0 00 
 2222   3ADC   0F 00 0F 00 0F   dig_filter2     .db $0f,$00,$0f,$00,$0f,$00,$0f
        3AE1   00 0F 
 2223   3AE3   0F 00 0F 00 0F                   .db $0f,$00,$0f,$00,$0f,$00,$0f
        3AE8   00 0F 
 2224   3AEA   00 50 00 50 00   addr_pos        .db 0,80,0,80,0,80,0
        3AEF   50 00 
 2225   3AF1   00 50 00 50 00                   .db 0,80,0,80,0,80,0
        3AF6   50 00 
 2226   3AF8   00               filter1 .db 0
 2227   3AF9   00               filter2 .db 0
 2228                           
 2229                           ;----------------------------------------------
 2230                           ;Graphic datapointer digits
 2231                           ;----------------------------------------------
 2232                           
 2233   3AFA                    mult24tab
 2234   3AFA   00 08 10                 .db 0*8,1*8,2*8
 2235   3AFD   18 20 28                 .db 3*8,4*8,5*8
 2236   3B00   30 38 40                 .db 6*8,7*8,8*8
 2237   3B03   48                       .db 9*8
 2238                           
 2239                           ;--------------------------------------------------
 2240                           ;init_score:
 2241                           ;
 2242                           ; Reset myscore=0 and print myscore + high score
 2243                           ;
 2244                           ; Input : -
 2245                           ; Output: -
 2246                           ;--------------------------------------------------
 2247                           
 2248          8014             highscore_pos   equ $8014
 2249                           
 2250   3B04                    init_score
 2251   3B04   20 BD 3B                 JSR reset_score_to_0    ; Reset myscore to 0 and print 0
 2252                                                           ; Set hb screenpos highscore 
 2253                           
 2254   3B07                    poke_hi_scr
 2255   3B07   A9 14                    LDA #<highscore_pos     ; Set lb screenpos hiscore
 2256   3B09   85 82                    STA screen
 2257                           
 2258   3B0B   A2 07                    LDX #7                  ; Plot digit on screen
 2259   3B0D   86 90                    STX temp2               ; Save odd/even flag
 2260   3B0F                    inscr1
 2261   3B0F   BD 2D 06                 LDA score_base,X        ; Get digit hiscore
 2262   3B12   D0 04                    BNE inscr2              ; 
 2263                           
 2264   3B14   A4 90                    LDY temp2               ; If digit=0 skip plotting
 2265   3B16   D0 07                    BNE inscr3
 2266   3B18                    inscr2
 2267   3B18   A9 00                    LDA #0
 2268   3B1A   85 90                    STA temp2
 2269   3B1C   20 68 3A                 JSR print_scores        ; Print digit
 2270   3B1F                    inscr3
 2271   3B1F   B0 02                    bcs not_odd             ; If screenpos=odd, add 2 to screenpos
 2272   3B21   E6 82                    inc screen
 2273   3B23                    not_odd
 2274   3B23   E6 82                    inc screen              ; Add 1 to screenpos
 2275   3B25                    inscr4
 2276   3B25   E8                       INX                     ; Next digit
 2277   3B26   E0 0E                    CPX #14                 ; All digits printed?
 2278   3B28   D0 E5                    BNE inscr1
 2279                           
 2280   3B2A   60                       RTS
 2281                           
 2282                           ;--------------------------------------------------
 2283                           ;add_to_score:
 2284                           ;
 2285                           ; Add value, depending off alien graphic nr, to myscore
 2286                           ;
 2287                           ; Input : -
 2288                           ; Output: -
 2289                           ;--------------------------------------------------
 2290   3B2B                    add_to_score
 2291   3B2B   A9 05                    LDA #<myscore_pos       ; Set myscore screenaddress
 2292   3B2D   85 82                    STA screen
 2293   3B2F   A9 80                    LDA #>myscore_pos
 2294   3B31   85 83                    STA screen+1
 2295                           
 2296   3B33   BD 28 04                 LDA algra,X             ; Get alien graphic
 2297   3B36   38                       SEC
 2298   3B37   E9 0C                    SBC #12
 2299   3B39   4A                       LSR A
 2300   3B3A   AA                       TAX
 2301   3B3B   BD 87 3B                 LDA alien_score,X       ; Get score for hitting alien
 2302                           
 2303   3B3E   A2 05                    LDX #5                  ; Set myscore digit 5
 2304   3B40                    addscr2
 2305   3B40   85 8A                    STA temp1               ; Save points to add
 2306                           ;       dec screen
 2307                           ;       dec screen
 2308                           
 2309   3B42   A5 8A                    LDA temp1               ; Get points to add
 2310   3B44   18                       CLC
 2311   3B45   7D 2D 06                 ADC myscore,X           ; Add to myscore
 2312   3B48   C9 0A                    CMP #10
 2313   3B4A   90 10                    BCC addscr3
 2314   3B4C   E9 0A                    SBC #10
 2315   3B4E   9D 2D 06                 STA myscore,X
 2316   3B51   20 68 3A                 JSR print_scores        ; Print digit on screen
 2317                           
 2318   3B54   A9 01                    LDA #1
 2319   3B56   CA                       DEX
 2320   3B57   10 E7                    BPL addscr2
 2321                           
 2322   3B59   4C BD 3B                 JMP reset_score_to_0
 2323   3B5C                    addscr3
 2324   3B5C   9D 2D 06                 STA myscore,X
 2325   3B5F   E0 02                    CPX #2
 2326   3B61   D0 21                    BNE not_ten_thousands
 2327   3B63   2C 4A 06                 BIT extra_life_flag
 2328   3B66   30 1C                    BMI not_ten_thousands
 2329   3B68   C9 02                    CMP #2
 2330   3B6A   D0 18                    BNE not_ten_thousands   ; extra life at >=20000
 2331   3B6C   38                       SEC
 2332   3B6D   6E 4A 06                 ROR extra_life_flag
 2333   3B70   8A                       TXA
 2334   3B71   48                       PHA
 2335   3B72   20 4C 41                 JSR liveson
 2336   3B75   EE 29 06                 INC lives
 2337   3B78   20 4C 41                 JSR liveson
 2338   3B7B   A2 93                    LDX #<xlife
 2339   3B7D   A0 3B                    LDY #>xlife
 2340   3B7F   20 4A 3E                 JSR mksound
 2341   3B82   68                       PLA
 2342   3B83   AA                       TAX
 2343   3B84                    not_ten_thousands
 2344   3B84   4C 68 3A                 JMP print_scores
 2345                           
 2346                           ;--------------------------------------------------
 2347                           ; Points awarded for aliens
 2348                           ; (divided by ten)
 2349                           ;--------------------------------------------------
 2350                           
 2351   3B87                    alien_score
 2352   3B87   02 02 02 02              .db 2,2,2,2
 2353   3B8B   04 08 04 04              .db 4,8,4,4
 2354   3B8F   06 08                    .db 6,8
 2355   3B91   08 08                    .db 8,8
 2356                           
 2357                           ;--------------------------------------------------
 2358                           ;--------------------------------------------------
 2359                           
 2360   3B93                    xlife
 2361   3B93   1300                     .dw $13
 2362   3B95   0300                     .dw 3
 2363   3B97   8100                     .dw 129
 2364   3B99   1E00                     .dw 30
 2365                           
 2366                           ;--------------------------------------------------
 2367                           ;--------------------------------------------------
 2368                           
 2369   3B9B                    check_new_high
 2370   3B9B   2C 46 06                 BIT demo_flag
 2371   3B9E   30 1C                    BMI not_new_high
 2372   3BA0   A2 FF                    LDX #$FF
 2373   3BA2                    new_high1
 2374   3BA2   E8                       INX
 2375   3BA3   E0 07                    CPX #7
 2376   3BA5   F0 15                    BEQ not_new_high
 2377   3BA7                    new_high2
 2378   3BA7   BD 2D 06                 LDA myscore,X
 2379   3BAA   DD 34 06                 CMP hiscore,X
 2380   3BAD   F0 F3                    BEQ new_high1
 2381   3BAF   90 0B                    BCC not_new_high
 2382   3BB1                    copy_to_high
 2383   3BB1   BD 2D 06                 LDA myscore,X
 2384   3BB4   9D 34 06                 STA hiscore,X
 2385   3BB7   E8                       INX
 2386   3BB8   E0 07                    CPX #7
 2387   3BBA   90 F5                    BCC copy_to_high
 2388   3BBC                    not_new_high
 2389   3BBC   60                       RTS
 2390                           
 2391                           ;--------------------------------------------------
 2392                           ;reset_score_to_0:
 2393                           ;
 2394                           ; Erase, reset and print myscore
 2395                           ;
 2396                           ; Input : -
 2397                           ; Output: screen = screenaddress last digit myscore
 2398                           ;         X      = 6, last digit myscore
 2399                           ;--------------------------------------------------
 2400                           
 2401          8005             myscore_pos     equ $8005
 2402          800E             myscore_last    equ myscore_pos+9
 2403                           
 2404   3BBD                    reset_score_to_0
 2405   3BBD   A0 06                    LDY #6                  ; Reset myscore to 0
 2406   3BBF   A9 00                    LDA #0
 2407   3BC1                    zero_my_score
 2408   3BC1   99 2D 06                 STA myscore,Y
 2409   3BC4   88                       DEY
 2410   3BC5   10 FA                    BPL zero_my_score
 2411                           
 2412   3BC7                    clr_next_line
 2413   3BC7   A9 00                    lda #clrscr_chr         ; Load background color
 2414   3BC9   A2 0A                    LDX #10                 ; Set width myscore in bytes
 2415   3BCB                    clr_score_screen
 2416   3BCB   9D 05 80                 STA myscore_pos,X       ; Clear byte on screen
 2417   3BCE   CA                       DEX                     ; Next byte
 2418   3BCF   10 FA                    BPL clr_score_screen
 2419                           
 2420   3BD1   18                       clc                     ; Goto next line
 2421   3BD2   AD CC 3B                 lda clr_score_screen+1
 2422   3BD5   69 20                    adc #$20
 2423   3BD7   8D CC 3B                 sta clr_score_screen+1
 2424   3BDA   C9 05                    cmp #<myscore_pos       ; Check if last line reached
 2425   3BDC   D0 E9                    bne clr_next_line
 2426                           
 2427   3BDE   A9 05                    LDA #<myscore_pos       ; Set screenaddr to last digit myscore
 2428   3BE0   85 82                    STA screen
 2429   3BE2   A9 80                    LDA #>myscore_pos
 2430   3BE4   85 83                    STA screen+1
 2431   3BE6   A2 06                    LDX #6                  ; Set pointer to last digit myscore
 2432   3BE8   4C 68 3A                 JMP print_scores        ; Plot digit
 2433                           
 2434                           ;--------------------------------------------------
 2435                           ;toggle_demo_direct:
 2436                           ;
 2437                           ; Revert direction in demomode
 2438                           ;
 2439                           ; Input : -
 2440                           ; Output: -
 2441                           ;--------------------------------------------------
 2442                           
 2443   3BEB                    toggle_demo_direct
 2444   3BEB   AD 48 06                 LDA demo_direction
 2445   3BEE   49 80                    EOR #$80
 2446   3BF0   8D 48 06                 STA demo_direction
 2447   3BF3   60                       RTS
 2448                           
 2449   3BF4                     
 2450   3BF4                            include ROUT4.inc
 2451                           ;----------------------------------------------
 2452                           ;ROUT4
 2453                           ;----------------------------------------------
 2454                           
 2455                           ;----------------------------------------------
 2456                           ;message_loop:
 2457                           ;
 2458                           ; Print message 'ENTERING WAVENR xx'
 2459                           ; If wavenr=16,32 or 48 print message
 2460                           ; Wavenr 16 -> 'SATURN'
 2461                           ;        32 -> 'BATTERY'
 2462                           ;        48 -> 'TURBO'
 2463                           ; Loop demo
 2464                           ; 
 2465                           ; Input : -
 2466                           ; Output: Demo game until demoloop counter=255
 2467                           ;         or space pressed
 2468                           ;----------------------------------------------
 2469                           
 2470   3BF4                    message_loop
 2471   3BF4   A0 FF                    LDY #$FF                ; Reset 10-digit
 2472   3BF6   A9 00                    LDA #0                  ; Reset demoloop counter
 2473   3BF8   85 98                    STA temp4
 2474   3BFA   38                       SEC
 2475   3BFB   AE 3D 06                 LDX curwave             ; Get wavenr
 2476   3BFE   E8                       INX
 2477   3BFF   8A                       TXA                     ; Set wavenr
 2478   3C00                    sub10
 2479   3C00   C8                       INY                     ; Determine 10-digit
 2480   3C01   C9 0A                    CMP #10
 2481   3C03   90 04                    BCC save_wave_text
 2482   3C05   E9 0A                    SBC #10
 2483   3C07   B0 F7                    BCS sub10
 2484   3C09                    save_wave_text
 2485   3C09   8C 7D 40                 STY wave_text           ; Set 10-digit wavenr
 2486   3C0C   8D 7E 40                 STA wave_text+1         ; Set 1-digit wavenr
 2487                           
 2488   3C0F   A0 06                    LDY #6                  ; Print 'ENTERING WAVE xx'
 2489   3C11   20 8F 3F                 JSR prnstr
 2490                           
 2491   3C14   18                       CLC                     ; First call
 2492   3C15   20 AF 3C                 JSR completion_message  ; Print message at wavenr 16,32,48
 2493   3C18                    wait_loop
 2494   3C18   20 5D 3C                 JSR escape              ; If ESC pressed end demo
 2495                           
 2496   3C1B   AD 2C 06                 LDA myst                ; If all lives gone, end demo
 2497   3C1E   30 18                    BMI esc_exit
 2498                           
 2499   3C20   20 A7 39                 JSR move_my_base        ; Move myship
 2500   3C23   20 10 3D                 JSR movestars           ; Move stars
 2501   3C26   20 55 3D                 JSR rand                ; Get random nr
 2502   3C29   20 6D 3D                 JSR process_my_bombs    ; Process bombs myship
 2503   3C2C   20 AC 36                 JSR pause               ; Check status 'S' and 'P'
 2504                           
 2505   3C2F   A2 08                    LDX #8                  ; Delay
 2506   3C31   20 A3 36                 JSR delay2
 2507                           ;       jsr wait_sync
 2508                           
 2509   3C34   C6 98                    DEC temp4
 2510   3C36   D0 E0                    BNE wait_loop           ; If demoloop counter<>255 -> loop
 2511   3C38                    esc_exit
 2512   3C38   38                       SEC                     ; Not first run
 2513   3C39   20 AF 3C                 JSR completion_message  ; Erase message at wavenr 16,32,48
 2514   3C3C   A0 06                    LDY #6                  ; Erase 'ENTERING WAVE xx'
 2515   3C3E   4C 8F 3F                 JMP prnstr
 2516                           
 2517                           ;---------------------------------------
 2518                           ;end_message:
 2519                           ;
 2520                           ; Display title and credits text
 2521                           ;
 2522                           ; Input : -
 2523                           ; Output: Print title + credit text
 2524                           ;---------------------------------------
 2525                           
 2526   3C41                    end_message
 2527   3C41   20 C0 44                 JSR title               ; Print title
 2528                           
 2529   3C44   A0 0E                    LDY #14                 ; Print credits
 2530   3C46   20 8F 3F                 JSR prnstr
 2531   3C49   A0 0A                    LDY #10
 2532   3C4B   20 8F 3F                 JSR prnstr
 2533   3C4E   A0 0C                    LDY #12
 2534   3C50   20 8F 3F                 JSR prnstr
 2535   3C53   A0 1E                    LDY #30
 2536   3C55   20 8F 3F                 JSR prnstr
 2537   3C58   A0 14                    LDY #20
 2538                           ;       LDY #38
 2539   3C5A   4C 8F 3F                 JMP prnstr
 2540                           
 2541                           ;---------------------------------------
 2542                           ;escape:
 2543                           ;
 2544                           ; Check if fire (demomode) or ESC (gamemode) pressed
 2545                           ; If pressed -> blow myship + aliens
 2546                           ;
 2547                           ; Input : -
 2548                           ; Output: If fire (demomode) or ESC (gamemode) pressed
 2549                           ;         blow myship + aliens
 2550                           ;---------------------------------------
 2551                           
 2552   3C5D                    escape
 2553   3C5D   AD 46 06                 LDA demo_flag
 2554   3C60   10 06                    BPL not_demomode        ; Check if demomode
 2555                           
 2556   3C62   20 A7 3C                 JSR chk_spc_fire        ; Check if space or fire pressed
 2557   3C65   F0 08                    BEQ test_if_already_dead; If pressed, check if lives left
 2558   3C67   60                       RTS
 2559   3C68                    not_demomode
 2560   3C68   A2 3B                    LDX #$3b                ; Test ESC key
 2561   3C6A   20 9C 36                 JSR check_key
 2562   3C6D   D0 10                    BNE no_escape
 2563   3C6F                    test_if_already_dead
 2564   3C6F   AD 2C 06                 LDA myst                ; Get my status
 2565   3C72   30 0B                    BMI no_escape           ; Check if lives left
 2566                           
 2567   3C74   20 4C 41                 JSR liveson             ; Erase ships for every live
 2568   3C77   A9 00                    LDA #0                  ; Reset lives
 2569   3C79   8D 29 06                 STA lives
 2570   3C7C   4C 87 38                 JMP crash               ; Blow aliens
 2571   3C7F                    no_escape
 2572   3C7F   60                       RTS
 2573                           
 2574                           ;---------------------------------------
 2575                           ;game_over_loop:
 2576                           ;
 2577                           ; If not demoloop start tune and
 2578                           ; print 'GAME OVER'
 2579                           ; Loop this until music is ready
 2580                           ;
 2581                           ; Input : -
 2582                           ; Output: - 
 2583                           ;---------------------------------------
 2584                           
 2585   3C80                    game_over_loop
 2586   3C80   2C 46 06                 BIT demo_flag
 2587   3C83   30 FA                    BMI no_escape           ; Check if demomode
 2588                           
 2589   3C85   A0 08                    LDY #8                  ; Print 'GAME OVER'
 2590   3C87   20 8F 3F                 JSR prnstr
 2591                           
 2592   3C8A   A0 04                    LDY #4                  ; Play game over tune
 2593   3C8C   20 68 42                 JSR StartTune
 2594   3C8F   A9 80                    lda #$80                ; Temp delay has to be music
 2595   3C91   85 98                    sta temp4
 2596                           
 2597   3C93                    game_over2
 2598   3C93   20 10 3D                 JSR movestars           ; Move stars
 2599                           
 2600   3C96   20 AC 36                 JSR pause               ; Wait a while
 2601   3C99   A2 19                    LDX #25
 2602   3C9B   20 A3 36                 JSR delay2
 2603                           
 2604                           ;       JSR MusicTest
 2605   3C9E   C6 98                    dec temp4
 2606   3CA0   D0 F1                    BNE game_over2          ; Loop if music not ready
 2607                           
 2608   3CA2   A0 08                    LDY #8                  ; Erase 'GAME OVER'
 2609   3CA4   4C 8F 3F                 JMP prnstr
 2610                           
 2611                           ;---------------------------------------
 2612                           ;chk_spc_fire:
 2613                           ;
 2614                           ; Check if space or fire is pressed
 2615                           ;
 2616                           ; Input : -
 2617                           ; Output: A=0 Space/fire pressed
 2618                           ;---------------------------------------
 2619                           
 2620   3CA7                    chk_spc_fire
 2621   3CA7   A2 00                    LDX #$00        ; Check for SPACE
 2622   3CA9   20 9C 36                 JSR check_key
 2623   3CAC   F0 00                    BEQ spc_pressed
 2624                           
 2625                           ; Insert code to test if joystick fire is pressed !!!!!!
 2626                           
 2627   3CAE                    spc_pressed
 2628   3CAE   60                       RTS
 2629                           
 2630                           ;---------------------------------------
 2631                           ;completion_message:
 2632                           ;
 2633                           ; Print message at wavenr 16,32,48
 2634                           ; Wavenr 16 -> 'SATURN'
 2635                           ;        32 -> 'BATTERY'
 2636                           ;        48 -> 'TURBO'
 2637                           ;
 2638                           ; Input : C=0 first call, C=1 not first call
 2639                           ; Output: Print message at wavenr 16,32,48
 2640                           ;---------------------------------------
 2641                           
 2642   3CAF                    completion_message
 2643   3CAF   08                       PHP                     ; Save processor status
 2644                           
 2645   3CB0   AD 3D 06                 LDA curwave             ; Get wavenr
 2646   3CB3   AA                       TAX                     ; Save wavenr
 2647   3CB4   29 0F                    AND #$F
 2648   3CB6   D0 1E                    BNE exit_compl          ; Check if multiple of 16
 2649                           
 2650   3CB8   8A                       TXA                     ; Load wavenr
 2651   3CB9   4A                       LSR A
 2652   3CBA   4A                       LSR A
 2653   3CBB   4A                       LSR A
 2654   3CBC   F0 18                    BEQ exit_compl          ; If wavenr=0, end
 2655                           
 2656   3CBE   2C 4B 06                 BIT sixteen_flag        ; Check if first call
 2657   3CC1   30 13                    BMI exit_compl          ; If not, end
 2658                           
 2659   3CC3   18                       CLC                     ; Wavenr=16 -> Y=22
 2660   3CC4   69 14                    ADC #20                 ; Wavenr=32 -> Y=24
 2661   3CC6   A8                       TAY                     ; Wavenr=48 -> Y=26
 2662   3CC7   C0 1C                    CPY #28
 2663   3CC9   B0 0B                    BCS exit_compl          ; If wavenr>=64 end
 2664                           
 2665   3CCB   28                       PLP                     ; Restore processor status
 2666   3CCC   90 05                    BCC not_second_call     ; If C=0, first call
 2667                           
 2668   3CCE   A9 FF                    LDA #$FF                ; Set second call flag
 2669   3CD0   8D 4B 06                 STA sixteen_flag
 2670   3CD3                    not_second_call
 2671   3CD3   4C 8F 3F                 JMP prnstr              ; Print message
 2672   3CD6                    exit_compl
 2673   3CD6   28                       PLP                     ; Restore processor status
 2674   3CD7   60                       RTS
 2675                           
 2676                           
 2677   3CD8                            include STARS.inc
 2678                           ;----------------------------------------------
 2679                           ;STARS
 2680                           ;----------------------------------------------
 2681                           
 2682                           ;----------------------------------------------
 2683                           ;starinit:
 2684                           ;
 2685                           ; Plot random 22 stars and store data
 2686                           ; Start at y = 8 to 184 every 8 pixels
 2687                           ; A star has 3 bytes storage:
 2688                           ;
 2689                           ; Byte 0 = lb screenaddress
 2690                           ; Byte 1 = hb screenaddress
 2691                           ; Byte 2 = colour
 2692                           ;
 2693                           ; Input : -
 2694                           ; Output: Plot 23 stars on screen (skip topline)
 2695                           ;----------------------------------------------
 2696                           
 2697   3CD8                    starinit
 2698   3CD8   A2 42                    LDX #23*3-3             ; Star datapointer
 2699   3CDA   A0 17                    LDY #23                 ; Star counter
 2700                           
 2701   3CDC   A9 00                    LDA #0
 2702   3CDE   85 92                    STA addres
 2703   3CE0   85 93                    STA addres+1
 2704   3CE2   8D 6E 02                 STA whichstar
 2705   3CE5                    starin0
 2706   3CE5   20 49 3D                 JSR starpos             ; Get random screenaddress
 2707                           
 2708   3CE8   20 55 3D                 JSR rand                ; Random position in line
 2709   3CEB   29 A0                    AND #$a0
 2710   3CED   05 92                    ORA addres
 2711   3CEF   18                       CLC
 2712   3CF0   75 A0                    ADC stardat,X
 2713   3CF2   95 A0                    STA stardat,X
 2714                           
 2715   3CF4   A5 93                    LDA addres+1
 2716   3CF6   75 A1                    ADC stardat+1,X
 2717   3CF8   95 A1                    STA stardat+1,X
 2718                           
 2719   3CFA   E6 93                    inc addres+1            ; Next line
 2720   3CFC                    gcol
 2721   3CFC   20 55 3D                 JSR rand                ; Get colour (1-3)
 2722   3CFF   29 03                    AND #3
 2723   3D01   F0 F9                    BEQ gcol
 2724                           
 2725   3D03   95 A2                    STA stardat+2,X
 2726   3D05   41 A0                    EOR (stardat,X)
 2727   3D07   81 A0                    STA (stardat,X)
 2728                           
 2729   3D09   CA                       DEX                     ; Increment data pointer
 2730   3D0A   CA                       DEX
 2731   3D0B   CA                       DEX
 2732                           
 2733   3D0C   88                       DEY                     ; Decrement Starcounter
 2734   3D0D   D0 D6                    BNE starin0
 2735                           
 2736   3D0F   60                       RTS
 2737                           
 2738                           ;----------------------------------------------
 2739                           ;movestars:
 2740                           ;
 2741                           ; Move all stars 1 pixel down
 2742                           ; If staraddress crosses #100 line, switch on/off
 2743                           ; for blinking effect
 2744                           ;
 2745                           ; Input : -
 2746                           ; Output: Move 23 stars 1 pixel down
 2747                           ;         Shift star every 8 pixels for
 2748                           ;         blinking effect
 2749                           ;----------------------------------------------
 2750                           
 2751   3D10                    movestars
 2752                           ;       rts
 2753                           
 2754   3D10   A0 17                    LDY #23
 2755   3D12   A2 00                    LDX #0
 2756   3D14                    movestar
 2757   3D14   B5 A2                    LDA stardat+2,X         ; Erase star
 2758   3D16   41 A0                    EOR (stardat,X)
 2759   3D18   81 A0                    STA (stardat,X)
 2760                           
 2761   3D1A   B5 A0                    lda stardat,x           ; Move star 1 pixel down
 2762   3D1C   18                       clc
 2763   3D1D   69 20                    ADC #$20
 2764   3D1F   95 A0                    STA stardat,X
 2765                           
 2766   3D21   29 E0                    and #$e0                ; Check crossing #100 line
 2767   3D23   D0 0B                    bne notofb
 2768                           
 2769   3D25   F6 A1                    inc stardat+1,x         ; Yes, crossing
 2770   3D27   18                       clc
 2771   3D28   B5 A0                    lda stardat,x           ; Move star to second half of screen
 2772   3D2A   69 10                    adc #$10
 2773   3D2C   29 1F                    and #$1f
 2774   3D2E   95 A0                    sta stardat,x
 2775   3D30                    notofb
 2776   3D30   B5 A1                    lda stardat+1,X         ; Check if star leaves screen
 2777   3D32   C9 98                    CMP #$98
 2778   3D34   D0 06                    BNE staron
 2779   3D36                    offbot
 2780   3D36   20 49 3D                 JSR starpos             ; Get random screenaddress
 2781   3D39   4C 3C 3D                 JMP staron
 2782   3D3C                    doapix
 2783   3D3C                    staron
 2784   3D3C   B5 A2                    LDA stardat+2,X         ; Plot star
 2785   3D3E   41 A0                    EOR (stardat,X)
 2786   3D40   81 A0                    STA (stardat,X)
 2787                           
 2788   3D42   E8                       INX                     ; Datapointer to next star
 2789   3D43   E8                       INX
 2790   3D44   E8                       INX
 2791                           
 2792   3D45   88                       DEY                     ; Next star
 2793   3D46   D0 CC                    BNE movestar
 2794                           
 2795                           ;--- Check framerate ---
 2796                           
 2797                           ;L1B90:
 2798                           ;       lda #$40
 2799                           ;L1B98:
 2800                           ;       bit $b80d
 2801                           ;       beq L1B98
 2802                           ;       lda $b804
 2803                           
 2804                           ;-----------------------
 2805                           
 2806   3D48   60                       RTS
 2807                           
 2808                           ;----------------------------------------------
 2809                           ;starpos:
 2810                           ;
 2811                           ; Get random address between #8100-#811F
 2812                           ;
 2813                           ; Input : -
 2814                           ; Output: #8100<=stardat<=#811F
 2815                           ;----------------------------------------------
 2816                           
 2817   3D49                    starpos 
 2818   3D49   A9 81                    lda #$81
 2819   3D4B   95 A1                    STA stardat+1,X         ; hb address =#81
 2820   3D4D   20 55 3D                 JSR rand
 2821   3D50   29 1F                    AND #$1F
 2822   3D52   95 A0                    STA stardat,X           ; lb address 0-#1f
 2823   3D54   60                       RTS
 2824                           
 2825                           ;----------------------------------------------
 2826                           ;rand:
 2827                           ;
 2828                           ; Get random 3-byte nr
 2829                           ;
 2830                           ; Input : -
 2831                           ; Output: random 3 byte nr at rand1
 2832                           ;----------------------------------------------
 2833                           
 2834   3D55                    rand
 2835   3D55   AD 6B 02                 LDA rand1
 2836   3D58   29 48                    AND #$48
 2837   3D5A   45 FC                    EOR $FC
 2838   3D5C   69 38                    ADC #$38
 2839   3D5E   0A                       ASL A
 2840   3D5F   0A                       ASL A
 2841   3D60   2E 6D 02                 ROL rand1+2
 2842   3D63   2E 6C 02                 ROL rand1+1
 2843   3D66   2E 6B 02                 ROL rand1
 2844   3D69   AD 6B 02                 LDA rand1
 2845   3D6C   60                       RTS
 2846                           
 2847   3D6D                            include BOMBS1.inc
 2848                           ;----------------------------------------------
 2849                           ;BOMBS1
 2850                           ;----------------------------------------------
 2851                           
 2852                           ;----------------------------------------------
 2853                           ;process_my_bombs:
 2854                           ;
 2855                           ; Check if bullets of myship have to be moved or erased
 2856                           ; Check if RET/fire is pressed to plot new bullet
 2857                           ; Entry move_bomb plots or erases a bullet
 2858                           ;
 2859                           ; Input : -
 2860                           ; Output: -
 2861                           ;----------------------------------------------
 2862                           
 2863   3D6D                    process_my_bombs
 2864   3D6D   AD 42 06                 LDA bombdel             ; Check if bombs on screen
 2865   3D70   F0 03                    BEQ procmybmb
 2866                           
 2867   3D72   CE 42 06                 DEC bombdel             ; Decrement bomb counter
 2868   3D75                    procmybmb
 2869   3D75   AD 3F 06                 LDA mybullact           ; Get mybullets on screen counter
 2870   3D78   F0 41                    BEQ bomb10              ; Jump if none
 2871                           
 2872   3D7A   A2 02                    LDX #mymaxbull-1        ; Check all bullets
 2873   3D7C                    bomb6
 2874   3D7C   86 90                    STX temp2               ; Check if bullet on screen
 2875   3D7E   BD 0E 06                 LDA mybullst,X
 2876   3D81   30 07                    BMI bomb7               ; If bullet on screen, move
 2877   3D83                    bomb9
 2878   3D83   A6 90                    LDX temp2
 2879   3D85   CA                       DEX
 2880   3D86   10 F4                    BPL bomb6               ; Loop if not last bullet
 2881   3D88   30 2E                    BMI bomb5               ; Jump if all bullets handled
 2882                           
 2883   3D8A                    bomb7
 2884   3D8A   BC 0B 06                 LDY mybully,X           ; Get Y-pos bullet
 2885   3D8D   BD 08 06                 LDA mybullx,X
 2886   3D90   AA                       TAX                     ; Get X-pos bullet
 2887   3D91   20 27 3E                 JSR move_bomb           ; Erase bullet
 2888                           
 2889   3D94   A6 90                    LDX temp2               ; Get bullet pointer
 2890   3D96   BD 0B 06                 LDA mybully,X           ; Load Y-pos bullet
 2891   3D99   38                       SEC                     ; Substrat Y-pos with 8 pixels
 2892   3D9A   E9 08                    SBC #8
 2893   3D9C   9D 0B 06                 STA mybully,X           ; Store new Y-pos
 2894   3D9F   C9 08                    cmp #8
 2895   3DA1   B0 0A                    BCS bomb8               ; Check if top border reached
 2896                           
 2897   3DA3   CE 3F 06                 DEC mybullact           ; Decrement mybullets on screen counter
 2898   3DA6   A9 00                    LDA #0                  ; Mark bullet of screen
 2899   3DA8   9D 0E 06                 STA mybullst,X
 2900   3DAB   F0 D6                    BEQ bomb9               ; Forced jump
 2901   3DAD                    bomb8
 2902   3DAD   A8                       TAY                     ; Get Y-pos bullet
 2903   3DAE   BD 08 06                 LDA mybullx,X
 2904   3DB1   AA                       TAX                     ; Get X-pos bullet
 2905   3DB2   20 27 3E                 JSR move_bomb           ; Plot bullet
 2906   3DB5   4C 83 3D                 JMP bomb9
 2907                           
 2908   3DB8                    bomb5
 2909   3DB8   AD 3F 06                 LDA mybullact           ; Get mybullets on screen counter
 2910   3DBB                    bomb10
 2911   3DBB   C9 03                    CMP #mymaxbull          ; Check if max bullet reached
 2912   3DBD   F0 35                    BEQ bomb1               ; If so, exit
 2913                           
 2914   3DBF   AD 2C 06                 LDA myst                ; Check status myship
 2915   3DC2   30 30                    BMI bomb1               ; If blown, exit
 2916                           
 2917   3DC4   AD 46 06                 LDA demo_flag           ; Check if in demomode
 2918   3DC7   30 1C                    BMI bomb11              ; If yes, skip key/joystick controls
 2919                           
 2920   3DC9   2C 45 06                 BIT key_joy_flag        ; Check to read fire or space
 2921   3DCC   30 09                    BMI kbd_fire
 2922                           
 2923                           ;------------------------------
 2924                           ; Joystick read fire button
 2925                           ;------------------------------
 2926   3DCE   20 08 4D                 jsr joyget
 2927   3DD1   29 10                    and #$10                ; Bit4=fire button
 2928   3DD3   F0 09                    beq not_button
 2929   3DD5   D0 0E                    bne bomb11
 2930                           
 2931                           ;       LDA #$80                ; Read joystick fire
 2932                           ;       LDX #0
 2933                           ;       JSR osbyte
 2934                           ;       TXA
 2935                           ;       LSR A
 2936                           ;       BCC not_button
 2937                           ;       BCS bomb11
 2938                           ;------------------------------
 2939                           
 2940   3DD7                    kbd_fire
 2941   3DD7   A2 0D                    LDX #$0d                ; Check RET
 2942   3DD9   20 9C 36                 JSR check_key
 2943   3DDC   F0 07                    BEQ bomb11
 2944   3DDE                    not_button
 2945   3DDE   A9 00                    LDA #0                  ; Reset flag fire/RET not pressed
 2946   3DE0   8D 42 06                 STA bombdel
 2947   3DE3   F0 0F                    BEQ bomb1               ; Forced jump
 2948   3DE5                    bomb11
 2949   3DE5   AD 42 06                 LDA bombdel             ; Check if new bullet fired
 2950   3DE8   D0 0A                    BNE bomb1               ; If so, exit
 2951                           
 2952   3DEA   A2 02                    LDX #mymaxbull-1        ; Get bullet pointer
 2953   3DEC                    bomb2
 2954   3DEC   BD 0E 06                 LDA mybullst,X          ; Read bullet status
 2955   3DEF   10 04                    BPL bomb3               ; Find erased bullet
 2956   3DF1   CA                       DEX
 2957   3DF2   10 F8                    BPL bomb2
 2958   3DF4                    bomb1
 2959   3DF4   60                       RTS
 2960   3DF5                    bomb3
 2961   3DF5   A9 FF                    LDA #$FF                ; Storage for new bullet found
 2962   3DF7   9D 0E 06                 STA mybullst,X          ; Mark as visible
 2963                           
 2964   3DFA   A9 07                    LDA #7                  ; Set bullets on screen????
 2965   3DFC   8D 42 06                 STA bombdel             ; WAS 3!
 2966                           
 2967   3DFF   86 90                    STX temp2               ; Save bullet pointer
 2968                           
 2969   3E01   EE 3F 06                 INC mybullact           ; Inc. actual bullets counter
 2970                           
 2971   3E04   AD 2A 06                 LDA myx                 ; Get X-pos myship
 2972                           
 2973                           ;!!!!!!!!!!!!!!!!!!!!!!!!!
 2974   3E07   18                       CLC                     ; Add 1 to get fireposition
 2975   3E08   69 01                    ADC #1                  
 2976                           ;!!!!!!!!!!!!!!!!!!!!!!!!!
 2977                           
 2978   3E0A   9D 08 06                 STA mybullx,X           ; Save X-pos bullet
 2979   3E0D   85 8A                    STA temp1               ; Save X-pos
 2980                           
 2981   3E0F   AD 2B 06                 LDA myy                 ; Get Y-pos ship
 2982   3E12   38                       SEC                     ; Substract 8
 2983   3E13   E9 08                    SBC #8
 2984                           ;       AND #191
 2985   3E15   9D 0B 06                 STA mybully,X           ; Save Y-pos bullet
 2986                           
 2987   3E18   A8                       TAY                     ; Get Y-pos bullet
 2988   3E19   A6 8A                    LDX temp1               ; Get X-pos bullet
 2989   3E1B   20 27 3E                 JSR move_bomb           ; Plot bullet
 2990                           
 2991   3E1E   A9 01                    lda #1
 2992   3E20   A2 09                    ldx #9
 2993   3E22   A0 01                    ldy #1
 2994   3E24   4C 4A 3E                 JMP mksound             ; FX sound fire
 2995                           
 2996                           ;----------------------------------------------
 2997                           ;move_bomb:
 2998                           ;
 2999                           ; Plot/erase a bullet at position X,Y
 3000                           ;
 3001                           ; Input : X=X-pos bullet
 3002                           ;         Y=Y-pos bullet
 3003                           ; Output: -
 3004                           ;----------------------------------------------
 3005                           
 3006   3E27                    move_bomb
 3007   3E27   20 3F 37                 JSR xycalc2             ; Calculate screenaddress
 3008   3E2A   85 83                    STA screen+1
 3009   3E2C   86 82                    STX screen
 3010                           
 3011   3E2E   A2 07                    LDX #7                  ; Plot bullet on screen
 3012   3E30                    bomb4
 3013   3E30   BC 29 40                 ldy scrtab,x
 3014   3E33   BD 57 3E                 LDA bombgra,X
 3015   3E36   51 82                    EOR (screen),Y
 3016   3E38   91 82                    STA (screen),Y
 3017   3E3A   CA                       DEX
 3018   3E3B   10 F3                    BPL bomb4
 3019                           
 3020   3E3D   A0 C1                    ldy #$c1                ; Plot rocketwing right
 3021   3E3F   A9 40                    LDA #$40
 3022   3E41   51 82                    EOR (screen),Y
 3023   3E43   91 82                    STA (screen),Y
 3024   3E45                    mks2
 3025   3E45   60                       RTS
 3026                           
 3027                           ;----------------------------------------------
 3028                           ;firesound:
 3029                           ;
 3030                           ;
 3031                           ;----------------------------------------------
 3032                           
 3033   3E46                    firesnd
 3034   3E46   12 02 73 04              .db $12,2,115,4
 3035                           
 3036                           ;----------------------------------------------
 3037                           ;mksound:
 3038                           ;
 3039                           ; Play fire sound when a bomb is plot
 3040                           ;
 3041                           ; Input : -
 3042                           ; Output: -
 3043                           ;----------------------------------------------
 3044                           
 3045   3E4A                    mksound
 3046                           
 3047   3E4A   2C 44 06                 bit sound_flag
 3048   3E4D   10 F6                    bpl mks2
 3049   3E4F   2C 46 06                 bit demo_flag
 3050   3E52   30 F1                    bmi mks2
 3051                           
 3052   3E54   4C 7A 4C                 jmp sound
 3053                           
 3054                           ;       lda $b002    ; org
 3055                           ;       eor #4
 3056                           ;       sta $b002
 3057                           ;       rts
 3058                           
 3059                           ;----------------------------------------------
 3060                           ;Graphics data bullets
 3061                           ;----------------------------------------------
 3062                           
 3063   3E57                    bombgra
 3064   3E57   03 03 03 03 03           .db $03,$03,$03,$03,$03,$03
        3E5C   03 
 3065   3E5D   05 01                    .db $05,$01
 3066                           
 3067                           
 3068   3E5F                            include BOMBS2.inc
 3069                           ;----------------------------------------------
 3070                           ;BOMBS2
 3071                           ;----------------------------------------------
 3072                           
 3073                           ;----------------------------------------------
 3074                           ;process_aliens_bombs:
 3075                           ;
 3076                           ; - Try to init a new alien bomb
 3077                           ; - Move alien bombs on screen
 3078                           ;----------------------------------------------
 3079                           
 3080   3E5F                    process_aliens_bombs
 3081                           
 3082                           ; Try to init a bomb (random)
 3083                           
 3084   3E5F   AD 40 06                 LDA albullact           ; Check for max alien bullets
 3085   3E62   C9 06                    CMP #almaxbull
 3086   3E64   F0 36                    BEQ nobomb
 3087                           
 3088   3E66   AD 9A 02                 LDA aliensm1            ; Check for 20 aliens
 3089   3E69   C9 14                    CMP #20
 3090   3E6B   90 12                    BCC prb2                ; Jump if less then 20 aliens
 3091                           
 3092   3E6D   AD 48 04                 LDA algra+32            ; If more, check if alien 32 = sprite 22
 3093   3E70   C9 16                    CMP #22
 3094   3E72   D0 0B                    BNE prb2                ; If not, jump
 3095                           
 3096   3E74   AD 6C 02                 LDA rand1+1             ; Alien 32 = sprite 22, get rand+1
 3097   3E77   29 0F                    AND #$F                 ; Filter between 0-15
 3098   3E79   D0 04                    BNE prb2                ; If not 0, jump
 3099                           
 3100   3E7B   A9 20                    LDA #32                 ; Forced jump
 3101   3E7D   D0 11                    BNE prb
 3102   3E7F                    prb2
 3103   3E7F   20 55 3D                 JSR rand                ; Get random nr
 3104   3E82                    bombrate
 3105   3E82   29 0F                    AND #15                 ; Limit between 1-15
 3106   3E84   D0 16                    BNE nobomb              ; Jump if not 0
 3107                           
 3108   3E86   AD 6C 02                 LDA rand1+1             ; Get new random nr
 3109   3E89   29 3F                    AND #63                 ; Limit between 1-63
 3110   3E8B   CD 99 02                 CMP aliens
 3111   3E8E   B0 0C                    BCS nobomb              ; Jump if rand>=aliens
 3112   3E90                    prb
 3113   3E90   AA                       TAX                     ; Set alien pointer
 3114   3E91   BD 00 04                 LDA alst,X              ; Get status alien
 3115   3E94   10 06                    BPL nobomb              ; If bit7 = 0, nobomb
 3116   3E96   4A                       LSR A                   ; Check bit0
 3117   3E97   B0 03                    BCS nobomb              ; If set, nobomb
 3118   3E99   20 21 3F                 JSR init_bomb           ; Init bomb
 3119                           
 3120                           ; Process the alien bombs
 3121                           
 3122   3E9C                    nobomb
 3123   3E9C   AD 40 06                 LDA albullact           ; Get nr of alien bombs
 3124   3E9F   F0 0E                    BEQ none_move           ; If no bomb, exit
 3125                           
 3126   3EA1   A2 05                    LDX #almaxbull-1
 3127   3EA3                    malbomb
 3128   3EA3   86 90                    STX temp2
 3129   3EA5   BD 1D 06                 LDA albullst,X          ; Get alien bullet status
 3130   3EA8   30 06                    BMI malbomb2            ; If bit7 = 1, jump
 3131   3EAA                    malbomb3
 3132   3EAA   A6 90                    LDX temp2
 3133   3EAC   CA                       DEX                     ; Next alien
 3134   3EAD   10 F4                    BPL malbomb
 3135   3EAF                    none_move
 3136   3EAF   60                       RTS
 3137                           
 3138   3EB0                    malbomb2
 3139   3EB0   BD 23 06                 LDA albullspeed,X       ; Get alien bullet speed
 3140   3EB3   30 07                    BMI always_move         ; If bit7 = 1 move
 3141                           
 3142   3EB5   A9 01                    LDA #1                  ; Filter bit0
 3143   3EB7   2C 6F 02                 BIT counter
 3144   3EBA   D0 EE                    BNE malbomb3            ; If set, next alien
 3145   3EBC                    always_move
 3146   3EBC   BC 17 06                 LDY albully,X           ; Get Y-pos alien bullet
 3147   3EBF   BD 11 06                 LDA albullx,X           ; Get X-pos alien bullet
 3148   3EC2   AA                       TAX
 3149   3EC3   86 91                    STX temp2+1             ; Save X
 3150   3EC5   20 68 3F                 JSR disp_bomb           ; Display bomb
 3151                           
 3152   3EC8   A6 90                    LDX temp2
 3153   3ECA   BD 17 06                 LDA albully,X           ; Get Y-pos alien bomb
 3154   3ECD   18                       CLC                     ; Add 8 to Y-pos
 3155   3ECE   69 08                    ADC #8
 3156   3ED0   9D 17 06                 STA albully,X           ; Store Y-pos alien bomb
 3157   3ED3   C9 C0                    cmp #192                ; Check for bottom line of screen
 3158   3ED5   90 0B                    BCC malbomb4            ; Jump if not
 3159   3ED7   A9 00                    LDA #0                  ; Else reset alien status
 3160   3ED9   9D 1D 06                 STA albullst,X
 3161   3EDC   CE 40 06                 DEC albullact           ; Dec actual alien bullets
 3162   3EDF   4C AA 3E                 JMP malbomb3            ; Next alien
 3163                           
 3164   3EE2                    malbomb4
 3165   3EE2   A8                       TAY                     ; Set Y-pos alien bomb
 3166                           
 3167   3EE3   AD 9A 02                 LDA aliensm1            ; Check if more then 20 aliens
 3168   3EE6   C9 14                    CMP #20
 3169   3EE8   B0 2F                    BCS malbomb5            ; More then 20 aliens, jump
 3170                           
 3171   3EEA   AD 3D 06                 LDA curwave             ; Get wavenr
 3172   3EED   C9 0D                    CMP #13
 3173   3EEF   90 28                    BCC malbomb5            ; Less then 13, jump
 3174                           
 3175   3EF1   C9 1D                    CMP #29                 
 3176   3EF3   B0 05                    BCS homi1               ; More then 29, jump
 3177                           
 3178   3EF5   BD 23 06                 LDA albullspeed,X       ; Get alien bullet speed
 3179   3EF8   30 1F                    BMI malbomb5            ; If bit7 = 1, jump
 3180   3EFA                    homi1
 3181   3EFA   AD 6C 02                 LDA rand1+1             ; Get random nr
 3182   3EFD   30 1A                    BMI malbomb5            ; If bit7 = 1, jump
 3183                           
 3184   3EFF   AD 2A 06                 LDA myx                 ; Get myship X-pos
 3185   3F02   18                       CLC
 3186   3F03   69 02                    ADC #2                  ; Add 2
 3187   3F05   DD 11 06                 CMP albullx,X
 3188   3F08   F0 0F                    BEQ malbomb5            ; If bomb above ship, don't correct X-pos bomb
 3189   3F0A   B0 08                    BCS malbomb6            ; If bomb left of ship, inc X-pos bomb
 3190   3F0C   C6 91                    DEC temp2+1             ; If bomb right of ship, dec X-pos bomb
 3191   3F0E   DE 11 06                 DEC albullx,X
 3192   3F11   4C 19 3F                 JMP malbomb5
 3193   3F14                    malbomb6
 3194   3F14   E6 91                    INC temp2+1
 3195   3F16   FE 11 06                 INC albullx,X
 3196   3F19                    malbomb5
 3197   3F19   A6 91                    LDX temp2+1             ; Display bomb
 3198   3F1B   20 68 3F                 JSR disp_bomb
 3199   3F1E   4C AA 3E                 JMP malbomb3            ; Next alien
 3200                           
 3201                           ;----------------------------------------------
 3202                           ;init_bomb:
 3203                           ;
 3204                           ; Subroutine to init an alien bomb if possible!
 3205                           ;
 3206                           ; Input : -
 3207                           ; Output: -
 3208                           ;----------------------------------------------
 3209                           
 3210   3F21                    init_bomb
 3211   3F21   AD 3D 06                 LDA curwave             ; If wave<3, nobombs
 3212   3F24   C9 03                    CMP #3
 3213   3F26   90 0A                    BCC no_bomb_allowed
 3214                           
 3215   3F28   A0 05                    LDY #almaxbull-1        ; Loop all alien bombs
 3216   3F2A                    dropb1
 3217   3F2A   B9 1D 06                 LDA albullst,Y          ; Get status
 3218   3F2D   10 04                    BPL dropb2              ; If empty, use
 3219   3F2F   88                       DEY                     ; Next bomb
 3220   3F30   10 F8                    BPL dropb1
 3221                           
 3222   3F32                    no_bomb_allowed
 3223   3F32   60                       RTS
 3224                           
 3225   3F33                    dropb2
 3226   3F33   BD 68 05                 LDA aly,X               ; Get alien Y-pos
 3227   3F36   C9 10                    CMP #16
 3228   3F38   90 F8                    BCC no_bomb_allowed     ; If in top row, no bomb
 3229                           
 3230   3F3A   C9 B0                    CMP #192-16             ; Was 240
 3231   3F3C   B0 F4                    BCS no_bomb_allowed     ; If at bottom row, no bomb
 3232                           
 3233   3F3E   18                       clc
 3234   3F3F   69 10                    adc #16                 ; Add 16 for bottom alien
 3235                           ;       AND #192-16             ; Was $F8
 3236   3F41   99 17 06                 STA albully,Y           ; Set Y-pos bomb
 3237   3F44   85 90                    STA temp2
 3238   3F46   C9 50                    CMP #80                 ; Was 80
 3239   3F48   90 04                    BCC any_speed           ; If less, new speed
 3240                           
 3241   3F4A   29 7F                    AND #$7F                ; Reset bit7
 3242   3F4C   B0 03                    BCS slow_only           ; Forced jump
 3243   3F4E                    any_speed
 3244   3F4E   20 55 3D                 JSR rand                ; Get random nr
 3245   3F51                    slow_only
 3246   3F51   99 23 06                 STA albullspeed,Y       ; Store alien bullet speed
 3247                           
 3248   3F54   A9 FF                    LDA #$FF                ; Mark alien status as visible
 3249   3F56   99 1D 06                 STA albullst,Y
 3250                           
 3251   3F59   EE 40 06                 INC albullact           ; Inc alien bullets on screen
 3252                           
 3253   3F5C   BD 40 05                 LDA alx,X               ; Get alien X-pos
 3254   3F5F   18                       CLC
 3255   3F60   69 01                    ADC #1                  ; Point to middle of alien
 3256   3F62   99 11 06                 STA albullx,Y           ; Set alien bullet X-pos
 3257   3F65   AA                       TAX
 3258                           
 3259   3F66   A4 90                    LDY temp2               ; get alien bomb Y-pos
 3260                           
 3261                           ; Subroutine to display/erase
 3262                           ; a bomb.
 3263                           
 3264   3F68                    disp_bomb
 3265   3F68   20 3F 37                 JSR xycalc2             ; Calculate screen address
 3266   3F6B   85 83                    STA screen+1
 3267   3F6D   86 82                    STX screen
 3268                           
 3269   3F6F   A2 07                    LDX #7                  ; Display bomb
 3270   3F71                    disp_b2
 3271   3F71   BC 29 40                 ldy scrtab,x
 3272   3F74   BD 87 3F                 LDA albomb,X
 3273   3F77   51 82                    EOR (screen),Y
 3274   3F79   91 82                    STA (screen),Y
 3275   3F7B   CA                       DEX
 3276   3F7C   10 F3                    BPL disp_b2
 3277                           
 3278   3F7E   A0 21                    ldy #$21                ; Plot bulletwing right
 3279   3F80   A9 40                    LDA #$40
 3280   3F82   51 82                    EOR (screen),Y
 3281   3F84   91 82                    STA (screen),Y
 3282                           
 3283   3F86   60                       RTS
 3284                           
 3285                           ;----------------------------------------------
 3286                           ;albomb graphic data
 3287                           ;----------------------------------------------
 3288                           
 3289   3F87                    albomb
 3290   3F87   01 05 03 03 03           .db $01,$05,$03,$03,$03,$03,$03,$03
        3F8C   03 03 03 
 3291                           
 3292                           
 3293   3F8F                            include CHARP.inc
 3294                           ;----------------------------------------------
 3295                           ;CHARP
 3296                           ;----------------------------------------------
 3297                           
 3298                           ;----------------------------------------------
 3299                           ;prnstr:
 3300                           ;
 3301                           ; Printstring with pointer in Y
 3302                           ;
 3303                           ; Input : Y = Pointer to string in strdat
 3304                           ;             Must be even
 3305                           ; Output: String on screen with datapointer
 3306                           ;         in strdat 
 3307                           ;----------------------------------------------
 3308                           
 3309   3F8F                    prnstr
 3310   3F8F   B9 33 40                 LDA strdat,Y            ; Read stringdata address
 3311   3F92   85 84                    STA data
 3312   3F94   B9 34 40                 LDA strdat+1,Y
 3313   3F97   85 85                    STA data+1
 3314                           
 3315   3F99   A0 00                    ldy #0
 3316   3F9B   8C 32 40                 sty chrcount
 3317   3F9E   B1 84                    LDA (data),Y            ; Read screenaddress-lb
 3318   3FA0   85 92                    STA addres
 3319   3FA2   C8                       INY
 3320   3FA3   B1 84                    LDA (data),Y            ; Read screenaddress-hb
 3321   3FA5   85 93                    STA addres+1
 3322   3FA7   C8                       INY     
 3323   3FA8   B1 84                    LDA (data),Y            ; Read string length
 3324   3FAA   8D 65 02                 STA length
 3325   3FAD   C8                       INY
 3326   3FAE   B1 84                    LDA (data),Y            ; Read colour
 3327   3FB0   8D 60 02                 STA colour
 3328                           
 3329   3FB3                    nxtchr
 3330   3FB3   20 14 40                 jsr setcolour           ; Set colour, char even=$c0, odd=$0c
 3331   3FB6   C8                       INY
 3332                           
 3333   3FB7                    prnchr
 3334   3FB7   B1 84                    LDA (data),Y            ; Get character
 3335   3FB9   8C 61 02                 STY savey               ; Save string pointer
 3336                           
 3337   3FBC   85 88                    STA temp                ; Multiply by 5
 3338   3FBE   0A                       ASL A
 3339   3FBF   0A                       ASL A
 3340   3FC0   65 88                    ADC temp
 3341   3FC2   AA                       TAX                     ; X=chardata pointer
 3342                           
 3343   3FC3   A9 05                    LDA #5                  ; Set char width
 3344   3FC5   85 8C                    STA width
 3345   3FC7                    pixcolum
 3346   3FC7   A0 07                    LDY #7
 3347   3FC9   BD A0 54                 LDA spfont,X            ; Get chardata
 3348   3FCC   85 88                    STA temp                ; Address of character set (spacey)
 3349                           
 3350   3FCE                    pixcolu
 3351   3FCE   A9 00                    LDA #0                  ; colour bits
 3352   3FD0   06 88                    ASL temp                ; Shift out bit
 3353   3FD2   90 10                    BCC pixcol0
 3354                           
 3355   3FD4   8C 31 40                 sty tempy               ; Get screen offset 
 3356   3FD7   48                       pha
 3357   3FD8   B9 29 40                 lda scrtab,y
 3358   3FDB   A8                       tay
 3359   3FDC   68                       pla
 3360                           
 3361   3FDD   51 92                    EOR (addres),Y          ; Put on screen
 3362   3FDF   91 92                    STA (addres),Y
 3363   3FE1   AC 31 40                 ldy tempy
 3364   3FE4                    pixcol0
 3365   3FE4   88                       DEY
 3366   3FE5   10 E7                    BPL pixcolu
 3367                           
 3368   3FE7   E8                       INX                     ; Inc chardatapointer
 3369   3FE8   C6 8C                    DEC width               ; Check if end of string
 3370   3FEA   F0 13                    BEQ chrdun
 3371                           
 3372   3FEC   4E CF 3F                 lsr pixcolu+1           ; Shift to next colourbit
 3373   3FEF   4E CF 3F                 lsr pixcolu+1
 3374   3FF2   AD CF 3F                 LDA pixcolu+1           ; Check if 4 bits are plotted
 3375   3FF5   D0 D0                    bne pixcolum
 3376                           
 3377   3FF7   E6 92                    inc addres              ; Point to next screenbyte
 3378   3FF9   20 20 40                 jsr even
 3379   3FFC   4C C7 3F                 jmp pixcolum
 3380                           
 3381   3FFF                    chrdun
 3382   3FFF   AD 32 40                 lda chrcount
 3383   4002   29 01                    and #1
 3384   4004   F0 02                    beq lab1
 3385   4006   E6 92                    inc addres
 3386   4008                    lab1
 3387   4008   EE 32 40                 inc chrcount
 3388   400B   AC 61 02                 LDY savey
 3389   400E   CE 65 02                 DEC length
 3390   4011   D0 A0                    BNE nxtchr
 3391   4013   60                       RTS
 3392                           
 3393   4014                    setcolour
 3394   4014   AD 32 40                 lda chrcount
 3395   4017   29 01                    and #1
 3396   4019   F0 05                    beq even
 3397   401B   A9 0C                    LDA #$0c
 3398   401D   4C 22 40                 jmp odd
 3399   4020                    even
 3400   4020   A9 C0                    lda #$c0
 3401   4022                    odd
 3402   4022   2D 60 02                 and colour
 3403   4025   8D CF 3F                 STA pixcolu+1
 3404   4028   60                       rts
 3405   4029                    scrtab
 3406   4029   00 20 40 60 80           .db 0,$20,$40,$60,$80,$a0,$c0,$e0
        402E   A0 C0 E0 
 3407   4031                    tempy
 3408   4031   00                       .db 0
 3409   4032                    chrcount
 3410   4032   00                       .db 0
 3411                           
 3412                           ;----------------------------------------------
 3413                           ;strdat:
 3414                           ;
 3415                           ; Pointers to stringdata
 3416                           ;----------------------------------------------
 3417                           
 3418   4033                    strdat
 3419   4033   5940                     .dw paustxt             ;0
 3420   4035   5E40                     .dw SCRtext             ;2
 3421   4037   6540                     .dw HItext              ;4
 3422   4039   6B40                     .dw entering_wave       ;6
 3423   403B   7F40                     .dw gameover            ;8
 3424   403D   8C40                     .dw pressspace          ;10
 3425   403F   AE40                     .dw atomversion         ;12
 3426   4041   C240                     .dw myname              ;14
 3427   4043   D640                     .dw letter_S_Q          ;16
 3428   4045   DB40                     .dw letter_K_J          ;18
 3429   4047   A340                     .dw pressspace2         ;20
 3430   4049   E040                     .dw finish1             ;22
 3431   404B   EA40                     .dw finish2             ;24
 3432   404D   F540                     .dw finish3             ;26
 3433   404F   FE40                     .dw finish4             ;28
 3434   4051   FE40                     .dw copyr               ;30
 3435   4053   1341                     .dw za                  ;32
 3436   4055   2141                     .dw zb                  ;34
 3437   4057   3941                     .dw zc                  ;36
 3438                           ;       .dw demotxt             ;38
 3439                           
 3440                           ;----------------------------------------------
 3441                           ;Stringdata
 3442                           ;
 3443                           ; Storage: (Word) Screenaddress
 3444                           ;          (Byte) Stringlength
 3445                           ;          (Byte) Color
 3446                           ;          (Byte) Stringdata
 3447                           ;----------------------------------------------
 3448                           
 3449   4059                    paustxt
 3450   4059   1E97                     .dw $971e               ; 77,31
 3451   405B   01 FF                    .db 1,yellow
 3452   405D   19                       .db 25                  ; 'P'
 3453                           
 3454   405E                    SCRtext
 3455   405E   0080                     .dw $8000               ; 6,0
 3456   4060   03 FF                    .db 3,red
 3457   4062   1C 0C 1B                 .db 28,12,27            ; 'SCR'
 3458                           
 3459   4065                    HItext
 3460   4065   1180                     .dw $8011               ; 42,0
 3461   4067   02 FF                    .db 2,red
 3462   4069   11 12                    .db 17,18               ; 'HI'
 3463                           
 3464   406B                    entering_wave
 3465   406B   0489                     .dw $8904               ; 17,13
 3466   406D   10 FF                    .db 16,yellow
 3467   406F   0E 17 1D 0E              .db 14,23,29,14         ; ENTE
 3468   4073   1B 12 17 10              .db 27,18,23,16         ; RING
 3469   4077   26 23 18 17              .db 38,35,24,23         ; _ZON
 3470   407B   0E 26                    .db 14,38               ; E_ 
 3471   407D                    wave_text
 3472   407D   26 26                    .db 38,38               ; __
 3473   407F                    gameover
 3474   407F   0989                     .dw $8909               ; 27,11
 3475   4081   09 FF                    .db 9,red
 3476   4083   10 0A 16 0E              .db 16,10,22,14         ; GAME
 3477   4087   26 18 1F 0E              .db 38,24,31,14         ; _OVE
 3478   408B   1B                       .db 27                  ; R
 3479                           
 3480   408C                    pressspace
 3481   408C   028E                     .dw $8e02               ; 12,22
 3482   408E   13 FF                    .db 19,green
 3483   4090   19 1B 0E 1C              .db 25,27,14,28         ; PRES
 3484   4094   1C 26 1C 19              .db 28,38,28,25         ; S_SP
 3485   4098   0A 0C 0E 26              .db 10,12,14,38         ; ACE_
 3486   409C   18 1B 26 0F              .db 24,27,38,15         ; OR_F
 3487   40A0   12 1B 0E                 .db 18,27,14            ; IRE
 3488                           
 3489   40A3                    pressspace2
 3490   40A3   0A90                     .dw $900A               ; 30,24
 3491   40A5   07 FF                    .db 7,green
 3492   40A7   1D 18 26 19              .db 29,24,38,25         ; TO_P
 3493   40AB   15 0A 22                 .db 21,10,34            ; LAY
 3494                           
 3495   40AE                    atomversion
 3496   40AE   0489                     .dw $8904               ; 27,6
 3497   40B0   10 FF                    .db 16,yellow
 3498   40B2   0A 17 0D 26              .db 10,23,13,38         ; AND_
 3499   40B6   14 0E 0E 1C              .db 20,14,14,28         ; KEES
 3500   40BA   26 1F 0A 17              .db 38,31,10,23         ; _VAN
 3501   40BE   26 18 1C 1C              .db 38,24,28,28         ; _OSS
 3502                           
 3503   40C2                    myname
 3504   40C2   0487                     .dw $8704               ; 17,8
 3505   40C4   10 FF                    .db 16,yellow
 3506   40C6   0B 22 26 14              .db 11,34,38,20         ; BY_K
 3507   40CA   0E 1F 12 17              .db 14,31,18,23         ; EVIN
 3508   40CE   26 0E 0D 20              .db 38,14,13,32         ; _EDW
 3509   40D2   0A 1B 0D 1C              .db 10,27,13,28         ; ARDS
 3510                           
 3511   40D6                    letter_S_Q
 3512   40D6   1C97                     .dw $971c               ; 74,31
 3513   40D8   01 FF                    .db 1,green
 3514   40DA                    sound_letter
 3515   40DA   1C                       .db  28                 ; S
 3516                           
 3517   40DB                    letter_K_J
 3518   40DB   1A97                     .dw $971a               ; 71,31
 3519   40DD   01 FF                    .db 1,red
 3520   40DF                    key_joy_letter
 3521   40DF   14                       .db  20                 ; K
 3522                           
 3523   40E0                    finish1
 3524   40E0   0B85                     .dw $850B               ; 32,16
 3525   40E2   06 FF                    .db 6,green
 3526   40E4   1C 0A 1D 1E              .db 28,10,29,30         ; SATU
 3527   40E8   1B 17                    .db 27,23               ; RN
 3528                           
 3529   40EA                    finish2
 3530   40EA   0B83                     .dw $830B               ; 30,16
 3531   40EC   07 FF                    .db 7,green
 3532   40EE   0B 0A 1D 1D              .db 11,10,29,29         ; BATT
 3533   40F2   0E 1B 22                 .db 14,27,34            ; ERY
 3534                           
 3535   40F5                    finish3
 3536   40F5   0C87                     .dw $870C               ; 34,16
 3537   40F7   05 FF                    .db 5,green
 3538   40F9   1D 1E 1B 0B              .db 29,30,27,11         ; TURB
 3539   40FD   18                       .db 24                  ; 0
 3540                           
 3541   40FE                    finish4
 3542                           
 3543   40FE                    copyr
 3544   40FE   0394                     .dw $9403               ; 15,28
 3545   4100   11 FF                    .db 17,red
 3546   4102   1C 1E 19 0E              .db 28,30,25,14         ; SUPE
 3547   4106   1B 12 18 1B              .db 27,18,24,27         ; RIOR
 3548   410A   26 1C 18 0F              .db 38,28,24,15         ; _SOF
 3549   410E   1D 20 0A 1B              .db 29,32,10,27         ; TWAR
 3550   4112   0E                       .db 14                  ; E
 3551                           
 3552   4113                    za
 3553   4113   FFFF                     .dw $FFFF
 3554   4115   0A FF                    .db 10,red
 3555   4117                    zs
 3556   4117   26 26 26 26 26           .db  38,38,38,38,38,38,38,38,38,38
        411C   26 26 26 26 26 
 3557                           
 3558   4121                    zb
 3559   4121   0484                     .dw $8404
 3560   4123   14 FF                    .db 20,red
 3561   4125                    zt
 3562   4125   00                       .db  0                  ; Rank 1 to 8
 3563   4126   26                       .db  38                 ; Space
 3564   4127   00 01 02 03 04           .db  0,1,2,3,4,5,6      ; Score
        412C   05 06 
 3565   412E   26                       .db  38                 ; Space
 3566   412F   00 01 02 03 04           .db  0,1,2,3,4,5,6,7,8,9        ; Name
        4134   05 06 07 08 09 
 3567                           
 3568   4139                    zc
 3569   4139   0482                     .dw $8204               ; 16,5
 3570   413B   0F FF                    .db 15,yellow
 3571   413D   0E 17 1D 0E 1B           .db 14,23,29,14,27,38   ; ENTER_
        4142   26 
 3572   4143   22 18 1E 1B 26           .db 34,24,30,27,38      ; YOUR_
 3573   4148   17 0A 16 0E              .db 23,10,22,14         ; NAME
 3574                           
 3575                           ;demotxt
 3576                           ;       .dw $970C               ; 16,5
 3577                           ;       .db 6,yellow
 3578                           ;       .db 19,24,34,2,36,9     ; JOY2.9
 3579   414C                            
 3580   414C                            include FLAGS.inc
 3581                           ;----------------------------------------------
 3582                           ;FLAGS
 3583                           ;----------------------------------------------
 3584                           
 3585                           ;----------------------------------------------
 3586                           ;liveson:
 3587                           ;
 3588                           ; Plot ship for every live from right to left
 3589                           ;
 3590                           ; Input : -
 3591                           ; Output: For every life a ship plotted
 3592                           ;----------------------------------------------
 3593                           
 3594          961E             ship_pos        equ $961e
 3595                           
 3596   414C                    liveson
 3597   414C   AE 29 06                 LDX lives               ; Save lives
 3598   414F   8E 7F 41                 stx tmplives
 3599   4152   F0 2A                    BEQ noliveson           ; Check if no lives left
 3600                           
 3601   4154   A9 96                    LDA #>ship_pos          ; Set startaddress screen first ship
 3602   4156   85 93                    STA addres+1
 3603   4158   A9 1E                    LDA #<ship_pos
 3604   415A   85 92                    STA addres
 3605   415C                    liveon0
 3606   415C   A2 00                    LDX #0                  ; Plot ship as 8 x 8 sprite
 3607   415E                    liveon1
 3608   415E   BC 29 40                 ldy scrtab,x
 3609   4161   BD 58 42                 LDA shipgra,X
 3610   4164   51 92                    EOR (addres),Y
 3611   4166   91 92                    STA (addres),Y          ; Left sprite byte
 3612                           
 3613   4168   C8                       iny
 3614   4169   BD 60 42                 LDA shipgra+8,X
 3615   416C   51 92                    EOR (addres),Y
 3616   416E   91 92                    STA (addres),Y          ; Right sprite byte
 3617                           
 3618   4170   E8                       inx                     ; Next pixelrow
 3619   4171   E0 08                    cpx #8
 3620   4173   D0 E9                    bne liveon1
 3621                           
 3622   4175   C6 92                    dec addres              ; Calc next screenaddress
 3623   4177   C6 92                    dec addres
 3624                           
 3625   4179   CE 7F 41                 dec tmplives            ; Check if all ships plotted 
 3626   417C   D0 DE                    BNE liveon0
 3627   417E                    noliveson
 3628   417E   60                       RTS
 3629                           
 3630   417F   00               tmplives        .db 0
 3631                           
 3632                           ;----------------------------------------------
 3633                           ;flagson:
 3634                           ;
 3635                           ; Draw flags to see wavenr 
 3636                           ; The flags are signed 1, 5 and 10 levels
 3637                           ;
 3638                           ; Input : -
 3639                           ; Output: Flags represent wavenr
 3640                           ;----------------------------------------------
 3641                           
 3642          9600             flag_top_pos    equ $9600
 3643          9700             flag_bot_pos    equ $9700
 3644                           
 3645   4180                    flagson
 3646   4180   AC 3D 06                 LDY curwave
 3647   4183   C8                       INY
 3648   4184   84 88                    STY temp                ; Set wavenr
 3649                           
 3650   4186   A9 96                    LDA #>flag_top_pos      ; Set top position flag
 3651   4188   85 93                    STA addres+1
 3652   418A   A9 00                    LDA #<flag_top_pos
 3653   418C   85 92                    STA addres
 3654                           
 3655   418E   A9 97                    LDA #>flag_bot_pos      ; Set bottom position flag
 3656   4190   85 97                    STA addres1+1
 3657   4192   A9 00                    LDA #<flag_bot_pos
 3658   4194   85 96                    STA addres1
 3659   4196                    flag0
 3660   4196   A5 88                    LDA temp
 3661   4198   F0 46                    BEQ nomoflags           ; Check all flags drawn
 3662                           
 3663   419A   C9 0A                    CMP #10                 ; Check to draw flag with 10
 3664   419C   90 44                    BCC flag1
 3665                           
 3666   419E   38                       SEC                     ; Decrement wave with 10
 3667   419F   E9 0A                    SBC #10
 3668   41A1   85 88                    STA temp
 3669                           
 3670   41A3   A2 00                    LDX #0                  ; Flag 10 data at #0
 3671   41A5                    flago0
 3672   41A5   A0 00                    LDY #0                  ; Reset sprite line counter
 3673   41A7   8C E1 41                 sty flgcounter
 3674   41AA                    flago1
 3675   41AA   AC E1 41                 ldy flgcounter
 3676   41AD   BD F8 41                 LDA flaggra,X
 3677   41B0   51 92                    EOR (addres),Y
 3678   41B2   91 92                    STA (addres),Y          ; Plot flagsprite top left
 3679                           
 3680   41B4   BD 08 42                 LDA flaggra+16,X
 3681   41B7   51 96                    EOR (addres1),Y
 3682   41B9   91 96                    STA (addres1),Y         ; Plot flagsprite bottom left
 3683                           
 3684   41BB   C8                       iny
 3685   41BC   BD 00 42                 lda flaggra+8,x
 3686   41BF   51 92                    EOR (addres),Y
 3687   41C1   91 92                    STA (addres),Y          ; Plot flagsprite top right
 3688                           
 3689   41C3   BD 10 42                 LDA flaggra+24,X
 3690   41C6   51 96                    EOR (addres1),Y
 3691   41C8   91 96                    STA (addres1),Y         ; Plot flagsprite bottom right
 3692                           
 3693   41CA   E8                       inx
 3694   41CB   18                       clc
 3695   41CC   AD E1 41                 lda flgcounter
 3696   41CF   69 20                    adc #$20
 3697   41D1   8D E1 41                 sta flgcounter          ; Next pixel line
 3698   41D4   D0 D4                    BNE flago1
 3699                           
 3700   41D6   E6 92                    inc addres              ; Next address screen position
 3701   41D8   E6 92                    inc addres
 3702   41DA   E6 96                    inc addres1
 3703   41DC   E6 96                    inc addres1
 3704                           
 3705   41DE   D0 B6                    BNE flag0
 3706   41E0                    nomoflags
 3707   41E0   60                       RTS
 3708                           
 3709   41E1   00               flgcounter      .db 0
 3710                           
 3711   41E2                    flag1
 3712   41E2   C9 05                    CMP #5                  ; Check to draw flag with 5
 3713   41E4   90 09                    BCC flag2
 3714                           
 3715   41E6   38                       SEC                     ; Decrement wave with 5
 3716   41E7   E9 05                    SBC #5
 3717   41E9   85 88                    STA temp
 3718                           
 3719   41EB   A2 20                    LDX #32                 ; Flag 5 data at #27
 3720   41ED   D0 B6                    BNE flago0              ; Draw flag
 3721   41EF                    flag2
 3722   41EF   38                       SEC                     ; Decrement wave with 1
 3723   41F0   E9 01                    SBC #1
 3724   41F2   85 88                    STA temp
 3725                           
 3726   41F4   A2 40                    LDX #64                 ; Flag 1 data at #54
 3727   41F6   D0 AD                    BNE flago0              ; Draw flag
 3728                           
 3729                           ;----------------------------------------------
 3730                           ;Spritedata flags and lives
 3731                           ;----------------------------------------------
 3732                           
 3733   41F8                    flaggra
 3734   41F8   1F 1F 1F 13 13           .db $1f,$1f,$1f,$13,$13,$13,$13,$13     ; Flag 10
        41FD   13 13 13 
 3735   4200   00 C0 FC 03 33           .db $00,$c0,$fc,$03,$33,$33,$33,$03
        4205   33 33 03 
 3736   4208   1F 1F 1F 10 10           .db $1f,$1f,$1f,$10,$10,$10,$10,$10
        420D   10 10 10 
 3737   4210   FC C0 00 00 00           .db $fc,$c0,$00,$00,$00,$00,$00,$00
        4215   00 00 00 
 3738                           
 3739   4218   10 1F 1F 1C 1C           .db $10,$1f,$1f,$1c,$1c,$1c,$1f,$1c     ; Flag 5
        421D   1C 1F 1C 
 3740   4220   00 00 C0 30 FC           .db $00,$00,$c0,$30,$fc,$3c,$3c,$30
        4225   3C 3C 30 
 3741   4228   1F 1F 10 10 10           .db $1f,$1f,$10,$10,$10,$10,$10,$10
        422D   10 10 10 
 3742   4230   C0 00 00 00 00           .db $c0,$00,$00,$00,$00,$00,$00,$00
        4235   00 00 00 
 3743                           
 3744   4238   10 1C 1F 1C 1C           .db $10,$1c,$1f,$1c,$1c,$1c,$1c,$1c     ; Flag 1
        423D   1C 1C 1C 
 3745   4240   00 00 00 C0 F0           .db $00,$00,$00,$c0,$f0,$fc,$f0,$c0
        4245   FC F0 C0 
 3746   4248   1F 1C 10 10 10           .db $1f,$1c,$10,$10,$10,$10,$10,$10
        424D   10 10 10 
 3747   4250   00 00 00 00 00           .db $00,$00,$00,$00,$00,$00,$00,$00
        4255   00 00 00 
 3748                           
 3749   4258                    shipgra
 3750   4258   00 00 00 13 3F           .db $00,$00,$00,$13,$3f,$3c,$3f,$03     ; Life
        425D   3C 3F 03 
 3751   4260   40 C0 C0 F1 3F           .db $40,$c0,$c0,$f1,$3f,$0f,$ff,$30
        4265   0F FF 30 
 3752                           
 3753   4268                            include MUSIC1.inc
 3754                           ;----------------------------------------------
 3755                           ;MUSIC1
 3756                           ;----------------------------------------------
 3757                           
 3758   4268                    StartTune
 3759   4268   2C 44 06                 bit sound_flag
 3760   426B   10 3D                    bpl L3067
 3761                           
 3762   426D   B9 AB 42                 lda MUSPTR,y
 3763   4270   8D 8C 42                 sta L3064+1
 3764   4273   8D 93 42                 sta L3065+1
 3765   4276   8D 98 42                 sta L3066+1
 3766                           
 3767   4279   B9 AC 42                 lda MUSPTR+1,y
 3768   427C   8D 8D 42                 sta L3064+2
 3769   427F   8D 94 42                 sta L3065+2
 3770   4282   8D 99 42                 sta L3066+2
 3771                           
 3772   4285   A9 00                    lda #0
 3773   4287   85 F3                    sta $f3
 3774   4289                    tune_loop:
 3775   4289   A6 F3                    ldx $f3
 3776   428B                    L3064:
 3777   428B   BD FF FF                 lda $ffff,x
 3778   428E   F0 1A                    beq L3067
 3779   4290   48                       pha
 3780   4291   E8                       inx
 3781   4292                    L3065:
 3782   4292   BD FF FF                 lda $ffff,x
 3783   4295   48                       pha
 3784   4296   E8                       inx
 3785   4297                    L3066:
 3786   4297   BD FF FF                 lda $ffff,x
 3787   429A   A8                       tay
 3788   429B   68                       pla
 3789   429C   AA                       tax
 3790   429D   68                       pla
 3791   429E   20 7A 4C                 jsr sound
 3792                           
 3793   42A1   E6 F3                    inc $f3
 3794   42A3   E6 F3                    inc $f3
 3795   42A5   E6 F3                    inc $f3
 3796   42A7   4C 89 42                 jmp tune_loop
 3797   42AA                    L3067
 3798   42AA   60                       rts
 3799                           
 3800                           MUSPTR:      ;  0    2    4     6       8
 3801   42AB   B742 4243 6743           .word START,DIE,OVER,NEXTZONE,BONUS
        42B1   BF43 0244 
 3802                           
 3803   42B5                    Refresh:
 3804   42B5   60                       rts
 3805   42B6                    MusicTest:
 3806   42B6   60                       rts
 3807                           
 3808   42B7                            include MUSIC2.inc
 3809                           ;----------------------------------------------
 3810                           ;MUSIC2
 3811                           ;----------------------------------------------
 3812                           
 3813   42B7                    START:
 3814          0004             fact    equ 4
 3815          0004             fact2   equ 4
 3816                           
 3817   42B7   08 14 04 28 00             .byte fact*$2,$14,4,fact2*10,0,0
        42BC   00 
 3818   42BD   08 14 04 08 00             .byte fact*$2,$14,4,fact2*2,0,0
        42C2   00 
 3819   42C3   08 14 04 18 00             .byte fact*$2,$14,4,fact2*6,0,0
        42C8   00 
 3820   42C9   08 14 04 28 00             .byte fact*$2,$14,4,fact2*10,0,0
        42CE   00 
 3821   42CF   08 14 04 08 00             .byte fact*$2,$14,4,fact2*2,0,0
        42D4   00 
 3822   42D5   08 14 04 38 00             .byte fact*$2,$14,4,fact2*14,0,0
        42DA   00 
 3823   42DB   08 14 04 18 00             .byte fact*$2,$14,4,fact2*6,0,0
        42E0   00 
 3824   42E1   08 14 04 18 00             .byte fact*$2,$14,4,fact2*6,0,0
        42E6   00 
 3825   42E7   08 14 04 18 00             .byte fact*$2,$14,4,fact2*6,0,0
        42EC   00 
 3826   42ED   08 14 04 18 00             .byte fact*$2,$14,4,fact2*6,0,0
        42F2   00 
 3827   42F3   08 14 04 18 00             .byte fact*$2,$14,4,fact2*6,0,0
        42F8   00 
 3828                           
 3829   42F9   08 11 04 28 00             .byte fact*$2,$11,4,fact2*10,0,0
        42FE   00 
 3830   42FF   08 11 04 08 00             .byte fact*$2,$11,4,fact2*2,0,0
        4304   00 
 3831   4305   08 11 04 18 00             .byte fact*$2,$11,4,fact2*6,0,0
        430A   00 
 3832   430B   08 11 04 28 00             .byte fact*$2,$11,4,fact2*10,0,0
        4310   00 
 3833   4311   08 11 04 08 00             .byte fact*$2,$11,4,fact2*2,0,0
        4316   00 
 3834   4317   08 11 04 38 00             .byte fact*$2,$11,4,fact2*14,0,0
        431C   00 
 3835                           
 3836   431D   08 0F 04 18 00             .byte fact*$2,$f,4,fact2*6,0,0
        4322   00 
 3837   4323   08 0F 04 18 00             .byte fact*$2,$f,4,fact2*6,0,0
        4328   00 
 3838   4329   08 0F 04 18 00             .byte fact*$2,$f,4,fact2*6,0,0
        432E   00 
 3839   432F   08 0F 04 18 00             .byte fact*$2,$f,4,fact2*6,0,0
        4334   00 
 3840   4335   08 0F 04 18 00             .byte fact*$2,$f,4,fact2*6,0,0
        433A   00 
 3841                           
 3842   433B   08 14 04 18 00             .byte fact*$2,$14,4,fact2*6,0,0
        4340   00 
 3843   4341   00                         .byte 0
 3844                           
 3845   4342                    DIE:
 3846          000A             fact3   equ 10
 3847   4342   28 16 01                   .byte fact3*4,22,1  ;$73 01 11001100 204
 3848   4345   28 15 01                   .byte fact3*4,21,1  ;$74 01 11010000 208
 3849   4348   28 16 01                   .byte fact3*4,22,1  ;$73 01 11001100 204
 3850   434B   28 19 01                   .byte fact3*4,25,1  ;$71 01 11000100 196
 3851   434E   28 16 01                   .byte fact3*4,22,1  ;$73 01 11001100 204
 3852   4351   28 19 01                   .byte fact3*4,25,1  ;$71 01 11000100 196
 3853   4354   28 0E 02                   .byte fact3*4,14,2  ;$6F 01 10111100 188
 3854   4357   28 0F 02                   .byte fact3*4,15,2  ;$6E 01 10111000 184
 3855   435A   50 11 02                   .byte fact3*8,17,2  ;$EC 11 10110000 176
 3856   435D   50 16 02                   .byte fact3*8,22,2  ;$E7 11 10011100 156
 3857   4360   64 11 04                   .byte fact3*10,17,4 ;$E0 11 10000000 128
 3858   4363   64 11 08                   .byte fact3*10,17,8 ;$D4 11 01010000  80
 3859   4366   00                         .byte 0
 3860                           
 3861   4367                    OVER:
 3862          000A             fact4   equ 10
 3863   4367   14 16 01                   .byte fact4*2,22,1  ;$33 00 11001100 204
 3864   436A   14 0E 02                   .byte fact4*2,14,2  ;$2F 00 10111100 188
 3865   436D   14 11 02                   .byte fact4*2,17,2  ;$2C 00 10110000 176
 3866   4370   14 16 02                   .byte fact4*2,22,2  ;$27 00 10011100 156
 3867   4373   14 0E 02                   .byte fact4*2,14,2  ;$2F 00 10111100 188
 3868   4376   14 11 02                   .byte fact4*2,17,2  ;$2C 00 10110000 176
 3869   4379   14 16 02                   .byte fact4*2,22,2  ;$27 00 10011100 156
 3870   437C   14 0E 04                   .byte fact4*2,14,4  ;$23 00 10001100 140
 3871   437F   14 11 02                   .byte fact4*2,17,2  ;$2C 00 10110000 176
 3872   4382   14 16 02                   .byte fact4*2,22,2  ;$27 00 10011100 156
 3873   4385   14 0E 04                   .byte fact4*2,14,4  ;$23 00 10001100 140
 3874   4388   14 11 04                   .byte fact4*2,17,4  ;$20 00 10000000 128
 3875   438B   14 16 02                   .byte fact4*2,22,2  ;$27 00 10011100 156
 3876   438E   14 0E 04                   .byte fact4*2,14,4  ;$23 00 10001100 140
 3877   4391   14 11 04                   .byte fact4*2,17,4  ;$20 00 10000000 128
 3878   4394   14 16 04                   .byte fact4*2,22,4  ;$1B 00 01101100 108
 3879   4397   14 0E 04                   .byte fact4*2,14,4  ;$23 00 10001100 140
 3880   439A   14 11 04                   .byte fact4*2,17,4  ;$20 00 10000000 128
 3881   439D   14 16 04                   .byte fact4*2,22,4  ;$1B 00 01101100 108
 3882   43A0   14 0E 08                   .byte fact4*2,14,8  ;$17 00 01011100  92
 3883   43A3   14 16 04                   .byte fact4*2,22,4  ;$1B 00 01101100 108
 3884   43A6   14 19 04                   .byte fact4*2,25,4  ;$19 00 01100100 100
 3885   43A9   14 0E 08                   .byte fact4*2,14,8  ;$17 00 01011100  92
 3886   43AC   14 0F 08                   .byte fact4*2,15,8  ;$16 00 01011000  88
 3887   43AF   14 11 08                   .byte fact4*2,17,8  ;$14 00 01010000  80
 3888   43B2   14 11 10                   .byte fact4*2,17,16 ;$08 00 00100000  32
 3889   43B5   14 11 10                   .byte fact4*2,17,16 ;$08 00 00100000  32
 3890   43B8   14 11 10                   .byte fact4*2,17,16 ;$08 00 00100000  32
 3891   43BB   14 11 10                   .byte fact4*2,17,16 ;$08 00 00100000  32
 3892   43BE   00                         .byte 0
 3893                           
 3894   43BF                    NEXTZONE:
 3895          0004             fact5   equ 4
 3896   43BF   04 0D 10                   .byte fact5*1,13,16 ;$C0 11 00000000 0
 3897   43C2   04 19 08                   .byte fact5*1,25,8  ;$C1 11 00000100 4
 3898   43C5   04 18 08                   .byte fact5*1,24,8  ;$C2
 3899   43C8   04 16 08                   .byte fact5*1,22,8  ;$C3
 3900   43CB   04 15 08                   .byte fact5*1,21,8  ;$C4
 3901   43CE   04 14 08                   .byte fact5*1,20,8  ;$C5
 3902   43D1   04 13 08                   .byte fact5*1,19,8  ;$C6
 3903   43D4   04 12 08                   .byte fact5*1,18,8  ;$C7
 3904   43D7   04 11 08                   .byte fact5*1,17,8  ;$C8
 3905   43DA   04 10 08                   .byte fact5*1,16,8  ;$C9
 3906   43DD   04 0F 08                   .byte fact5*1,15,8  ;$CA
 3907   43E0   04 0E 08                   .byte fact5*1,14,8  ;$CB
 3908   43E3   04 0D 08                   .byte fact5*1,13,8  ;$CC 11 00110000 48 
 3909   43E6   04 19 04                   .byte fact5*1,25,4  ;$CD
 3910   43E9   04 18 04                   .byte fact5*1,24,4  ;$CE
 3911   43EC   04 16 04                   .byte fact5*1,22,4  ;$CF
 3912   43EF   04 15 04                   .byte fact5*1,21,4  ;$D0
 3913   43F2   04 14 04                   .byte fact5*1,20,4  ;$D1
 3914   43F5   04 13 04                   .byte fact5*1,19,4  ;$D2
 3915   43F8   F0 12 04                   .byte fact5*60,18,4 ;$D3 11 01001100 76
 3916   43FB   04 11 04                   .byte fact5*1,17,4  ;$14 00 01010000 80
 3917   43FE   F0 20 02                   .byte fact5*60,32,2 ;$D5 11 01010100 84
 3918   4401   00                         .byte 0
 3919   4402                    BONUS:
 3920          000A             fact6   equ 10
 3921   4402   14 16 08                   .byte fact6*2,22,8  ;$03 00 00001100  12
 3922   4405   14 11 08                   .byte fact6*2,17,8  ;$08 00 00100000  32
 3923   4408   14 0E 08                   .byte fact6*2,14,8  ;$0B 00 00101100  44
 3924   440B   14 16 04                   .byte fact6*2,22,4  ;$0F 00 00111100  60
 3925   440E   14 11 04                   .byte fact6*2,17,4  ;$14 00 01010000  80
 3926   4411   14 16 04                   .byte fact6*2,22,4  ;$0F 00 00111100  60
 3927   4414   14 0E 08                   .byte fact6*2,14,8  ;$0B 00 00101100  44
 3928   4417   14 11 08                   .byte fact6*2,17,8  ;$08 00 00100000  32
 3929   441A   14 16 08                   .byte fact6*2,22,8  ;$03 00 00001100  12
 3930   441D   14 11 08                   .byte fact6*2,17,8  ;$08 00 00100000  32
 3931   4420   14 0E 08                   .byte fact6*2,14,8  ;$0B 00 00101100  44
 3932   4423   14 16 04                   .byte fact6*2,22,4  ;$0F 00 00111100  60
 3933   4426   14 11 04                   .byte fact6*2,17,4  ;$14 00 01010000  80
 3934   4429   14 16 04                   .byte fact6*2,22,4  ;$0F 00 00111100  60
 3935   442C   14 0E 08                   .byte fact6*2,14,8  ;$0B 00 00101100  44
 3936   442F   14 11 08                   .byte fact6*2,17,8  ;$08 00 00100000  32
 3937   4432   14 16 08                   .byte fact6*2,22,8  ;$03 00 00001100  12
 3938   4435   14 13 08                   .byte fact6*2,19,8  ;$06 00 00011000  24
 3939   4438   14 0E 08                   .byte fact6*2,14,8  ;$0B 00 00101100  44
 3940   443B   14 16 04                   .byte fact6*2,22,4  ;$0F 00 00111100  60
 3941   443E   14 13 04                   .byte fact6*2,19,4  ;$12 00 01001000  72
 3942   4441   14 16 04                   .byte fact6*2,22,4  ;$0F 00 00111100  60
 3943   4444   14 0E 08                   .byte fact6*2,14,8  ;$0B 00 00101100  44
 3944   4447   14 13 08                   .byte fact6*2,19,8  ;$06 00 00011000  24
 3945   444A   14 16 08                   .byte fact6*2,22,8  ;$03 00 00001100  12
 3946   444D   14 13 08                   .byte fact6*2,19,8  ;$06 00 00011000  24
 3947   4450   14 0E 08                   .byte fact6*2,14,8  ;$0B 00 00101100  44
 3948   4453   14 16 04                   .byte fact6*2,22,4  ;$0F 00 00111100  60
 3949   4456   14 13 04                   .byte fact6*2,19,4  ;$12 00 01001000  72
 3950   4459   14 16 04                   .byte fact6*2,22,4  ;$0F 00 00111100  60
 3951   445C   14 0E 08                   .byte fact6*2,14,8  ;$0B 00 00101100  44
 3952   445F   14 13 08                   .byte fact6*2,19,8  ;$06 00 00011000  24
 3953   4462   14 15 08                   .byte fact6*2,21,8  ;$04 00 00010000  16
 3954   4465   14 11 08                   .byte fact6*2,17,8  ;$08 00 00100000  32
 3955   4468   14 19 04                   .byte fact6*2,25,4  ;$0D 00 00110100  52
 3956   446B   14 15 04                   .byte fact6*2,21,4  ;$10 00 01000000  64
 3957   446E   14 11 04                   .byte fact6*2,17,4  ;$14 00 01010000  80
 3958   4471   14 15 04                   .byte fact6*2,21,4  ;$10 00 01000000  64
 3959   4474   14 19 04                   .byte fact6*2,25,4  ;$0D 00 00110100  52
 3960   4477   14 11 08                   .byte fact6*2,17,8  ;$08 00 00100000  32
 3961   447A   14 15 08                   .byte fact6*2,21,8  ;$04 00 00010000  16
 3962   447D   14 11 08                   .byte fact6*2,17,8  ;$08 00 00100000  32
 3963   4480   14 19 04                   .byte fact6*2,25,4  ;$0D 00 00110100  52
 3964   4483   14 15 04                   .byte fact6*2,21,4  ;$10 00 01000000  64
 3965   4486   14 11 04                   .byte fact6*2,17,4  ;$14 00 01010000  80
 3966   4489   14 15 04                   .byte fact6*2,21,4  ;$10 00 01000000  64
 3967   448C   14 19 04                   .byte fact6*2,25,4  ;$0D 00 00110100  52
 3968   448F   14 11 08                   .byte fact6*2,17,8  ;$08 00 00100000  32
 3969   4492   14 15 08                   .byte fact6*2,21,8  ;$04 00 00010000  16
 3970   4495   14 11 08                   .byte fact6*2,17,8  ;$08 00 00100000  32
 3971   4498   14 15 04                   .byte fact6*2,21,4  ;$10 00 01000000  64
 3972   449B   14 11 04                   .byte fact6*2,17,4  ;$14 00 01010000  80
 3973   449E   14 15 04                   .byte fact6*2,21,4  ;$10 00 01000000  64
 3974   44A1   14 0E 08                   .byte fact6*2,14,8  ;$0B 00 00101100  44
 3975   44A4   14 11 08                   .byte fact6*2,17,8  ;$08 00 00100000  32
 3976   44A7   14 15 08                   .byte fact6*2,21,8  ;$04 00 00010000  16
 3977   44AA   14 11 08                   .byte fact6*2,17,8  ;$08 00 00100000  32
 3978   44AD   14 0E 08                   .byte fact6*2,14,8  ;$0B 00 00101100  44
 3979   44B0   14 15 04                   .byte fact6*2,21,4  ;$10 00 01000000  64
 3980   44B3   14 11 04                   .byte fact6*2,17,4  ;$14 00 01010000  80
 3981   44B6   14 15 04                   .byte fact6*2,21,4  ;$10 00 01000000  64
 3982   44B9   14 0E 08                   .byte fact6*2,14,8  ;$0B 00 00101100  44
 3983   44BC   14 11 08                   .byte fact6*2,17,8  ;$08 00 00100000  32
 3984   44BF   00                         .byte 0
 3985                           
 3986                           ;       include MUSIC3.inc
 3987   44C0                            include TITLE.inc
 3988                           ;----------------------------------------------
 3989                           ;TITLE
 3990                           ;----------------------------------------------
 3991                           
 3992                           ;----------------------------------------------
 3993                           ;title
 3994                           ;
 3995                           ; Print title on screen in double width and height
 3996                           ;
 3997                           ; Input : -
 3998                           ; Output: Print title on screen in double height and width
 3999                           ;----------------------------------------------
 4000                           
 4001          8303             text_pos        equ $8303
 4002          0050             titcol          equ $50
 4003                           
 4004   44C0                    title
 4005   44C0   A9 03                    LDA #<text_pos          ; temp2=upper line (8 pix) 
 4006   44C2   85 90                    STA temp2
 4007   44C4   A9 03                    LDA #<(text_pos+$100)
 4008   44C6   85 94                    STA temp3               ; temp3=lower line (8 pix)
 4009   44C8   A9 83                    LDA #>text_pos
 4010   44CA   85 91                    STA temp2+1
 4011   44CC   A9 84                    LDA #>(text_pos+$100)
 4012   44CE   85 95                    STA temp3+1
 4013                           
 4014   44D0   A9 50                    lda #titcol             ; Set colour
 4015   44D2   8D 89 45                 sta titcolour
 4016                           
 4017   44D5   A2 00                    LDX #0
 4018   44D7   8E 88 45                 stx titflag             ; Flag for inc.screenbyte
 4019   44DA   86 99                    STX temp4+1             ; String pointer
 4020   44DC                    gchr
 4021   44DC   A6 99                    LDX temp4+1             ; Get stringpointer
 4022   44DE   BD 7E 45                 LDA titnam,X            ; Read string character
 4023   44E1   10 05                    BPL gch1
 4024   44E3   F0 03                    BEQ gch1
 4025   44E5   4C 7D 45                 jmp tit6                ; Stop if end of string
 4026   44E8                    gch1:
 4027   44E8   85 8A                    STA temp1               ; Save character
 4028                           
 4029   44EA   0A                       ASL A                   ; Calculate chardata pointer
 4030   44EB   0A                       ASL A
 4031   44EC   18                       CLC
 4032   44ED   65 8A                    ADC temp1
 4033   44EF   AA                       TAX
 4034                           
 4035   44F0   A9 05                    LDA #5                  ; Charwidth
 4036   44F2   85 98                    STA temp4
 4037   44F4                    tit1
 4038   44F4   BD A0 54                 LDA spfont,X            ; Get chardata
 4039   44F7   85 8A                    STA temp1
 4040                           
 4041   44F9   A9 04                    LDA #4                  ; Set pixelcounter
 4042   44FB   85 8B                    STA temp1+1
 4043   44FD   A0 00                    LDY #0
 4044   44FF                    tit2
 4045   44FF   46 8A                    LSR temp1               ; Shift out char pixel
 4046   4501   90 24                    BCC tit3                ; No pixel
 4047                           
 4048   4503   8C 31 40                 sty tempy               ; Get screen offset 
 4049   4506   B9 29 40                 lda scrtab,y
 4050   4509   A8                       tay
 4051   450A   AD 89 45                 LDA titcolour           ; Plot pixel line1
 4052   450D   51 90                    EOR (temp2),Y
 4053   450F   91 90                    STA (temp2),Y
 4054   4511   AC 31 40                 ldy tempy
 4055                           
 4056   4514   C8                       INY
 4057                           
 4058   4515   8C 31 40                 sty tempy               ; Get screen offset 
 4059   4518   B9 29 40                 lda scrtab,y
 4060   451B   A8                       tay
 4061   451C   AD 89 45                 LDA titcolour           ; Plot double pixel line1
 4062   451F   51 90                    EOR (temp2),Y
 4063   4521   91 90                    STA (temp2),Y
 4064   4523   AC 31 40                 ldy tempy
 4065                           
 4066   4526   88                       DEY
 4067   4527                    tit3
 4068   4527   A9 08                    LDA #8                  ; Filter pixel for line2
 4069   4529   25 8A                    AND temp1
 4070   452B   F0 24                    BEQ tit4                ; No pixel
 4071                           
 4072   452D   8C 31 40                 sty tempy               ; Get screen offset 
 4073   4530   B9 29 40                 lda scrtab,y
 4074   4533   A8                       tay
 4075   4534   AD 89 45                 LDA titcolour           ; Plot pixel line2
 4076   4537   51 94                    EOR (temp3),Y
 4077   4539   91 94                    STA (temp3),Y
 4078   453B   AC 31 40                 ldy tempy
 4079                           
 4080   453E   C8                       INY
 4081                           
 4082   453F   8C 31 40                 sty tempy               ; Get screen offset 
 4083   4542   B9 29 40                 lda scrtab,y
 4084   4545   A8                       tay
 4085   4546   AD 89 45                 LDA titcolour           ; Plot double pixel line2
 4086   4549   51 94                    EOR (temp3),Y
 4087   454B   91 94                    STA (temp3),Y
 4088   454D   AC 31 40                 ldy tempy
 4089                           
 4090   4550   88                       DEY
 4091   4551                    tit4
 4092   4551   C8                       INY                     ; Set screenpointer 2 pixels down
 4093   4552   C8                       INY
 4094                           
 4095   4553   C6 8B                    DEC temp1+1             ; Last pixel for byte?
 4096   4555   D0 A8                    BNE tit2
 4097                           
 4098   4557   20 67 45                 JSR titrig              ; Shift mask for second half
 4099                           
 4100   455A   E8                       INX                     ; Next string character
 4101                           
 4102   455B   C6 98                    DEC temp4               ; Check if all charpixels are shifted
 4103   455D   D0 95                    BNE tit1
 4104                           
 4105   455F   20 67 45                 JSR titrig              ; Shift mask for first half
 4106   4562   E6 99                    INC temp4+1             ; Increment stringpointer 
 4107   4564   4C DC 44                 jmp gchr                ; always
 4108                           
 4109                           titrig                          ; Shift color
 4110   4567   AD 89 45                 lda titcolour
 4111   456A   49 55                    eor #$55
 4112   456C   8D 89 45                 sta titcolour
 4113   456F   AD 88 45                 lda titflag
 4114   4572   49 FF                    eor #$ff
 4115   4574   8D 88 45                 sta titflag
 4116   4577   D0 04                    bne tit6
 4117   4579   E6 90                    inc temp2
 4118   457B   E6 94                    inc temp3
 4119   457D                    tit6
 4120   457D   60                       RTS
 4121                           
 4122                           ;----------------------------------------------
 4123                           ;Stringdata
 4124                           ;----------------------------------------------
 4125                           
 4126                           titnam                          ; Title string
 4127   457E   10 0A 15 0A              .db 16,10,21,10         ;GALA
 4128   4582   0F 18 1B 0C              .db 15,24,27,12         ;FORC
 4129   4586   0E FF                    .db 14,$FF              ;E
 4130                           
 4131   4588   00               titflag         .db 0
 4132   4589   00               titcolour       .db 0
 4133                           
 4134                           
 4135   458A                            include HIGH.inc
 4136                           ;----------------------------------------------
 4137                           ;HIGH
 4138                           ;----------------------------------------------
 4139                           
 4140                           ;----------------------------------------------
 4141                           ;ahigh:
 4142                           ;
 4143                           ; Check if myscore in highscoretable
 4144                           ; If so shift highscores and highnames in table
 4145                           ; Input name
 4146                           ; Add myscore and myname to highscoretable
 4147                           ;----------------------------------------------
 4148                           
 4149   458A                    ahigh
 4150   458A   2C 46 06                 BIT demo_flag           ;If demomode, skip reset highscoretable
 4151   458D   30 2C                    BMI ahdem
 4152                           
 4153   458F   A2 00                    LDX #0
 4154   4591   86 8A                    STX temp1
 4155   4593                    ah1
 4156   4593   BD 35 47                 LDA ti10,X              ; Set pointer names
 4157   4596   85 90                    STA temp2
 4158   4598   BC 2D 47                 LDY ti7,X               ; Set pointer score
 4159   459B   84 8B                    STY temp1+1
 4160                           
 4161   459D   A2 FF                    LDX #$FF
 4162   459F                    ah2
 4163   459F   C8                       INY                     ; Compare myscore with hiscore
 4164   45A0   E8                       INX
 4165   45A1   E0 07                    CPX #7
 4166   45A3   F0 17                    BEQ ah4
 4167   45A5   BD 2D 06                 LDA myscore,X
 4168   45A8   29 7F                    AND #$7F
 4169   45AA   D9 9D 06                 CMP hsnum,Y
 4170   45AD   F0 F0                    BEQ ah2                 ; If digit myscore=highscore check next
 4171   45AF   90 02                    BCC ah3                 ; If digit myscore>hiscore next rank
 4172   45B1   D0 09                    BNE ah4                 ; If digit myscore<hiscore rank found
 4173   45B3                    ah3
 4174   45B3   E6 8A                    INC temp1               ; Next rank
 4175   45B5   A6 8A                    LDX temp1
 4176   45B7   E0 08                    CPX #8                  ; All ranks tested?
 4177   45B9   90 D8                    BCC ah1
 4178   45BB                    ahdem
 4179   45BB   60                       RTS
 4180   45BC                    ah4 
 4181   45BC   A5 8B                    LDA temp1+1             ; Check if myscore=rank8
 4182   45BE   C9 30                    CMP #7*7-1
 4183   45C0   F0 1A                    BEQ ah5
 4184                           
 4185   45C2   A0 30                    LDY #7*7-1              ; Shift ranks down to insert myscore
 4186   45C4                    ah6
 4187   45C4   B9 9D 06                 LDA hsnum,Y
 4188   45C7   99 A4 06                 STA hsnum+7,Y
 4189   45CA   88                       DEY
 4190   45CB   C4 8B                    CPY temp1+1
 4191   45CD   D0 F5                    BNE ah6
 4192                           
 4193   45CF   A0 45                    LDY #10*7-1             ; Shift names down to insert myname
 4194   45D1                    ah7
 4195   45D1   B9 4D 06                 LDA hstxt,Y
 4196   45D4   99 57 06                 STA hstxt+10,Y
 4197   45D7   88                       DEY
 4198   45D8   C4 90                    CPY temp2
 4199   45DA   D0 F5                    BNE ah7
 4200   45DC                    ah5
 4201   45DC   A2 00                    LDX #0                  ; Reset myscorepointer
 4202   45DE   A4 8B                    LDY temp1+1             ; Set highscorepointer
 4203   45E0   C8                       INY
 4204   45E1                    ah8
 4205   45E1   BD 2D 06                 LDA myscore,X           ; Copy myscore into highscore table
 4206   45E4   29 7F                    AND #$7F
 4207   45E6   99 9D 06                 STA hsnum,Y
 4208   45E9   C8                       INY
 4209   45EA   E8                       INX
 4210   45EB   E0 07                    CPX #7
 4211   45ED   D0 F2                    BNE ah8
 4212                           
 4213   45EF   A2 09                    LDX #9                  ; Reset mynamepointer
 4214   45F1   A4 90                    LDY temp2               ; Set highnamepointer
 4215   45F3   C8                       INY
 4216   45F4   98                       TYA
 4217   45F5   48                       PHA                     ; Save namepointer
 4218                           
 4219   45F6   A9 26                    LDA #38                 ; Load space character
 4220   45F8                    ah9
 4221   45F8   99 4D 06                 STA hstxt,Y             ; Store new highname
 4222   45FB   9D 17 41                 STA zs,x                ; Clear inputname
 4223   45FE   C8                       INY
 4224   45FF   CA                       DEX
 4225   4600   10 F6                    BPL ah9
 4226                           
 4227   4602   A5 8A                    LDA temp1               ; Set datapointer
 4228   4604   0A                       ASL A
 4229   4605   0A                       ASL A
 4230   4606   0A                       ASL A
 4231   4607   0A                       ASL A
 4232   4608   18                       CLC
 4233   4609   69 20                    ADC #4*8
 4234   460B   48                       PHA                     ; Save scorepointer
 4235                           
 4236   460C   20 2E 46                 JSR pht                 ; Print highscore table
 4237                           
 4238   460F   A0 24                    LDY #36                 ; Print 'ENTER YOUR NAME'
 4239   4611   20 8F 3F                 JSR prnstr
 4240                           
 4241   4614   68                       PLA                     ; Get scorepointer
 4242   4615   A8                       TAY
 4243   4616   A2 10                    LDX #16                 ; Position name
 4244   4618   20 3F 37                 JSR xycalc2             ; Calc screenaddress rankentry
 4245                           
 4246   461B   8D 14 41                 STA za+1                ; Set screenaddress for inputstring
 4247   461E   8E 13 41                 STX za
 4248   4621   68                       PLA                     ; Get namepointer
 4249   4622   AA                       TAX                     ; X=namepointer
 4250   4623   20 8F 46                 JSR gnam                ; Get name
 4251                           
 4252   4626   A0 24                    LDY #36                 ; Erase 'ENTER YOUR NAME'
 4253   4628   20 8F 3F                 JSR prnstr
 4254                           
 4255   462B   4C 2E 46                 JMP pht                 ; Erase High score table
 4256                           
 4257                           ;---------------------------------
 4258                           ;pht:
 4259                           ;
 4260                           ; Print high score table on screen
 4261                           ;
 4262                           ; Input : -
 4263                           ; Output: High Score Table on screen
 4264                           ;---------------------------------
 4265                           
 4266          8401             tablestartadr   equ $8401
 4267                           
 4268   462E                    pht
 4269   462E   A9 00                    LDA #0                  ; Set rank counter
 4270   4630   85 9A                    STA wavbase
 4271                           
 4272   4632   A9 84                    LDA #>tablestartadr     ; Set string position
 4273   4634   8D 22 41                 STA zb+1
 4274   4637   A9 01                    LDA #<tablestartadr
 4275   4639   8D 21 41                 STA zb
 4276   463C                    ai1
 4277   463C   A6 9A                    LDX wavbase
 4278   463E   E8                       INX
 4279   463F   8E 25 41                 STX zt                  ; Set rank nr
 4280                           
 4281   4642   CA                       DEX                     ; Set score pointer
 4282   4643   BC 2D 47                 LDY ti7,X
 4283   4646   C8                       INY
 4284                           
 4285   4647   A2 00                    LDX #0
 4286   4649   86 9B                    STX wavbase+1           ; Set 0 score
 4287   464B                    ai2
 4288   464B   B9 9D 06                 LDA hsnum,Y             ; Read score digit
 4289   464E   D0 08                    BNE ph2
 4290   4650   C5 9B                    CMP wavbase+1           ; Check if leading zero
 4291   4652   D0 04                    BNE ph2
 4292   4654   A9 26                    LDA #38                 ; Was leading zero so print space
 4293   4656   D0 03                    BNE ph3
 4294   4658                    ph2
 4295   4658   38                       SEC                     ; Mark ending leading zero's
 4296   4659   66 9B                    ROR wavbase+1
 4297   465B                    ph3
 4298   465B   9D 27 41                 STA zt+2,X              ; Store digit or space
 4299   465E   C8                       INY                     ; Next score digit
 4300   465F   E8                       INX                     ; Stringpointer to next char
 4301   4660   E0 07                    CPX #7                  ; Last score digit?
 4302   4662   D0 E7                    BNE ai2                 ; no
 4303                           
 4304   4664   A6 9A                    LDX wavbase
 4305   4666   BC 35 47                 LDY ti10,X              ; Set name pointer
 4306   4669   C8                       INY
 4307   466A   A2 00                    LDX #0
 4308   466C                    ai3
 4309   466C   B9 4D 06                 LDA hstxt,Y             ; Read name char
 4310   466F   9D 2F 41                 STA zt+10,X             ; Store name char
 4311   4672   C8                       INY                     ; Next name char
 4312   4673   E8                       INX                     ; Stringpointer to next char
 4313   4674   E0 0A                    CPX #10                 ; Last name char?
 4314   4676   D0 F4                    BNE ai3                 ; No
 4315                           
 4316   4678   A0 22                    LDY #34                 ; Print rank,score and name
 4317   467A   20 8F 3F                 JSR prnstr
 4318                           
 4319   467D   AD 22 41                 LDA zb+1                ; Point down 2 lines
 4320   4680   18                       CLC
 4321   4681   69 02                    ADC #2
 4322   4683   8D 22 41                 STA zb+1
 4323                           
 4324   4686   E6 9A                    INC wavbase             ; Next rank nr
 4325   4688   A5 9A                    LDA wavbase
 4326   468A   C9 08                    CMP #8
 4327   468C   90 AE                    BCC ai1
 4328   468E   60                       RTS
 4329                           
 4330                           ;---------------------------------
 4331                           ;gnam:
 4332                           ;
 4333                           ; Input name (10 chars) for highscore table
 4334                           ;
 4335                           ; Input : X=namepointer
 4336                           ; Output: -
 4337                           ;---------------------------------
 4338                           
 4339   468F                    gnam
 4340   468F   A0 00                    LDY #0                  ; Set stringpointer to 10
 4341   4691   4C 9C 46                 jmp gn1                 ; Forced entry
 4342   4694                    gn3
 4343   4694   20 1F 47                 jsr pit
 4344   4697   A9 07                    LDA #7                  ; Beep
 4345   4699   20 52 FE                 JSR oswrch
 4346   469C                    gn1
 4347   469C   86 9A                    STX wavbase
 4348   469E   84 9B                    STY wavbase+1
 4349   46A0                    gn6
 4350   46A0   A2 0F                    ldx #15                 ; Wait a while
 4351   46A2   20 A3 36                 jsr delay2
 4352   46A5   20 10 3D                 JSR movestars           ; Move stars
 4353                           
 4354   46A8   20 71 FE                 JSR read_key            ; Read key
 4355   46AB   C0 FF                    cpy #$ff
 4356   46AD   F0 F1                    beq gn6
 4357                           
 4358   46AF   98                       TYA
 4359   46B0   48                       pha                     ; Save key
 4360                           
 4361   46B1                    wait_release
 4362   46B1   A2 0F                    ldx #15                 ; Wait a while
 4363   46B3   20 A3 36                 jsr delay2
 4364   46B6   20 10 3D                 JSR movestars           ; Move stars
 4365   46B9   20 71 FE                 jsr read_key            ; Wait until key is released
 4366   46BC   C0 FF                    cpy #$ff
 4367   46BE   D0 F1                    bne wait_release
 4368                           
 4369   46C0   A0 20                    LDY #32                 ; Erase namestring 
 4370   46C2   20 8F 3F                 JSR prnstr
 4371                           
 4372   46C5   68                       pla                     ; Get key
 4373                           
 4374   46C6   A6 9A                    LDX wavbase
 4375   46C8   A4 9B                    LDY wavbase+1
 4376                           
 4377   46CA   C9 0D                    CMP #$D                 ; Return?
 4378   46CC   F0 37                    BEQ gn2
 4379                           
 4380   46CE   C9 0F                    CMP #$0F                ; Delete?
 4381   46D0   F0 39                    BEQ hdel
 4382                           
 4383   46D2   C0 0A                    CPY #10                 ; Check for end of inputstring
 4384   46D4   D0 03                    BNE gn10
 4385   46D6   4C 94 46                 JMP gn3
 4386   46D9                    gn10
 4387   46D9   C9 00                    CMP #0                  ; Space?
 4388   46DB   D0 04                    BNE gn7
 4389   46DD   A9 26                    LDA #38                 ; Get space character
 4390   46DF   D0 16                    BNE gn8                 ; Forced jump
 4391   46E1                    gn7
 4392   46E1   C9 21                    CMP #$21                ; Check if >= 'A'
 4393   46E3   90 08                    BCC gn9
 4394   46E5   C9 3B                    CMP #$3a+1              ; Check if <= 'Z'
 4395   46E7   B0 AB                    BCS gn3
 4396                           
 4397   46E9   E9 16                    SBC #22                 ; Convert to SPFONT char
 4398   46EB   D0 0A                    BNE gn8
 4399   46ED                    gn9
 4400   46ED   C9 10                    CMP #$10                ; Check if >= '0'
 4401   46EF   90 A3                    BCC gn3
 4402   46F1   C9 1A                    CMP #$19+1              ; Check if <= '9'
 4403   46F3   B0 9F                    BCS gn3
 4404                           
 4405   46F5   E9 0F                    SBC #15                 ; Convert to SPFONT digit
 4406   46F7                    gn8
 4407   46F7   99 17 41                 STA zs,y                ; Store char in string
 4408   46FA   9D 4D 06                 STA hstxt,X             ; Store char in highscore name table
 4409   46FD   20 1F 47                 JSR pit                 ; Print character
 4410                           
 4411                           ;       inc za                  ; Point to next char
 4412                           
 4413   4700   E8                       INX                     ; Inc table pointer
 4414   4701   C8                       INY                     ; Dec stringpointer
 4415   4702   4C 9C 46                 jmp gn1
 4416   4705                    gn2
 4417   4705   A0 20                    LDY #32                 ; Erase namestring 
 4418   4707   20 8F 3F                 JSR prnstr
 4419   470A   60                       RTS
 4420                           
 4421                           ;---------------------------------
 4422                           ; Delete character
 4423                           ;---------------------------------
 4424                           
 4425   470B                    hdel
 4426   470B   C0 00                    CPY #0                  ; Check if end of string
 4427   470D   F0 02                    BEQ hd1
 4428   470F   88                       dey
 4429   4710   CA                       dex                     ; If so, error bleep
 4430   4711                    hd1
 4431   4711   A9 26                    LDA #38
 4432   4713   99 17 41                 STA zs,y                ; Previous char
 4433   4716   9D 4D 06                 STA hstxt,X             ; Get char from highscore table
 4434   4719   20 1F 47                 jsr pit
 4435   471C   4C 9C 46                 JMP gn1                 ; Exit
 4436                           
 4437                           ;---------------------------------
 4438                           ; Print namestring on screen
 4439                           ;---------------------------------
 4440                           
 4441   471F                    pit
 4442   471F   8A                       TXA
 4443   4720   48                       PHA                     ; Save X
 4444   4721   98                       TYA
 4445   4722   48                       PHA                     ; Save Y
 4446                           
 4447   4723   A0 20                    LDY #32                 ; Print namestring 
 4448   4725   20 8F 3F                 JSR prnstr
 4449                           
 4450   4728   68                       PLA
 4451   4729   A8                       TAY                     ; Restore Y
 4452   472A   68                       PLA
 4453   472B   AA                       TAX                     ; Restore X
 4454   472C   60                       RTS
 4455                           
 4456                           ;---------------------------------
 4457                           ; Pointers to highscore tables
 4458                           ;---------------------------------
 4459                           
 4460                           ti7                             ; Pointer to high scores
 4461   472D   FF 06 0D 14              .db 0-1,7-1,14-1,21-1
 4462   4731   1B 22 29 30              .db 28-1,35-1,42-1,49-1
 4463                           
 4464                           ti10                            ; Pointer to high score names
 4465   4735   FF 09 13 1D              .db 0-1,10-1,20-1,30-1
 4466   4739   27 31 3B 45              .db 40-1,50-1,60-1,70-1
 4467   473D                     
 4468                           
 4469   473D                            include WAVE.inc
 4470                           ;----------------------------------------------
 4471                           ;WAVE
 4472                           ;----------------------------------------------
 4473          0003             corr    equ 3
 4474                           
 4475                           wave0                           ; ok
 4476   473D   07                       .db 10-corr             ; Speed
 4477   473E   00 02 2B 01 0B           .db 0,2,43,1,11,10      ; Wave patterns
        4743   0A 
 4478   4744   FF                       .db $FF                 ; end of wave marker
 4479                           wave1                           ; ok
 4480   4745   05                       .db 8-corr
 4481   4746   06 07 06 07 04           .db 6,7,6,7,4
 4482   474B   FF                       .db $FF
 4483                           wave2                           ; ok
 4484   474C   07                       .db 10-corr
 4485   474D   05 08 09 0D 0E           .db 5,8,9,13,14
 4486   4752   FF                       .db $FF
 4487                           wave3                           ; ok
 4488   4753   05                       .db 8-corr
 4489   4754   0A 0B 17 18 02           .db 10,11,23,24,2,3
        4759   03 
 4490   475A   2D                       .db 45
 4491   475B   FF                       .db $FF
 4492                           wave4                           ; ok
 4493   475C   07                       .db 10-corr
 4494   475D   10 11 12 0F 05           .db 16,17,18,15,5,27
        4762   1B 
 4495   4763   FF                       .db $FF
 4496                           wave5                           ; ok
 4497   4764   07                       .db 10-corr
 4498   4765   06 07 06 07 0C           .db 6,7,6,7,12,19,20
        476A   13 14 
 4499   476C   FF                       .db $FF
 4500                           wave6                           ; ok
 4501   476D   05                       .db 8-corr
 4502   476E   0A 0B 0A 0B 02           .db 10,11,10,11,2,3
        4773   03 
 4503   4774   FF                       .db $FF
 4504                           wave7                           ; ok
 4505   4775   05                       .db 8-corr
 4506   4776   0D 0E 15 16 17           .db 13,14,21,22,23,24
        477B   18 
 4507   477C   2D                       .db 45
 4508   477D   FF                       .db $FF
 4509                           wave8                           ; ok
 4510   477E   07                       .db 10-corr
 4511   477F   04 04 00 01 05           .db 4,4,0,1,5,17,18
        4784   11 12 
 4512   4786   FF                       .db $FF
 4513                           wave9                           ; ok
 4514   4787   04                       .db 7-corr
 4515   4788   08 09 0C 2C 02           .db 8,9,12,44,2
 4516   478D   FF                       .db $FF
 4517                           wave10                          ; ok
 4518   478E   05                       .db 8-corr
 4519   478F   19 1A 0F 10 1D           .db 25,26,15,16,29
 4520   4794   FF                       .db $FF
 4521                           wave11                          ; ok
 4522   4795   07                       .db 10-corr
 4523   4796   1B 1C 0C 25 26           .db 27,28,12,37,38,28
        479B   1C 
 4524   479C   2D                       .db 45
 4525   479D   FF                       .db $FF
 4526                           wave12                          ; ok
 4527   479E   07                       .db 10-corr
 4528   479F   1D 1E 08 09 1F           .db 29,30,8,9,31,32
        47A4   20 
 4529   47A5   FF                       .db $FF
 4530                           wave13                          ; ok
 4531   47A6   05                       .db 8-corr
 4532   47A7   21 22 0F 10 19           .db 33,34,15,16,25,26
        47AC   1A 
 4533   47AD   FF                       .db $FF
 4534                           wave14                          ; ok
 4535   47AE   05                       .db 8-corr
 4536   47AF   17 18 23 24 15           .db 23,24,35,36,21,22
        47B4   16 
 4537   47B5   FF                       .db $FF
 4538                           wave15                          ; ok
 4539   47B6   05                       .db 8-corr
 4540   47B7   27 28 03 0A 0B           .db 39,40,3,10,11,41,42
        47BC   29 2A 
 4541   47BE   2D                       .db 45
 4542   47BF   FF                       .db $FF
 4543                           
 4544   47C0                            include PATT.inc
 4545                           ;----------------------------------------------
 4546                           ;PATT
 4547                           ;
 4548                           ; Initial pattern data
 4549                           ;
 4550                           ; byte 0, Nr of simultanious patterns
 4551                           ; byte 1, Initial X-pos
 4552                           ; byte 2, Initial Y-pos
 4553                           ; byte 3, Delay before next alien appears
 4554                           ; byte 4, Nr of aliens to show
 4555                           ; byte 5, Initial reletive X-move
 4556                           ; byte 6, Initial relative Y-move
 4557                           ; byte 7, Sprite nr:
 4558                           ;           sprite nr is alien sprite nr x2 so:
 4559                           ;           sprite nr 12 -> Alien 6
 4560                           ;                     14 ->       7
 4561                           ;                     ..         ..
 4562                           ;                     34 ->      17
 4563                           ; byte 8, Pattern data:
 4564                           ;           bit 7 = 0 -> normal pattern
 4565                           ;                   1 -> mirror pattern
 4566   47C0                     
 4567                           ;
 4568                           ; pattern;----------------------------------------------
 4569                           
 4570                           patt0                           ; ok
 4571   47C0   01                       .db 1
 4572   47C1   00 18                    .db 0,24
 4573   47C3   03                       .db 3
 4574   47C4   14                       .db 20
 4575   47C5   00 04                    .db 0,4
 4576   47C7   0C                       .db 12
 4577   47C8   00                       .db 0
 4578                           
 4579                           patt1                           ; ok
 4580   47C9   01                       .db 1
 4581   47CA   1C 18                    .db 28,24
 4582   47CC   03                       .db 3
 4583   47CD   14                       .db 20
 4584   47CE   00 04                    .db 0,4
 4585   47D0   0C                       .db 12
 4586   47D1   80                       .db 0+$80
 4587                           
 4588                           patt2                           ; ok
 4589   47D2   01                       .db 1
 4590   47D3   00 08                    .db 0,8
 4591   47D5   02                       .db 2
 4592   47D6   1E                       .db 30
 4593   47D7   00 00                    .db 0,0
 4594   47D9   12                       .db 18
 4595   47DA   01                       .db 1
 4596                           
 4597                           patt3                           ; ok
 4598   47DB   01                       .db 1
 4599   47DC   1C 08                    .db 28,8
 4600   47DE   02                       .db 2
 4601   47DF   1E                       .db 30
 4602   47E0   00 00                    .db 0,0
 4603   47E2   12                       .db 18
 4604   47E3   81                       .db 1+$80
 4605                           
 4606   47E4                    patt4
 4607   47E4   02                       .db 2                   ; ok
 4608   47E5   00 A0                    .db 0,160
 4609   47E7   14                       .db 20
 4610   47E8   02                       .db 2
 4611   47E9   08 E8                    .db 8,-24
 4612   47EB   14                       .db 20
 4613   47EC   02                       .db 2
 4614                           ; 2nd half
 4615   47ED   1C A0                    .db 28,160
 4616   47EF   14                       .db 20
 4617   47F0   02                       .db 2
 4618   47F1   F8 E8                    .db -8,-24
 4619   47F3   14                       .db 20
 4620   47F4   82                       .db 2+$80
 4621                           
 4622                           patt5                           ; ok
 4623   47F5   01                       .db 1
 4624   47F6   00 08                    .db 0,8 
 4625   47F8   32                       .db 50
 4626   47F9   04                       .db 4
 4627   47FA   00 10                    .db 0,16
 4628   47FC   18                       .db 24
 4629   47FD   04                       .db 4
 4630                           
 4631                           patt6                           ; ok
 4632   47FE   02                       .db 2
 4633   47FF   00 96                    .db 0,150
 4634   4801   08                       .db 8
 4635   4802   0A                       .db 10
 4636   4803   00 00                    .db 0,0
 4637   4805   18                       .db 24
 4638   4806   05                       .db 5
 4639                           ; 2nd part
 4640   4807   04 96                    .db 4,150
 4641   4809   08                       .db 8
 4642   480A   0A                       .db 10
 4643   480B   00 00                    .db 0,0
 4644   480D   14                       .db 20
 4645   480E   05                       .db 5
 4646                           
 4647                           patt7                           ; ok
 4648   480F   02                       .db 2
 4649   4810   1C 96                    .db 28,150
 4650   4812   08                       .db 8
 4651   4813   0A                       .db 10
 4652   4814   00 00                    .db 0,0
 4653   4816   18                       .db 24
 4654   4817   85                       .db 5+$80
 4655                           ; 2nd part
 4656   4818   18 96                    .db 24,150
 4657   481A   08                       .db 8
 4658   481B   0A                       .db 10
 4659   481C   00 00                    .db 0,0
 4660   481E   14                       .db 20
 4661   481F   85                       .db 5+$80
 4662                           
 4663                           patt8                           ; ok
 4664   4820   01                       .db 1
 4665   4821   04 08                    .db 4,8
 4666   4823   06                       .db 6
 4667   4824   0F                       .db 15
 4668   4825   00 00                    .db 0,0
 4669   4827   14                       .db 20
 4670   4828   06                       .db 6
 4671   4829                            
 4672                           patt9                           ; ok
 4673   4829   01                       .db 1
 4674   482A   18 08                    .db 24,8
 4675   482C   06                       .db 6
 4676   482D   0F                       .db 15
 4677   482E   00 00                    .db 0,0
 4678   4830   14                       .db 20
 4679   4831   86                       .db 6+$80
 4680   4832                            
 4681                           patt10                          ; ok
 4682   4832   01                       .db 1
 4683   4833   00 20                    .db 0,32
 4684   4835   05                       .db 5
 4685   4836   08                       .db 8
 4686   4837   00 00                    .db 0,0
 4687   4839   10                       .db 16
 4688   483A   07                       .db 7
 4689   483B                            
 4690                           patt11                          ; ok
 4691   483B   01                       .db 1
 4692   483C   1C 30                    .db 28,48
 4693   483E   05                       .db 5
 4694   483F   08                       .db 8
 4695   4840   00 00                    .db 0,0
 4696   4842   10                       .db 16
 4697   4843   87                       .db 7+$80
 4698   4844                            
 4699                           patt12                          ; ok
 4700   4844   02                       .db 2
 4701   4845   0F 08                    .db 15,8
 4702   4847   06                       .db 6
 4703   4848   0C                       .db 12
 4704   4849   00 00                    .db 0,0
 4705   484B   1E                       .db 30
 4706   484C   08                       .db 8
 4707                           ; 2nd part
 4708   484D   0B 08                    .db 11,8
 4709   484F   06                       .db 6
 4710   4850   0C                       .db 12
 4711   4851   00 00                    .db 0,0
 4712   4853   1E                       .db 30
 4713   4854   88                       .db 8+$80
 4714   4855                            
 4715                           patt13                          ; ok
 4716   4855   01                       .db 1
 4717   4856   00 72                    .db 0,114
 4718   4858   06                       .db 6
 4719   4859   10                       .db 16
 4720   485A   00 00                    .db 0,0
 4721   485C   0C                       .db 12
 4722   485D   09                       .db 9
 4723   485E                            
 4724                           patt14                          ; ok
 4725   485E   01                       .db 1
 4726   485F   1C 72                    .db 28,114
 4727   4861   06                       .db 6
 4728   4862   10                       .db 16
 4729   4863   00 00                    .db 0,0
 4730   4865   0C                       .db 12
 4731   4866   89                       .db 9+$80
 4732   4867                            
 4733                           patt15                          ; ok
 4734   4867   01                       .db 1
 4735   4868   00 A0                    .db 0,160
 4736   486A   05                       .db 5
 4737   486B   0C                       .db 12
 4738   486C   00 00                    .db 0,0
 4739   486E   12                       .db 18
 4740   486F   0A                       .db 10
 4741   4870                            
 4742                           patt16                          ; ok
 4743   4870   01                       .db 1
 4744   4871   1C A0                    .db 28,160
 4745   4873   05                       .db 5
 4746   4874   0C                       .db 12
 4747   4875   00 00                    .db 0,0
 4748   4877   12                       .db 18
 4749   4878   8A                       .db 10+$80
 4750   4879                            
 4751                           patt17                          ; ok
 4752   4879   01                       .db 1
 4753   487A   00 20                    .db 0,32
 4754   487C   07                       .db 7
 4755   487D   0C                       .db 12
 4756   487E   00 00                    .db 0,0
 4757   4880   0E                       .db 14
 4758   4881   0B                       .db 11
 4759   4882                            
 4760                           patt18                          ; ok
 4761   4882   01                       .db 1
 4762   4883   1C 20                    .db 28,32
 4763   4885   07                       .db 7
 4764   4886   0C                       .db 12
 4765   4887   00 00                    .db 0,0
 4766   4889   0E                       .db 14
 4767   488A   8B                       .db 11+$80
 4768   488B                            
 4769                           patt19                          ; ok
 4770   488B   01                       .db 1
 4771   488C   14 08                    .db 20,8
 4772   488E   05                       .db 5
 4773   488F   0A                       .db 10
 4774   4890   00 00                    .db 0,0
 4775   4892   10                       .db 16
 4776   4893   0D                       .db 13
 4777   4894                            
 4778                           patt20                          ; ok
 4779   4894   01                       .db 1
 4780   4895   08 08                    .db 8,8
 4781   4897   05                       .db 5
 4782   4898   0A                       .db 10
 4783   4899   00 00                    .db 0,0
 4784   489B   10                       .db 16
 4785   489C   8D                       .db 13+$80
 4786   489D                            
 4787                           patt21                          ; ok
 4788   489D   01                       .db 1
 4789   489E   00 20                    .db 0,32
 4790   48A0   05                       .db 5
 4791   48A1   08                       .db 8
 4792   48A2   00 00                    .db 0,0
 4793   48A4   14                       .db 20
 4794   48A5   0E                       .db 14
 4795   48A6                            
 4796                           patt22                          ; ok
 4797   48A6   01                       .db 1
 4798   48A7   1C 20                    .db 28,32
 4799   48A9   05                       .db 5
 4800   48AA   08                       .db 8
 4801   48AB   00 00                    .db 0,0
 4802   48AD   14                       .db 20
 4803   48AE   8E                       .db 14+$80
 4804   48AF                            
 4805                           patt23                          ; ok
 4806   48AF   01                       .db 1
 4807   48B0   02 A0                    .db 2,160
 4808   48B2   03                       .db 3
 4809   48B3   14                       .db 20
 4810   48B4   00 00                    .db 0,0
 4811   48B6   14                       .db 20
 4812   48B7   0F                       .db 15
 4813   48B8                            
 4814                           patt24                          ; ok
 4815   48B8   01                       .db 1
 4816   48B9   1A A0                    .db 26,160
 4817   48BB   03                       .db 3
 4818   48BC   14                       .db 20
 4819   48BD   00 00                    .db 0,0
 4820   48BF   14                       .db 20
 4821   48C0   8F                       .db 15+$80
 4822   48C1                            
 4823                           patt25                          ; ok
 4824   48C1   01                       .db 1
 4825   48C2   00 50                    .db 0,80
 4826   48C4   03                       .db 3
 4827   48C5   10                       .db 16
 4828   48C6   00 00                    .db 0,0
 4829   48C8   10                       .db 16
 4830   48C9   10                       .db 16
 4831   48CA                            
 4832                           patt26                          ; ok
 4833   48CA   01                       .db 1
 4834   48CB   1C 50                    .db 28,80
 4835   48CD   03                       .db 3
 4836   48CE   10                       .db 16
 4837   48CF   00 00                    .db 0,0
 4838   48D1   10                       .db 16
 4839   48D2   90                       .db 16+$80
 4840   48D3                            
 4841                           patt27                          ; ok
 4842   48D3   01                       .db 1
 4843   48D4   00 48                    .db 0,72
 4844   48D6   04                       .db 4
 4845   48D7   0E                       .db 14
 4846   48D8   00 00                    .db 0,0
 4847   48DA   12                       .db 18
 4848   48DB   11                       .db 17
 4849   48DC                            
 4850                           patt28                          ; ok
 4851   48DC   01                       .db 1
 4852   48DD   1C 48                    .db 28,72
 4853   48DF   04                       .db 4
 4854   48E0   0E                       .db 14
 4855   48E1   00 00                    .db 0,0
 4856   48E3   12                       .db 18
 4857   48E4   91                       .db 17+$80
 4858   48E5                            
 4859                           patt29                          ; ok
 4860   48E5   01                       .db 1
 4861   48E6   00 08                    .db 0,8
 4862   48E8   02                       .db 2
 4863   48E9   15                       .db 21
 4864   48EA   03 00                    .db 3,0
 4865   48EC   14                       .db 20
 4866   48ED   12                       .db 18
 4867   48EE                            
 4868                           patt30                          ; ok
 4869   48EE   01                       .db 1
 4870   48EF   1C 08                    .db 28,8
 4871   48F1   02                       .db 2
 4872   48F2   15                       .db 21
 4873   48F3   FD 00                    .db -3,0
 4874   48F5   14                       .db 20
 4875   48F6   92                       .db 18+$80
 4876   48F7                            
 4877                           patt31                          ; ok
 4878   48F7   01                       .db 1
 4879   48F8   1C 08                    .db 28,8
 4880   48FA   04                       .db 4
 4881   48FB   0C                       .db 12
 4882   48FC   00 00                    .db 0,0
 4883   48FE   20                       .db 32
 4884   48FF   13                       .db 19
 4885   4900                            
 4886                           patt32                          ; ok
 4887   4900   01                       .db 1
 4888   4901   00 08                    .db 0,8
 4889   4903   04                       .db 4
 4890   4904   0C                       .db 12
 4891   4905   00 00                    .db 0,0
 4892   4907   20                       .db 32
 4893   4908   93                       .db 19+$80
 4894   4909                            
 4895                           patt33                          ; ok
 4896   4909   01                       .db 1
 4897   490A   1E 08                    .db 30,8
 4898   490C   07                       .db 7
 4899   490D   14                       .db 20
 4900   490E   00 00                    .db 0,0
 4901   4910   12                       .db 18
 4902   4911   14                       .db 20
 4903   4912                            
 4904                           patt34                          ; ok
 4905   4912   01                       .db 1
 4906   4913   1F 08                    .db 31,8
 4907   4915   07                       .db 7
 4908   4916   14                       .db 20
 4909   4917   00 00                    .db 0,0
 4910   4919   12                       .db 18
 4911   491A   94                       .db 20+$80
 4912   491B                            
 4913                           patt35                          ; ok
 4914   491B   01                       .db 1
 4915   491C   1C 08                    .db 28,8
 4916   491E   04                       .db 4
 4917   491F   0E                       .db 14
 4918   4920   00 00                    .db 0,0
 4919   4922   22                       .db 34
 4920   4923   15                       .db 21
 4921   4924                            
 4922                           patt36                          ; ok
 4923   4924   01                       .db 1
 4924   4925   00 08                    .db 0,8
 4925   4927   04                       .db 4
 4926   4928   0E                       .db 14
 4927   4929   00 00                    .db 0,0
 4928   492B   22                       .db 34
 4929   492C   95                       .db 21+$80
 4930   492D                            
 4931                           patt37                          ; ok
 4932   492D   01                       .db 1
 4933   492E   00 08                    .db 0,8
 4934   4930   04                       .db 4
 4935   4931   12                       .db 18
 4936   4932   00 00                    .db 0,0
 4937   4934   10                       .db 16
 4938   4935   16                       .db 22
 4939   4936                            
 4940                           patt38                          ; ok
 4941   4936   01                       .db 1
 4942   4937   1B 08                    .db 27,8
 4943   4939   04                       .db 4
 4944   493A   12                       .db 18
 4945   493B   00 00                    .db 0,0
 4946   493D   10                       .db 16
 4947   493E   96                       .db 22+$80
 4948   493F                            
 4949                           patt39                          ; ok
 4950   493F   01                       .db 1
 4951   4940   1E 08                    .db 30,8
 4952   4942   05                       .db 5
 4953   4943   0C                       .db 12
 4954   4944   00 00                    .db 0,0
 4955   4946   14                       .db 20
 4956   4947   17                       .db 23
 4957   4948                            
 4958                           patt40                          ; ok
 4959   4948   01                       .db 1
 4960   4949   1E 08                    .db 30,8
 4961   494B   05                       .db 5
 4962   494C   0C                       .db 12
 4963   494D   00 00                    .db 0,0
 4964   494F   14                       .db 20
 4965   4950   97                       .db 23+$80
 4966   4951                            
 4967                           patt41                          ; ok
 4968   4951   01                       .db 1
 4969   4952   00 08                    .db 0,8
 4970   4954   04                       .db 4
 4971   4955   13                       .db 19
 4972   4956   02 00                    .db 2,0
 4973   4958   0C                       .db 12
 4974   4959   18                       .db 24
 4975   495A                            
 4976                           patt42                          ; ok
 4977   495A   01                       .db 1
 4978   495B   1C 08                    .db 28,8
 4979   495D   04                       .db 4
 4980   495E   13                       .db 19
 4981   495F   FE 00                    .db -2,0
 4982   4961   0C                       .db 12
 4983   4962   98                       .db 24+$80
 4984   4963                            
 4985                           patt43                          ; ok
 4986   4963   02                       .db 2
 4987   4964   00 08                    .db 0,8         ;0,8
 4988   4966   10                       .db 16
 4989   4967   14                       .db 20
 4990   4968   00 00                    .db 0,0
 4991   496A   10                       .db 16
 4992   496B   19                       .db 25
 4993                           ; 2nd part
 4994   496C   1C 08                    .db 28,8        ;28,8
 4995   496E   0E                       .db 14
 4996   496F   14                       .db 20
 4997   4970   00 00                    .db 0,0
 4998   4972   10                       .db 16
 4999   4973   99                       .db 25+$80
 5000   4974                            
 5001                           patt44                          ; ok
 5002   4974   02                       .db 2
 5003   4975   00 10                    .db 0,16
 5004   4977   08                       .db 8
 5005   4978   14                       .db 20
 5006   4979   00 00                    .db 0,0
 5007   497B   12                       .db 18
 5008   497C   1A                       .db 26
 5009                           ; part2
 5010   497D   1C 10                    .db 28,16
 5011   497F   08                       .db 8
 5012   4980   14                       .db 20
 5013   4981   00 00                    .db 0,0
 5014   4983   12                       .db 18
 5015   4984   9A                       .db 26+$80
 5016   4985                            
 5017                           patt45                          ; ok
 5018   4985   03                       .db 3
 5019   4986   00 08                    .db 0,8
 5020   4988   01                       .db 1
 5021   4989   01                       .db 1
 5022   498A   00 00                    .db 0,0
 5023   498C   16                       .db 22
 5024   498D   1D                       .db 29
 5025                           ; part 2
 5026   498E   02 28                    .db 2,40
 5027   4990   02                       .db 2
 5028   4991   0B                       .db 11
 5029   4992   00 00                    .db 0,0
 5030   4994   1A                       .db 26
 5031   4995   1B                       .db 27
 5032                           ; part 3
 5033   4996   02 40                    .db 2,64
 5034   4998   02                       .db 2
 5035   4999   0A                       .db 10
 5036   499A   00 00                    .db 0,0
 5037   499C   1C                       .db 28
 5038   499D   1C                       .db 28
 5039                           
 5040   499E                            include PATDAT.inc
 5041                           ;----------------------------------------------
 5042                           ;PATDAT
 5043                           ;
 5044                           ; Movement path of aliens.
 5045                           ;
 5046                           ; Action 00 = Loop, next byte = set offset pointer to step nr
 5047                           ;        02 = New pattern, next byte = pattern nr
 5048                           ;        04 = New alien, next byte = patt nr
 5049                           ;        06 = Die
 5050                           ;        08 = Dropbomb
 5051                           ;        10 = For-loop, next byte = repeat nr
 5052                           ;        12 = Next
 5053                           ;        14 = Move
 5054                           ;
 5055                           ;       $8x = 1st byte AND #$7F -> multiplier (x)
 5056                           ;             2nd byte bit 0-2  -> direction  (D)
 5057                           ;                      bit 3-7  -> step size  (S)
 5058                           ;----------------------------------------------
 5059                           
 5060                           patdat0                 ; ok
 5061   499E   82 0C                    .db $82,12              ; x000-0010,00001-100 02x S1 D4 
 5062   49A0   84 0D                    .db $84,13              ; x000-0100,00001-101 04x S1 D5
 5063   49A2   84 0C                    .db $84,12              ; x000-0100,00001-100 04x S1 D4  /\  /\
 5064   49A4   84 0D                    .db $84,13              ; x000-0100,00001-101 04x S1 D5 /  \/  \x
 5065   49A6   06                       .db 6                   ; dat-die
 5066   49A7                            
 5067                           patdat1                 ; ok
 5068   49A7   8E 0D                    .db $8e,13              ; x000-1110,00001-101 14x S1 D5    x   \
 5069   49A9   8E 0B                    .db $8e,11              ; x000-1110,00001-011 14x S1 D3   /     \
 5070   49AB   8E 0C                    .db $8e,12              ; x000-1110,00001-100 14x S1 D4  /       \
 5071   49AD   06                       .db 6                   ; dat-die                       -----------
 5072   49AE                            
 5073                           patdat2                 ; ok
 5074   49AE   84 0C                    .db $84,12              ; x000-0100,00001-100 04x S1 D4    <-->
 5075   49B0   86 0F                    .db $86,15              ; x000-0110,00001-111 06x S1 D7   /
 5076   49B2   86 0C                    .db $86,12              ; x000-0110,00001-100 06x S1 D4  /
 5077   49B4   0A 64                    .db 10,100              ; dat_for_loop 100x              \
 5078   49B6   82 01                    .db $82,1               ; x000-0010,00000-001 02x S0 D1   \
 5079   49B8   04 03                    .db 4,3                 ; dat_new_alien pattern 3         /
 5080   49BA   82 03                    .db $82,3               ; x000-0010,00000-011 02x S0 D3  /
 5081   49BC   0C                       .db 12                  ; dat_next
 5082   49BD   06                       .db 6                   ; dat-die
 5083   49BE                            
 5084                           patdat3                 ; MOT USED!!!!!!!!!!!!!!!!
 5085   49BE   88 09                    .db $88,9               ; x000-1000,00001-001 08x S1 D1  ------
 5086   49C0   83 0A                    .db $83,10              ; x000-0011,00001-010 03x S1 D2       |
 5087   49C2   88 0B                    .db $88,11              ; x000-1000,00001-011 08x S1 D3     ---
 5088   49C4   83 0A                    .db $83,10              ; x000-0011,00001-010 03x S1 D2     |
 5089   49C6   00 00                    .db 0,0                 ; dat_loop reset offsetpointer to 0 x
 5090   49C8                            
 5091                           patdat4                 ; ok
 5092   49C8   0A 02                    .db 10,2                ; dat_for_loop 2x
 5093   49CA   84 09                    .db $84,9               ; x000-0100,00001-001 04x S1 D1  ----<-->
 5094   49CC   04 0C                    .db 4,12                ; dat_new_alien pattern 12
 5095   49CE   0C                       .db 12                  ; dat_next
 5096   49CF   82 09                    .db $82,9               ; x000-0100,00001-001 04x S1 D1
 5097   49D1   82 0B                    .db $82,11              ; x000-0100,00001-011 04x S1 D3
 5098   49D3   0A 02                    .db 10,2                ; dat_for_loop 2x
 5099   49D5   04 0C                    .db 4,12                ; dat_new_alien pattern 12
 5100   49D7   84 0B                    .db $84,11              ; x000-0100,00001-011 04x S1 D3
 5101   49D9   0C                       .db 12                  ; dat_next
 5102   49DA   00 00                    .db 0,0                 ; dat_loop reset offsetpointer to 0
 5103   49DC                            
 5104                           patdat5                 ; ok
 5105   49DC   86 0C                    .db $86,12              ; x000-0110,00001-100 06x S1 D4      x
 5106   49DE   86 08                    .db $86,8               ; x000-0110,00001-000 06x S1 D0   --/
 5107   49E0   85 03                    .db $85,3               ; x000-0101,00000-011 05x S0 D3  / /|
 5108   49E2   82 06                    .db $82,6               ; x000-0010,00000-110 02x S0 D6  \/ |
 5109   49E4   82 0D                    .db $82,13              ; x000-0010,00001-101 02x S1 D5    /
 5110   49E6   87 14                    .db $87,20              ; x000-0111,00010-100 07x S2 D4   /
 5111   49E8   06                       .db 6                   ; dat-die
 5112                           
 5113                           patdat6                 ; ok
 5114   49E9   84 12                    .db $84,18              ; x000-0100,00010-010 04x S2 D2  |
 5115   49EB   84 09                    .db $84,9               ; x000-0100,00001-001 04x S1 D1  --
 5116   49ED   84 12                    .db $84,18              ; x000-0100,00010-010 04x S2 D2   |
 5117   49EF   84 09                    .db $84,9               ; x000-0100,00001-001 04x S1 D1   --
 5118   49F1   84 12                    .db $84,18              ; x000-0100,00010-010 04x S2 D2    |
 5119   49F3   84 09                    .db $84,9               ; x000-0100,00001-001 04x S1 D1    --x
 5120   49F5   06                       .db 6                   ; dat-die
 5121                           
 5122                           patdat7                 ; ok
 5123   49F6   88 0D                    .db $88,13              ; x000-1000,00001-101 04x S1 D5   x
 5124   49F8   84 01                    .db $84,1               ; x000-0100,00000-001 04x S0 D1    \
 5125   49FA   82 04                    .db $82,4               ; x000-0010,00000-100 04x S0 D4     \
 5126   49FC   83 00                    .db $83,0               ; x000-0011,00000-000 04x S0 D0      \
 5127   49FE   82 07                    .db $82,7               ; x000-0010,00000-111 04x S0 D7       |
 5128   4A00   83 0F                    .db $83,15              ; x000-0011,00001-111 04x S1 D7 \    /
 5129   4A02   87 17                    .db $87,23              ; x000-0111,00010-111 04x S2 D7  ----
 5130   4A04   06                       .db 6                   ; dat-die
 5131                           
 5132                           patdat8                 ; ok
 5133   4A05   88 0A                    .db $88,10              ; x000-1000,00001-010 08x S1 D2 |    x
 5134   4A07   82 0D                    .db $82,13              ; x000-0100,00010-101 04x S2 D5 |     \
 5135   4A09   83 0A                    .db $83,10              ; x000-0110,00001-010 06x S1 D2  \     |
 5136   4A0B   82 05                    .db $82,5               ; x000-0100,00000-101 04x S0 D5   |   / 
 5137   4A0D   81 01                    .db $81,1               ; x000-0010,00000-001 02x S0 D1    \ /
 5138   4A0F   82 04                    .db $82,4               ; x000-0100,00000-100 04x S0 D4     -
 5139   4A11   82 0C                    .db $82,12              ; x000-1000,00001-100 08x S1 D4
 5140   4A13   86 08                    .db $86,8               ; x000-0100,00001-000 04x S1 D0
 5141   4A15   85 0F                    .db $85,15              ; x000-1011,00001-111 11x S1 D7
 5142   4A17   06                       .db 6                   ; dat-die
 5143                           
 5144                           patdat9                 ; ok
 5145   4A18   85 09                    .db $85,9               ; x000-0101,00001-001 05x S1 D1
 5146   4A1A   85 0C                    .db $85,12              ; x000-0101,00001-100 05x S1 D4
 5147   4A1C   85 08                    .db $85,8               ; x000-0101,00001-000 05x S1 D0
 5148   4A1E   85 07                    .db $85,7               ; x000-0101,00000-111 05x S0 D7
 5149   4A20   85 03                    .db $85,3               ; x000-0101,00000-011 05x S0 D3
 5150   4A22   87 06                    .db $87,6               ; x000-0111,00000-110 07x S0 D6   --
 5151   4A24   86 02                    .db $86,2               ; x000-0110,00000-010 06x S0 D2  /  \
 5152   4A26   85 0D                    .db $85,13              ; x000-0101,00001-101 05x S1 D5 |    |
 5153   4A28   83 11                    .db $83,17              ; x000-0101,00010-001 03x S2 D1  \- /-
 5154   4A2A   83 0D                    .db $83,13              ; x000-0011,00001-101 03x S1 D5 ---/   \
 5155   4A2C   06                       .db 6                   ; dat-die                               x
 5156   4A2D                            
 5157                           patdat10                ; ok
 5158   4A2D   82 0C                    .db $82,12              ; x000-0011,00001-100 02x S1 D4 
 5159   4A2F   85 18                    .db $85,24              ; x000-0011,00011-000 05x S3 D0 
 5160   4A31   84 08                    .db $84,8               ; x000-0100,00001-000 04x S1 D0 
 5161   4A33   83 00                    .db $83,0               ; x000-0100,00000-000 02x S0 D0 
 5162   4A35   82 04                    .db $82,4               ; x000-0100,00000-100 02x S0 D4 
 5163   4A37   81 01                    .db $81,1               ; x000-0100,00000-001 02x S0 D1    --
 5164   4A39   82 09                    .db $82,9               ; x000-0010,00001-001 02x S1 D1   /  \
 5165   4A3B   83 05                    .db $83,5               ; x000-1000,00000-101 03x S0 D5  |    \
 5166   4A3D   84 0D                    .db $84,13              ; x000-1010,00001-101 04x S1 D5  |     \
 5167   4A3F   82 15                    .db $82,21              ; x000-0111,00010-101 02x S2 D5  |     |
 5168   4A41   8A 0A                    .db $8a,10              ; x000-0101,00001-010 11x S1 D2 /      x
 5169   4A43   06                       .db 6                   ; dat-die
 5170   4A44                            
 5171                           patdat11                ; ok
 5172   4A44   82 0D                    .db $82,13              ; x000-0110,00001-101 03x S1 D5 \   --
 5173   4A46   81 05                    .db $81,5               ; x000-0100,00000-101 03x S0 D5  \ /  |
 5174   4A48   82 09                    .db $82,9               ; x000-0101,00001-001 03x S1 D1   -   |
 5175   4A4A   85 34                    .db $85,52              ; x000-0110,00110-100 03x S6 D4      /
 5176   4A4C   82 09                    .db $82,9               ; x000-1001,00001-001 03x S1 D1  x--
 5177   4A4E   82 31                    .db $82,49              ; x000-1001,00100-001 03x S4 D1
 5178   4A50   85 0A                    .db $85,10              ; x000-0100,00001-010 03x S1 D2
 5179   4A52   82 0E                    .db $82,14              ; x000-0100,00001-110 03x S1 D6
 5180   4A54   82 36                    .db $82,54              ; x000-0101,00100-110 03x S4 D6
 5181   4A56   84 0B                    .db $84,11              ; x000-0111,00001-011 03x S1 D3
 5182   4A58   85 33                    .db $85,51              ; x001-0011,00110-011 03x S6 D3
 5183   4A5A   06                       .db 6                   ; dat-die
 5184   4A5B                            
 5185                           patdat12                ; MOT USED!!!!!!!!!!!!!!!!
 5186   4A5B   88 06                    .db $88,6
 5187   4A5D   85 01                    .db $85,1
 5188   4A5F   8F 05                    .db $8F,5
 5189   4A61   8F 06                    .db $8F,6
 5190   4A63   88 05                    .db $88,5
 5191   4A65   85 03                    .db $85,3
 5192   4A67   00 00                    .db 0,0                 ; dat_loop reset offsetpointer to 0
 5193   4A69                            
 5194                           patdat13                ; ok
 5195   4A69   84 02                    .db $84,2               ; x000-1000,00001-110 08x S1 D6      |
 5196   4A6B   84 0E                    .db $84,14              ; x000-1000,00001-110 08x S1 D6  ----/-
 5197   4A6D   82 36                    .db $82,54              ; x000-0101,00110-110 05x S6 D6 /   /  \
 5198   4A6F   82 0B                    .db $82,11              ; x000-0101,00001-011 03x S1 D3 |  /    x
 5199   4A71   82 33                    .db $82,51              ; x000-0100,00110-011 03x S6 D3 --/
 5200   4A73   83 08                    .db $83,8               ; x000-0101,00001-000 03x S1 D0 
 5201   4A75   82 34                    .db $82,52              ; x000-0101,00110-100 03x S6 D4 
 5202   4A77   83 09                    .db $83,9               ; x000-0011,00001-001 03x S1 D1
 5203   4A79   83 0D                    .db $83,13              ; x000-0111,00001-101 03x S1 D5
 5204   4A7B   82 15                    .db $82,21              ; x000-0101,00010-101 03x S2 D5
 5205   4A7D   86 05                    .db $86,5               ; x000-0111,00011-101 03x S3 D5
 5206   4A7F   06                       .db 6                   ; dat-die
 5207   4A80                            
 5208                           patdat14                ; ok
 5209   4A80   0A 01                    .db 10,1                ; dat_for_loop 1x
 5210   4A82   83 0D                    .db $83,13              ; x000-1100,00001-101 03x S1 D5
 5211   4A84   83 31                    .db $83,49              ; x000-0011,00110-001 03x S6 D1
 5212   4A86   82 09                    .db $82,9               ; x000-0010,00001-001 02x S1 D1
 5213   4A88   81 34                    .db $81,52              ; x000-0010,00110-100 01x S6 D4    --
 5214   4A8A   81 0B                    .db $81,11              ; x000-0001,00001-011 01x S1 D3   /  \
 5215   4A8C   81 30                    .db $81,48              ; x000-0010,00110-000 01x S6 D0 \ |  |
 5216   4A8E   81 08                    .db $81,8               ; x000-0001,00001-000 01x S1 D0  \ \ --
 5217   4A90   81 37                    .db $81,55              ; x000-0010,00110-111 01x S6 D7   \ x/
 5218   4A92   81 0F                    .db $81,15              ; x000-0010,00001-111 01x S1 D7    --
 5219   4A94   82 0B                    .db $82,11              ; x000-0011,00001-011 02x S1 D3
 5220   4A96   81 36                    .db $81,54              ; x000-0010,00110-110 01x S6 D6
 5221   4A98   81 0E                    .db $81,14              ; x000-0001,00001-110 01x S1 D6
 5222   4A9A   81 32                    .db $81,50              ; x000-0010,00110-010 01x S6 D2
 5223   4A9C   81 35                    .db $81,53              ; x000-0010,00110-101 01x S6 D5
 5224   4A9E   0C                       .db 12                  ; dat_next
 5225   4A9F   88 0D                    .db $88,13              ; x000-0111,00001-101 08x S1 D5
 5226   4AA1   06                       .db 6                   ; dat-die
 5227   4AA2                            
 5228                           patdat15                ; ok
 5229   4AA2   8B 10                    .db $8b,16              ; x001-0011,00010-000 11x S2 D0    ---
 5230   4AA4   82 0C                    .db $82,12              ; x000-0010,00001-100 02x S1 D4   /   \
 5231   4AA6   84 11                    .db $84,17              ; x000-0100,00010-001 04x S2 D1  /     \
 5232   4AA8   82 0D                    .db $82,13              ; x000-0010,00001-101 02x S1 D5 |       |
 5233   4AAA   83 35                    .db $83,53              ; x000-0011,00110-101 03x S6 D5 |       |
 5234   4AAC   87 12                    .db $87,18              ; x000-0111,00010-010 07x S2 D2 |       x
 5235   4AAE   06                       .db 6                   ; dat-die
 5236   4AAF                            
 5237                           patdat16                ; ok
 5238   4AAF   84 30                    .db $84,48              ; x000-1101,00110-000 13x S6 D0 
 5239   4AB1   82 34                    .db $82,52              ; x000-0010,00110-100 02x S6 D4
 5240   4AB3   82 09                    .db $82,9               ; x000-0010,00001-001 02x S1 D1
 5241   4AB5   82 31                    .db $82,49              ; x000-0010,00110-001 02x S6 D1
 5242   4AB7   82 0D                    .db $82,13              ; x000-0010,00001-101 02x S1 D5
 5243   4AB9   82 35                    .db $82,53              ; x000-0010,00110-101 02x S6 D5   ----
 5244   4ABB   82 0A                    .db $82,10              ; x000-0010,00001-010 02x S1 D2  /   -\-
 5245   4ABD   82 32                    .db $82,50              ; x000-0010,00110-010 02x S6 D2 /  /   \ \
 5246   4ABF   82 0E                    .db $82,14              ; x000-0010,00001-110 02x S1 D6   |    |  x
 5247   4AC1   82 36                    .db $82,54              ; x000-0010,00110-110 02x S6 D6   \   /
 5248   4AC3   82 0B                    .db $82,11              ; x000-0010,00001-011 02x S1 D3     -
 5249   4AC5   82 33                    .db $82,51              ; x000-0010,00110-011 02x S6 D3
 5250   4AC7   82 0F                    .db $82,15              ; x000-0010,00001-111 02x S1 D7
 5251   4AC9   82 37                    .db $82,55              ; x000-0010,00110-111 02x S6 D7
 5252   4ACB   82 08                    .db $82,8               ; x000-0010,00001-000 02x S1 D0
 5253   4ACD   82 30                    .db $82,48              ; x000-0010,00110-000 02x S6 D0
 5254   4ACF   82 0C                    .db $82,12              ; x000-0010,00001-100 02x S1 D4
 5255   4AD1   82 34                    .db $82,52              ; x000-0010,00110-100 02x S6 D4
 5256   4AD3   82 09                    .db $82,9               ; x000-0010,00001-001 02x S1 D1
 5257   4AD5   82 31                    .db $82,49              ; x000-0010,00110-001 02x S6 D1
 5258   4AD7   84 35                    .db $84,53              ; x000-1110,00110-101 14x S6 D5
 5259   4AD9   06                       .db 6                   ; dat-die
 5260   4ADA                            
 5261                           patdat17                ; ok
 5262   4ADA   82 15                    .db $82,21              ; x000-1011,00010-101 13x S2 D5
 5263   4ADC   81 31                    .db $81,49              ; x000-0011,00110-001 03x S6 D1  --      x
 5264   4ADE   84 09                    .db $84,9               ; x000-0100,00001-001 04x S1 D1 /  \     |
 5265   4AE0   83 0C                    .db $83,12              ; x000-0101,00001-100 05x S1 D4 |   \    |
 5266   4AE2   82 08                    .db $82,8               ; x000-0100,00001-000 04x S1 D0  \   |  /
 5267   4AE4   81 0F                    .db $81,15              ; x000-0011,00001-111 03x S1 D7   ---|--
 5268   4AE6   81 17                    .db $81,23              ; x000-0011,00010-111 03x S2 D7 \    |
 5269   4AE8   82 0F                    .db $82,15              ; x000-0100,00001-111 04x S1 D7  \  /
 5270   4AEA   81 0B                    .db $81,11              ; x000-0011,00001-011 03x S1 D3   --
 5271   4AEC   82 0E                    .db $82,14              ; x000-0100,00001-110 04x S1 D6
 5272   4AEE   81 16                    .db $81,22              ; x000-0011,00010-110 03x S2 D6
 5273   4AF0   81 0E                    .db $81,14              ; x000-0011,00001-110 03x S1 D6
 5274   4AF2   82 0A                    .db $82,10              ; x000-0100,00001-010 04x S1 D2
 5275   4AF4   83 0D                    .db $83,13              ; x000-0101,00001-101 05x S1 D5
 5276   4AF6   84 09                    .db $84,9               ; x000-0100,00001-001 04x S1 D1
 5277   4AF8   83 34                    .db $83,52              ; x000-0011,00110-100 03x S6 D4
 5278   4AFA   86 04                    .db $86,4               ; x000-1011,00010-100 13x S2 D4
 5279   4AFC   87 08                    .db $87,8               ; x000-0010,00001-000 02x S1 D0
 5280   4AFE   06                       .db 6                   ; dat-die
 5281   4AFF                            
 5282                           patdat18                ; ok
 5283   4AFF   86 0D                    .db $86,13              ; x000-0110,00001-101 06x S1 D5      \
 5284   4B01   86 0E                    .db $86,14              ; x000-0110,00001-110 06x S1 D6      /
 5285   4B03   00 00                    .db 0,0                 ; dat_loop reset offsetpointer to 0
 5286   4B05                            
 5287                           patdat19                ; ok
 5288   4B05   0A 02                    .db 10,2                ; dat_for_loop 3x
 5289   4B07   82 12                    .db $82,18              ; x000-0110,00010-010 03x S2 D2
 5290   4B09   81 32                    .db $81,50              ; x000-0001,00110-010 01x S6 D2
 5291   4B0B   0C                       .db 12                  ; dat_next                     
 5292   4B0C   82 36                    .db $82,54              ; x000-0101,00110-110 05x S6 D6 
 5293   4B0E   83 03                    .db $83,3               ; x000-0100,00001-011 04x S1 D3              |
 5294   4B10   81 40                    .db $81,$40             ; x001-0110,00100-000 22x S4 D0       ------/-
 5295   4B12   0A 01                    .db 10,1                ; dat_for_loop 1x                    /     |  \
 5296   4B14   82 0F                    .db $82,15              ; x000-0101,00001-111 05x S1 D7     /     /   |
 5297   4B16   82 08                    .db $82,8               ; x000-0100,00001-000 04x S1 D0  --|-----|---/--X
 5298   4B18   82 0C                    .db $82,12              ; x000-0100,00001-100 04x S1 D4  \  \   /   /
 5299   4B1A   81 34                    .db $81,52              ; x000-0011,00110-100 03x S6 D4   \ |  /   /
 5300   4B1C   81 09                    .db $81,9               ; x000-0011,00001-001 03x S1 D1    \ --   / 
 5301   4B1E   81 0D                    .db $81,13              ; x000-0011,00001-101 03x S1 D5     ------
 5302   4B20   81 0A                    .db $81,10              ; x000-0011,00001-010 03x S1 D2
 5303   4B22   81 0E                    .db $81,14              ; x000-0011,00001-110 03x S1 D6
 5304   4B24   82 36                    .db $82,54              ; x000-0100,00110-110 04x S6 D6
 5305   4B26   82 0B                    .db $82,11              ; x000-1000,00001-011 08x S1 D3
 5306   4B28   0C                       .db 12                  ; dat_next
 5307   4B29   81 0F                    .db $81,15              ; x000-0011,00001-111 03x S1 D7
 5308   4B2B   82 37                    .db $82,55              ; x000-0100,00110-111 04x S6 D7
 5309   4B2D   86 08                    .db $86,8               ; x000-1100,00001-000 12x S1 D0
 5310   4B2F   06                       .db 6                   ; dat-die
 5311   4B30                            
 5312                           patdat20                ; ok
 5313   4B30   89 0A                    .db $89,10              ; x000-1100,00001-010 12x S1 D2   |  x
 5314   4B32   0A 03                    .db 10,3                ; dat_for_loop 3x                 | /
 5315   4B34   81 40                    .db $81,$40             ; x000-0001,00101-000 01x S5 D0   |/
 5316   4B36   08                       .db 8                   ; dat_dropbomb
 5317   4B37   81 40                    .db $81,$40             ; x000-0001,00101-000 01x S5 D0
 5318   4B39   0C                       .db 12                  ; dat_next
 5319   4B3A   89 14                    .db $89,20              ; x000-1001,00010-100 09x S2 D4
 5320   4B3C   06                       .db 6                   ; dat-die
 5321   4B3D                            
 5322                           patdat21                ; ok
 5323   4B3D   84 02                    .db $84,2               ; x000-1010,00001-110 10x S1 D6
 5324   4B3F   86 0E                    .db $86,14              ; x000-1010,00001-110 10x S1 D6
 5325   4B41   81 36                    .db $81,54              ; x000-0010,00110-110 02x S6 D6
 5326   4B43   82 0B                    .db $82,11              ; x000-0011,00001-011 03x S1 D3
 5327   4B45   81 0F                    .db $81,15              ; x000-0001,00001-111 01x S1 D7    -- 
 5328   4B47   81 37                    .db $81,55              ; x000-0001,00110-111 01x S6 D7   /  \   /
 5329   4B49   82 08                    .db $82,8               ; x000-0010,00001-000 02x S1 D0   |  |  /
 5330   4B4B   81 30                    .db $81,48              ; x000-0001,00110-000 01x S6 D0   \  / /
 5331   4B4D   81 0C                    .db $81,12              ; x000-0010,00001-100 02x S1 D4 x--\- /
 5332   4B4F   81 34                    .db $81,52              ; x000-0001,00110-100 01x S6 D4     -
 5333   4B51   84 09                    .db $84,9               ; x000-0110,00001-001 06x S1 D1
 5334   4B53   82 31                    .db $82,49              ; x000-0010,00110-001 02x S6 D1
 5335   4B55   81 0D                    .db $81,13              ; x000-0001,00001-101 01x S1 D5
 5336   4B57   81 35                    .db $81,53              ; x000-0001,00110-101 01x S6 D5
 5337   4B59   81 0A                    .db $81,10              ; x000-0001,00001-010 01x S1 D2
 5338   4B5B   81 32                    .db $81,50              ; x000-0001,00110-010 01x S6 D2
 5339   4B5D   82 0E                    .db $82,14              ; x000-0010,00001-110 02x S1 D6
 5340   4B5F   81 36                    .db $81,54              ; x000-0001,00110-110 01x S6 D6
 5341   4B61   82 13                    .db $82,19              ; x000-0011,00010-011 03x S1 D3
 5342   4B63   85 33                    .db $85,51              ; x000-0010,00110-011 02x S6 D3
 5343   4B65   84 03                    .db $84,3               ; x000-0011,00010-011 03x S2 D3
 5344   4B67   06                       .db 6                   ; dat-die
 5345   4B68                            
 5346                           patdat22                ; ok
 5347   4B68   86 12                    .db $86,18              ; x000-0111,00010-010 07x S2 D2
 5348   4B6A   82 35                    .db $82,53              ; x000-0101,00110-101 05x S6 D5
 5349   4B6C   82 0D                    .db $82,13              ; x000-0011,00001-101 03x S1 D5 |       x
 5350   4B6E   81 31                    .db $81,49              ; x000-0101,00110-001 05x S6 D1 |       |
 5351   4B70   81 11                    .db $81,17              ; x000-0110,00010-001 06x S2 D1  \     /
 5352   4B72   82 34                    .db $82,52              ; x000-0101,00110-100 05x S6 D4   \   /
 5353   4B74   82 0C                    .db $82,12              ; x000-0011,00001-100 03x S1 D4    ---
 5354   4B76   83 30                    .db $83,48              ; x000-0101,00110-000 05x S6 D0
 5355   4B78   86 10                    .db $86,16              ; x000-1000,00010-000 08x S2 D0
 5356   4B7A   06                       .db 6                   ; dat-die
 5357   4B7B                            
 5358                           patdat23                ; ok
 5359   4B7B   88 05                    .db $88,5               ; x001-1101,00000-101 29x S0 D5   \
 5360   4B7D   84 09                    .db $84,9               ; x000-0110,00001-001 06x S1 D1  - \----
 5361   4B7F   88 06                    .db $88,6               ; x001-1101,00000-110 29x S0 D6     \  /
 5362   4B81   84 0B                    .db $84,11              ; x000-0110,00001-011 06x S1 D3      --
 5363   4B83   00 00                    .db 0,0                 ; dat_loop reset offsetpointer to 0
 5364   4B85                            
 5365                           patdat24                ; ok
 5366   4B85   81 0A                    .db $81,10              ; x000-0010,00001-010 02x S1 D2  |
 5367   4B87   82 0D                    .db $82,13              ; x000-0011,00001-101 03x S1 D5  \
 5368   4B89   86 31                    .db $86,49              ; x000-1101,00110-001 13x S6 D1   \
 5369   4B8B   82 0D                    .db $82,13              ; x000-0011,00001-101 03x S1 D5    |
 5370   4B8D   81 0A                    .db $81,10              ; x000-0010,00001-010 02x S1 D2    |
 5371   4B8F   82 0E                    .db $82,14              ; x000-0011,00001-110 03x S1 D6   /
 5372   4B91   86 36                    .db $86,54              ; x000-1101,00110-110 13x S6 D6  /
 5373   4B93   82 0E                    .db $82,14              ; x000-0011,00001-110 03x S1 D6 x
 5374   4B95   00 00                    .db 0,0                 ; dat_loop reset offsetpointer to 0
 5375   4B97                            
 5376                           patdat25                ; ok
 5377   4B97   90 02                    .db $90,2               ; x001-0000,00000-010 16x S0 D2   x      |
 5378   4B99   83 0B                    .db $83,11              ; x000-0011,00001-011 03x S1 D3    \     |
 5379   4B9B   94 02                    .db $94,2               ; x001-0100,00000-010 04x S1 D2     \  --
 5380   4B9D   8A 37                    .db $8a,48+7            ; x000-1010,00110-111 10x S6 D7      \|
 5381   4B9F   06                       .db 6                   ; dat-die                            
 5382   4BA0                            
 5383                           patdat26                ; ok
 5384   4BA0   89 05                    .db $89,5               ; x010-0101,00000-101 37x S0 D5   \  x
 5385   4BA2   89 06                    .db $89,6               ; x001-0000,00000-110 16x S0 D6    \  \
 5386   4BA4   85 01                    .db $85,1               ; x001-0100,00000-001 20x S0 D1    /  /
 5387   4BA6   89 04                    .db $89,4               ; x001-0000,00000-100 16x S0 D4   /  /
 5388   4BA8   8B 07                    .db $8b,7               ; x010-1000,00000-111 24x S0 D7   ---
 5389   4BAA   06                       .db 6                   ; dat-die
 5390   4BAB                            
 5391                           patdat27                ; ok
 5392   4BAB   8D 09                    .db $8d,9               ; x000-1101,00001-001 13x S0 D1 ---------
 5393   4BAD   83 0A                    .db $83,10              ; x000-0011,00001-010 03x S0 D2          |
 5394   4BAF   8D 0B                    .db $8d,11              ; x000-1101,00001-011 13x S0 D3  --------
 5395                           patdat28                ; ok
 5396   4BB1   83 0A                    .db $83,10              ; x000-0011,00001-010 28x S0 D2 |
 5397   4BB3   8D 09                    .db $8d,9               ; x000-1101,00001-001 28x S0 D1  --------
 5398   4BB5   83 0A                    .db $83,10              ; x000-0011,00001-010 28x S0 D2          |
 5399   4BB7   8D 0B                    .db $8d,11              ; x000-1101,00001-011 28x S0 D3 x--------
 5400   4BB9   0E                       .db 14                  ; mve, move to new startposition
 5401   4BBA   02 1B                    .db 2,27                ; dat_newpat initialize new pattern 27
 5402   4BBC                            
 5403                           patdat29                ; ok
 5404   4BBC   9C 01                    .db $9c,1               ; x001-1100,00000-001 28x S0 D1 <-->
 5405   4BBE   9C 03                    .db $9c,3               ; x001-1100,00000-011 28x S0 D3
 5406   4BC0   00 00                    .db 0,0                 ; dat_loop reset offsetpointer to 0
 5407                           
 5408   4BC2                            include VECTORS.inc
 5409                           ;----------------------------------------------
 5410                           ;VECTORS
 5411                           ;----------------------------------------------
 5412                           
 5413   4BC2                    vecwavl
 5414   4BC2   3D                       .db <wave0
 5415   4BC3   45                       .db <wave1
 5416   4BC4   4C                       .db <wave2
 5417   4BC5   53                       .db <wave3
 5418   4BC6   5C                       .db <wave4
 5419   4BC7   64                       .db <wave5
 5420   4BC8   6D                       .db <wave6
 5421   4BC9   75                       .db <wave7
 5422   4BCA   7E                       .db <wave8
 5423   4BCB   87                       .db <wave9
 5424   4BCC   8E                       .db <wave10
 5425   4BCD   95                       .db <wave11
 5426   4BCE   9E                       .db <wave12
 5427   4BCF   A6                       .db <wave13
 5428   4BD0   AE                       .db <wave14
 5429   4BD1   B6                       .db <wave15
 5430   4BD2                    vecwavh
 5431   4BD2   47                       .db >wave0
 5432   4BD3   47                       .db >wave1
 5433   4BD4   47                       .db >wave2
 5434   4BD5   47                       .db >wave3
 5435   4BD6   47                       .db >wave4
 5436   4BD7   47                       .db >wave5
 5437   4BD8   47                       .db >wave6
 5438   4BD9   47                       .db >wave7
 5439   4BDA   47                       .db >wave8
 5440   4BDB   47                       .db >wave9
 5441   4BDC   47                       .db >wave10
 5442   4BDD   47                       .db >wave11
 5443   4BDE   47                       .db >wave12
 5444   4BDF   47                       .db >wave13
 5445   4BE0   47                       .db >wave14
 5446   4BE1   47                       .db >wave15
 5447   4BE2                    vecpatl
 5448   4BE2   C0                       .db <patt0
 5449   4BE3   C9                       .db <patt1
 5450   4BE4   D2                       .db <patt2
 5451   4BE5   DB                       .db <patt3
 5452   4BE6   E4                       .db <patt4
 5453   4BE7   F5                       .db <patt5
 5454   4BE8   FE                       .db <patt6
 5455   4BE9   0F                       .db <patt7
 5456   4BEA   20                       .db <patt8
 5457   4BEB   29                       .db <patt9
 5458   4BEC   32                       .db <patt10
 5459   4BED   3B                       .db <patt11 
 5460   4BEE   44                       .db <patt12
 5461   4BEF   55                       .db <patt13
 5462   4BF0   5E                       .db <patt14
 5463   4BF1   67                       .db <patt15
 5464   4BF2   70                       .db <patt16
 5465   4BF3   79                       .db <patt17
 5466   4BF4   82                       .db <patt18
 5467   4BF5   8B                       .db <patt19
 5468   4BF6   94                       .db <patt20
 5469   4BF7   9D                       .db <patt21
 5470   4BF8   A6                       .db <patt22
 5471   4BF9   AF                       .db <patt23
 5472   4BFA   B8                       .db <patt24
 5473   4BFB   C1                       .db <patt25
 5474   4BFC   CA                       .db <patt26
 5475   4BFD   D3                       .db <patt27
 5476   4BFE   DC                       .db <patt28
 5477   4BFF   E5                       .db <patt29
 5478   4C00   EE                       .db <patt30
 5479   4C01   F7                       .db <patt31
 5480   4C02   00                       .db <patt32
 5481   4C03   09                       .db <patt33
 5482   4C04   12                       .db <patt34
 5483   4C05   1B                       .db <patt35
 5484   4C06   24                       .db <patt36
 5485   4C07   2D                       .db <patt37
 5486   4C08   36                       .db <patt38
 5487   4C09   3F                       .db <patt39
 5488   4C0A   48                       .db <patt40
 5489   4C0B   51                       .db <patt41
 5490   4C0C   5A                       .db <patt42 
 5491   4C0D   63                       .db <patt43
 5492   4C0E   74                       .db <patt44
 5493   4C0F   85                       .db <patt45
 5494   4C10                    vecpath
 5495   4C10   47                       .db >patt0
 5496   4C11   47                       .db >patt1
 5497   4C12   47                       .db >patt2
 5498   4C13   47                       .db >patt3
 5499   4C14   47                       .db >patt4
 5500   4C15   47                       .db >patt5
 5501   4C16   47                       .db >patt6
 5502   4C17   48                       .db >patt7
 5503   4C18   48                       .db >patt8
 5504   4C19   48                       .db >patt9
 5505   4C1A   48                       .db >patt10
 5506   4C1B   48                       .db >patt11
 5507   4C1C   48                       .db >patt12
 5508   4C1D   48                       .db >patt13
 5509   4C1E   48                       .db >patt14
 5510   4C1F   48                       .db >patt15
 5511   4C20   48                       .db >patt16
 5512   4C21   48                       .db >patt17
 5513   4C22   48                       .db >patt18
 5514   4C23   48                       .db >patt19
 5515   4C24   48                       .db >patt20
 5516   4C25   48                       .db >patt21
 5517   4C26   48                       .db >patt22
 5518   4C27   48                       .db >patt23
 5519   4C28   48                       .db >patt24
 5520   4C29   48                       .db >patt25
 5521   4C2A   48                       .db >patt26
 5522   4C2B   48                       .db >patt27
 5523   4C2C   48                       .db >patt28
 5524   4C2D   48                       .db >patt29
 5525   4C2E   48                       .db >patt30
 5526   4C2F   48                       .db >patt31
 5527   4C30   49                       .db >patt32
 5528   4C31   49                       .db >patt33
 5529   4C32   49                       .db >patt34
 5530   4C33   49                       .db >patt35
 5531   4C34   49                       .db >patt36
 5532   4C35   49                       .db >patt37
 5533   4C36   49                       .db >patt38
 5534   4C37   49                       .db >patt39
 5535   4C38   49                       .db >patt40
 5536   4C39   49                       .db >patt41
 5537   4C3A   49                       .db >patt42
 5538   4C3B   49                       .db >patt43
 5539   4C3C   49                       .db >patt44
 5540   4C3D   49                       .db >patt45
 5541   4C3E                    vecpatdl
 5542   4C3E   9E                       .db <patdat0
 5543   4C3F   A7                       .db <patdat1
 5544   4C40   AE                       .db <patdat2
 5545   4C41   BE                       .db <patdat3
 5546   4C42   C8                       .db <patdat4
 5547   4C43   DC                       .db <patdat5
 5548   4C44   E9                       .db <patdat6
 5549   4C45   F6                       .db <patdat7
 5550   4C46   05                       .db <patdat8 
 5551   4C47   18                       .db <patdat9
 5552   4C48   2D                       .db <patdat10
 5553   4C49   44                       .db <patdat11
 5554   4C4A   5B                       .db <patdat12
 5555   4C4B   69                       .db <patdat13
 5556   4C4C   80                       .db <patdat14
 5557   4C4D   A2                       .db <patdat15
 5558   4C4E   AF                       .db <patdat16
 5559   4C4F   DA                       .db <patdat17
 5560   4C50   FF                       .db <patdat18
 5561   4C51   05                       .db <patdat19
 5562   4C52   30                       .db <patdat20
 5563   4C53   3D                       .db <patdat21
 5564   4C54   68                       .db <patdat22
 5565   4C55   7B                       .db <patdat23
 5566   4C56   85                       .db <patdat24
 5567   4C57   97                       .db <patdat25
 5568   4C58   A0                       .db <patdat26
 5569   4C59   AB                       .db <patdat27
 5570   4C5A   B1                       .db <patdat28
 5571   4C5B   BC                       .db <patdat29
 5572   4C5C                    vecpatdh
 5573   4C5C   49                       .db >patdat0
 5574   4C5D   49                       .db >patdat1
 5575   4C5E   49                       .db >patdat2
 5576   4C5F   49                       .db >patdat3
 5577   4C60   49                       .db >patdat4
 5578   4C61   49                       .db >patdat5
 5579   4C62   49                       .db >patdat6
 5580   4C63   49                       .db >patdat7
 5581   4C64   4A                       .db >patdat8
 5582   4C65   4A                       .db >patdat9
 5583   4C66   4A                       .db >patdat10
 5584   4C67   4A                       .db >patdat11
 5585   4C68   4A                       .db >patdat12
 5586   4C69   4A                       .db >patdat13
 5587   4C6A   4A                       .db >patdat14
 5588   4C6B   4A                       .db >patdat15
 5589   4C6C   4A                       .db >patdat16
 5590   4C6D   4A                       .db >patdat17
 5591   4C6E   4A                       .db >patdat18 
 5592   4C6F   4B                       .db >patdat19
 5593   4C70   4B                       .db >patdat20
 5594   4C71   4B                       .db >patdat21
 5595   4C72   4B                       .db >patdat22
 5596   4C73   4B                       .db >patdat23
 5597   4C74   4B                       .db >patdat24
 5598   4C75   4B                       .db >patdat25
 5599   4C76   4B                       .db >patdat26
 5600   4C77   4B                       .db >patdat27
 5601   4C78   4B                       .db >patdat28
 5602   4C79   4B                       .db >patdat29
 5603   4C7A                     
 5604                           
 5605   4C7A                            
 5606   4C7A                            include sound.inc
 5607                           ;---------------------------------------------------
 5608                           ; SOUND A,X,Y, produce tone
 5609                           ;
 5610                           ; A = Duration (1-255) * 0,005 usec
 5611                           ; X = Pitch (9-19)
 5612                           ; Y = Octave (0-7)
 5613                           ;---------------------------------------------------
 5614                           
 5615          00F0             dur_val   equ $f0
 5616          00F1             pit_val   equ $f1
 5617          00F2             oct_val   equ $f2
 5618                           
 5619   4C7A                    sound:
 5620   4C7A   85 F0                    sta dur_val     ; 4
 5621   4C7C   86 F1                    stx pit_val     ; 4
 5622   4C7E   84 F2                    sty oct_val     ; 4
 5623                           
 5624   4C80   A9 88                    lda #<5000      ; 2, Set Timer 2=0,005 sec
 5625   4C82   8D 08 B8                 sta $b808       ; 4
 5626   4C85   A9 13                    lda #>5000      ; 2
 5627   4C87   8D 09 B8                 sta $b809       ; 4
 5628                           
 5629   4C8A   E0 00                    cpx #0
 5630   4C8C   D0 03                    bne loop3
 5631   4C8E   4C AC 4C                 jmp pauseloop
 5632   4C91                    loop3:
 5633   4C91   20 C6 4C                   jsr toggle         ;22 , t3=t2+22+3
 5634                           
 5635   4C94   A4 F2                      ldy oct_val        ; 4 , t2=Y*(t1+4)+4
 5636   4C96   A6 F1            loop2:      ldx pit_val      ; 4 , t1=X*32+4
 5637   4C98   AD 0D B8         loop1:        lda $b80d         ; 4, Read IFR
 5638   4C9B   29 20                          and #$20          ; 2, Mask T2
 5639   4C9D   D0 30                          bne chk_timer     ; 2 If T2=0, jump
 5640   4C9F   20 E3 4C                       jsr wait          ; 6+18 Else wait
 5641   4CA2   CA               loop5:        dex               ; 2
 5642   4CA3   D0 F3                        bne loop1           ; 2
 5643   4CA5   88                           dey              ; 2
 5644   4CA6   D0 EE                      bne loop2          ; 2
 5645                           
 5646   4CA8   4C 91 4C                 jmp loop3            ; 3
 5647                           
 5648   4CAB                    end_sound:
 5649   4CAB   60                       rts             
 5650                           
 5651                           ;--------------------------------------
 5652                           ; Pause 
 5653                           ;--------------------------------------
 5654   4CAC                    pauseloop:
 5655   4CAC   A4 F0                    ldy dur_val
 5656   4CAE                    loop10:
 5657   4CAE   A9 88                    lda #<5000
 5658   4CB0   8D 08 B8                 sta $b808
 5659   4CB3   A9 13                    lda #>5000
 5660   4CB5   8D 09 B8                 sta $b809
 5661   4CB8                    loop11:
 5662   4CB8   AD 0D B8                 lda $b80d
 5663   4CBB   29 20                    and #$20
 5664   4CBD   F0 F9                    beq loop11
 5665                           
 5666   4CBF   AD 08 B8                 lda $b808
 5667   4CC2   88                       dey
 5668   4CC3   D0 E9                    bne loop10
 5669   4CC5   60                       rts
 5670                           
 5671                           ;--------------------------------------
 5672                           ; Toggle speaker (16 usec)
 5673                           ;--------------------------------------
 5674   4CC6                    toggle:
 5675   4CC6   AD 02 B0                 lda $b002      ; 4
 5676   4CC9   49 04                    eor #4         ; 2
 5677   4CCB   8D 02 B0                 sta $b002      ; 4
 5678   4CCE   60                       rts            ; 6
 5679                           
 5680                           ;--------------------------------------
 5681                           ; Check if time is over (24 usec)
 5682                           ;--------------------------------------
 5683   4CCF                    chk_timer:
 5684   4CCF   AD 08 B8                 lda $b808      ; 4
 5685   4CD2   C6 F0                    dec dur_val    ; 3
 5686   4CD4   F0 D5                    beq end_sound  ; 2
 5687   4CD6                    settimer:
 5688   4CD6   A9 88                    lda #<5000     ; 2
 5689   4CD8   8D 08 B8                 sta $b808      ; 4
 5690   4CDB   A9 13                    lda #>5000     ; 2
 5691   4CDD   8D 09 B8                 sta $b809      ; 4
 5692   4CE0   4C A2 4C                 jmp loop5      ; 3
 5693                           
 5694                           ;--------------------------------------
 5695                           ; Wait routine 24-6=18 usec
 5696                           ;--------------------------------------
 5697   4CE3                    wait:
 5698   4CE3   EA                       nop            ; 2
 5699   4CE4   EA                       nop            ; 2
 5700   4CE5   EA                       nop            ; 2
 5701   4CE6   EA                       nop            ; 2
 5702   4CE7   EA                       nop            ; 2
 5703   4CE8   EA                       nop            ; 2
 5704   4CE9   60                       rts            ; 6
 5705                           
 5706                           
 5707   4CEA                            include joystick.inc
 5708                           ;----------------------------------------------------------
 5709                           ; Set PORTB direction
 5710                           ;----------------------------------------------------------
 5711                           
 5712   4CEA                    joyinit:
 5713   4CEA   A9 FF                    lda #$ff   ; Write value to latch, bits 0-7 input
 5714   4CEC   8D 01 B4                 sta $b401
 5715                           
 5716   4CEF   20 1A 4D                 jsr interwritedelay
 5717                           
 5718   4CF2   A9 A1                    lda #$a1   ; Write direction in latch to PORTB
 5719   4CF4   8D 00 B4                 sta $b400
 5720                           
 5721   4CF7   20 1A 4D                 jsr interwritedelay
 5722                           
 5723   4CFA   A9 FF                    lda #$ff   ; Write value to latch, bits 0-7 high 
 5724   4CFC   8D 01 B4                 sta $b401
 5725                           
 5726   4CFF   20 1A 4D                 jsr interwritedelay
 5727                           
 5728   4D02   A9 A3                    lda #$a3   ; Write value in latch to PORTB
 5729   4D04   8D 00 B4                 sta $b400
 5730   4D07   60                       rts
 5731                           
 5732                           ;----------------------------------------------------------
 5733                           ; Get PORTB value
 5734                           ;----------------------------------------------------------
 5735                           
 5736   4D08                    joyget:
 5737   4D08   A9 A2                    lda #$a2   ; Read value PORTB in latch
 5738   4D0A   8D 00 B4                 sta $b400
 5739                           
 5740   4D0D   20 1A 4D                 jsr interwritedelay
 5741                           
 5742   4D10   AD 01 B4                 lda $b401
 5743   4D13   F0 04                    beq no_joystick
 5744   4D15   49 FF                    eor #$ff
 5745   4D17   29 1F                    and #$1f
 5746   4D19                    no_joystick:
 5747   4D19   60                       rts
 5748                           
 5749                           ;----------------------------------------------------------
 5750                           ; Short delay
 5751                           ;
 5752                           ; Enough to intersperse 2 writes to the FATPIC.
 5753                           ;----------------------------------------------------------
 5754                           
 5755   4D1A                    interwritedelay:
 5756   4D1A   A9 04                    lda  #4
 5757   4D1C   38                       sec
 5758   4D1D                    loop:
 5759   4D1D   E9 01                    sbc  #1
 5760   4D1F   D0 FC                    bne  loop
 5761   4D21   60                       rts
 5762                           
 5763   4D22   00               tmp_byte:   .db 0
 5764                           
 5765   4D23                            include ATOMOS.inc
 5766          00FF             green           equ $ff
 5767          00FF             yellow          equ $ff
 5768          00FF             blue            equ $ff
 5769          00FF             red             equ $ff
 5770                           
 5771          FE66             wait_sync       equ $fe66
 5772          FE71             read_key        equ $fe71
 5773                           
 5774          0000             clrscr_chr      equ $00 ; blue
 5775                           
 5776                           ;Clear 4 color mode
 5777                           
 5778   4D23                    clear4a:
 5779   4D23   A9 F0                    lda #$f0
 5780   4D25   8D 00 B0                 sta $b000
 5781                           
 5782   4D28                    clr_screen:
 5783   4D28   A9 00                    lda #<$8000
 5784   4D2A   85 80                    sta $80
 5785   4D2C   A9 80                    lda #>$8000
 5786   4D2E   85 81                    sta $81
 5787   4D30   A9 00                    lda #clrscr_chr
 5788   4D32                    clr_loop:
 5789   4D32   91 80                    sta ($80),y
 5790   4D34   C8                       iny
 5791   4D35   D0 FB                    bne clr_loop
 5792   4D37   E6 81                    inc $81
 5793   4D39   A6 81                    ldx $81
 5794   4D3B   E0 98                    cpx #>$9800
 5795   4D3D   D0 F3                    bne clr_loop
 5796   4D3F   60                       rts
 5797                           
 5798                           ;------------------------------------------------
 5799                           ; Scankey A
 5800                           ; - A = scancode same as $FE71
 5801                           ; - Exit -> A=0   = key pressed
 5802                           ;           A=$ff = key not pressed
 5803                           ;------------------------------------------------
 5804                           
 5805   4D40                    scan_key:
 5806   4D40   C9 80                    cmp #$80 ; Scan CTRL
 5807   4D42   D0 0A                    bne sk10
 5808   4D44   AD 01 B0                 lda $b001
 5809   4D47   29 40                    and #$40
 5810   4D49   D0 5D                    bne sk4
 5811   4D4B   4C A4 4D                 jmp sk13
 5812   4D4E                    sk10:
 5813   4D4E   C9 81                    cmp #$81 ; Scan REPT
 5814   4D50   D0 0A                    bne sk11
 5815   4D52   AD 02 B0                 lda $b002
 5816   4D55   29 40                    and #$40
 5817   4D57   D0 4F                    bne sk4
 5818   4D59   4C A4 4D                 jmp sk13
 5819                           
 5820   4D5C                    sk11:
 5821   4D5C   C9 82                    cmp #$82 ; Scan SHIFT
 5822   4D5E   D0 0A                    bne sk12
 5823   4D60   AD 01 B0                 lda $b001
 5824   4D63   29 80                    and #$80
 5825   4D65   D0 41                    bne sk4
 5826   4D67   4C A4 4D                 jmp sk13
 5827                           
 5828   4D6A                    sk12:
 5829   4D6A   A2 00                    ldx #0
 5830   4D6C                    sk1:
 5831   4D6C   C9 0A                    cmp #10
 5832   4D6E   90 07                    bcc sk5
 5833   4D70   E8                       inx
 5834   4D71   38                       sec
 5835   4D72   E9 0A                    sbc #10
 5836   4D74   4C 6C 4D                 jmp sk1
 5837   4D77                    sk5:
 5838   4D77   49 FF                    eor #$ff
 5839   4D79   18                       clc
 5840   4D7A   69 0A                    adc #10
 5841   4D7C   8D AC 4D                 sta keyrow
 5842                           
 5843   4D7F   A9 01                    lda #1
 5844   4D81   8D AD 4D                 sta keycol
 5845                           
 5846   4D84   AD 00 B0                 lda $b000
 5847   4D87   29 F0                    and #$f0
 5848   4D89   09 D0                    ora #$d0
 5849   4D8B   0D AC 4D                 ora keyrow
 5850   4D8E   8D 00 B0                 sta $b000
 5851   4D91                    sk3:
 5852   4D91   E0 00                    cpx #0     ; Set keycol mask
 5853   4D93   F0 07                    beq sk2
 5854   4D95   CA                       dex     
 5855   4D96   0E AD 4D                 asl keycol
 5856   4D99   4C 91 4D                 jmp sk3
 5857   4D9C                    sk2:
 5858   4D9C   AD 01 B0                 lda $b001  ; Read keycol
 5859   4D9F   2D AD 4D                 and keycol
 5860   4DA2   D0 04                    bne sk4
 5861   4DA4                    sk13:
 5862   4DA4   A9 00                    lda #0
 5863   4DA6   38                       sec
 5864   4DA7   60                       rts
 5865   4DA8                    sk4:
 5866   4DA8   A9 FF                    lda #$ff
 5867   4DAA   18                       clc
 5868   4DAB   60                       rts
 5869                           
 5870   4DAC   00               keyrow:  .db 0
 5871   4DAD   00               keycol:  .db 0
 5872                           
 5873   4DAE                            include graph.inc
 5874                           ;----------------------------------------------
 5875                           ;GRAPH
 5876                           ;
 5877                           ; Graphic data for sprites (16 x 16 colour pixels)
 5878                           ; 1 colour pixel = 2 bits
 5879                           ; 1 byte         = 4 coloured pixels
 5880                           ; 1 Sprite       = 64 bytes
 5881                           ;
 5882                           ; Format         : B00 B01 B02 B03
 5883                           ;                  B04 B05 B06 B07
 5884                           ;                       .....
 5885                           ;                  B60 B61 B62 B63
 5886                           ;----------------------------------------------
 5887                           
 5888   4DAE                    graph
 5889   4DAE   D64D 164E 564E           .dw spr1,spr2,spr3,spr4,spr5,spr6,spr7,spr8
        4DB4   964E D64E 164F 
        4DBA   564F 964F 
 5890   4DBE   D64F 1650 5A50           .dw spr9,spr10,spr11,spr12,spr13,spr14,spr15,spr16
        4DC4   9A50 DA50 1A51 
        4DCA   5A51 9A51 
 5891   4DCE   DA51 1A52 5A52           .dw spr17,spr18,spr19,spr20
        4DD4   9A52 
 5892                           spr1                            ; Explosion 1
 5893   4DD6   00 00 00 00              .db $00,$00,$00,$00
 5894   4DDA   00 00 00 00              .db $00,$00,$00,$00
 5895   4DDE   00 00 00 00              .db $00,$00,$00,$00
 5896   4DE2   00 00 00 00              .db $00,$00,$00,$00
 5897   4DE6   00 04 00 00              .db $00,$04,$00,$00
 5898   4DEA   00 0F 00 00              .db $00,$0f,$00,$00
 5899   4DEE   00 3E F4 00              .db $00,$3E,$F4,$00
 5900   4DF2   01 F0 F0 00              .db $01,$F0,$F0,$00
 5901   4DF6   00 30 C0 00              .db $00,$30,$C0,$00
 5902   4DFA   00 3B C0 00              .db $00,$3B,$C0,$00
 5903   4DFE   00 34 C0 00              .db $00,$34,$C0,$00
 5904   4E02   00 30 00 00              .db $00,$30,$00,$00
 5905   4E06   00 00 00 00              .db $00,$00,$00,$00
 5906   4E0A   00 00 00 00              .db $00,$00,$00,$00
 5907   4E0E   00 00 00 00              .db $00,$00,$00,$00
 5908   4E12   00 00 00 00              .db $00,$00,$00,$00
 5909                           spr2                            ; Explosion 2
 5910   4E16   00 00 00 00              .db $00,$00,$00,$00
 5911   4E1A   00 00 00 00              .db $00,$00,$00,$00
 5912   4E1E   00 04 00 00              .db $00,$04,$00,$00
 5913   4E22   00 0C 00 00              .db $00,$0c,$00,$00
 5914   4E26   00 3F 00 00              .db $00,$3F,$00,$00
 5915   4E2A   00 13 C0 00              .db $00,$13,$C0,$00
 5916   4E2E   00 E0 BF 00              .db $00,$E0,$BF,$00
 5917   4E32   07 C0 34 00              .db $07,$C0,$34,$00
 5918   4E36   03 F0 20 00              .db $03,$F0,$20,$00
 5919   4E3A   00 32 30 00              .db $00,$32,$30,$00
 5920   4E3E   00 3F C0 00              .db $00,$3F,$C0,$00
 5921   4E42   00 3C 40 00              .db $00,$3C,$40,$00
 5922   4E46   00 10 00 00              .db $00,$10,$00,$00
 5923   4E4A   00 00 00 00              .db $00,$00,$00,$00
 5924   4E4E   00 00 00 00              .db $00,$00,$00,$00
 5925   4E52   00 00 00 00              .db $00,$00,$00,$00
 5926                           spr3                            ; Explosion 3
 5927   4E56   00 04 00 00              .db $00,$04,$00,$00
 5928   4E5A   00 0F 00 00              .db $00,$0f,$00,$00
 5929   4E5E   00 3F 00 00              .db $00,$3F,$00,$00
 5930   4E62   00 33 00 00              .db $00,$33,$00,$00
 5931   4E66   00 33 C0 00              .db $00,$33,$C0,$00
 5932   4E6A   00 F0 FC 00              .db $00,$F0,$FC,$00
 5933   4E6E   03 C0 3F 40              .db $03,$C0,$3F,$40
 5934   4E72   3F 22 0F 00              .db $3F,$22,$0f,$00
 5935   4E76   1F 0A 3C 00              .db $1F,$0a,$3C,$00
 5936   4E7A   03 C0 30 00              .db $03,$C0,$30,$00
 5937   4E7E   00 C3 30 00              .db $00,$C3,$30,$00
 5938   4E82   00 CF F0 00              .db $00,$CF,$F0,$00
 5939   4E86   00 FC D0 00              .db $00,$FC,$D0,$00
 5940   4E8A   00 F0 C0 00              .db $00,$F0,$C0,$00
 5941   4E8E   00 F0 00 00              .db $00,$F0,$00,$00
 5942   4E92   00 40 00 00              .db $00,$40,$00,$00
 5943                           spr4                            ; Explosion 4
 5944   4E96   00 04 00 00              .db $00,$04,$00,$00
 5945   4E9A   00 0F 00 00              .db $00,$0f,$00,$00
 5946   4E9E   00 33 00 00              .db $00,$33,$00,$00
 5947   4EA2   00 33 00 00              .db $00,$33,$00,$00
 5948   4EA6   00 30 C0 00              .db $00,$30,$C0,$00
 5949   4EAA   00 40 3D 00              .db $00,$40,$3D,$00
 5950   4EAE   0F 08 00 C0              .db $0f,$08,$00,$C0
 5951   4EB2   30 22 83 00              .db $30,$22,$83,$00
 5952   4EB6   1C 0A 04 00              .db $1C,$0a,$04,$00
 5953   4EBA   03 08 30 00              .db $03,$08,$30,$00
 5954   4EBE   00 C8 30 00              .db $00,$C8,$30,$00
 5955   4EC2   00 C0 30 00              .db $00,$C0,$30,$00
 5956   4EC6   00 C3 30 00              .db $00,$C3,$30,$00
 5957   4ECA   00 CC F0 00              .db $00,$CC,$F0,$00
 5958   4ECE   00 F0 D0 00              .db $00,$F0,$D0,$00
 5959   4ED2   00 70 C0 00              .db $00,$70,$C0,$00
 5960                           spr5                            ; Explosion 5
 5961   4ED6   00 00 00 00              .db $00,$00,$00,$00
 5962   4EDA   00 00 40 00              .db $00,$00,$40,$00
 5963   4EDE   00 30 00 00              .db $00,$30,$00,$00
 5964   4EE2   00 03 00 00              .db $00,$03,$00,$00
 5965   4EE6   00 03 0C 00              .db $00,$03,$0c,$00
 5966   4EEA   03 0C 00 00              .db $03,$0c,$00,$00
 5967   4EEE   00 32 C0 00              .db $00,$32,$C0,$00
 5968   4EF2   13 00 2C 00              .db $13,$00,$2C,$00
 5969   4EF6   30 80 30 C0              .db $30,$80,$30,$C0
 5970   4EFA   00 00 00 00              .db $00,$00,$00,$00
 5971   4EFE   00 CA 30 00              .db $00,$CA,$30,$00
 5972   4F02   00 30 F0 00              .db $00,$30,$F0,$00
 5973   4F06   03 30 04 00              .db $03,$30,$04,$00
 5974   4F0A   00 03 00 00              .db $00,$03,$00,$00
 5975   4F0E   00 00 00 00              .db $00,$00,$00,$00
 5976   4F12   00 40 30 00              .db $00,$40,$30,$00
 5977                           spr6                            ; Explosion 6
 5978   4F16   00 04 00 00              .db $00,$04,$00,$00
 5979   4F1A   00 00 00 00              .db $00,$00,$00,$00
 5980   4F1E   00 13 00 00              .db $00,$13,$00,$00
 5981   4F22   00 30 00 00              .db $00,$30,$00,$00
 5982   4F26   00 00 C1 00              .db $00,$00,$C1,$00
 5983   4F2A   00 00 00 40              .db $00,$00,$00,$40
 5984   4F2E   03 00 03 00              .db $03,$00,$03,$00
 5985   4F32   10 00 00 00              .db $10,$00,$00,$00
 5986   4F36   1C 00 00 00              .db $1C,$00,$00,$00
 5987   4F3A   00 00 00 00              .db $00,$00,$00,$00
 5988   4F3E   00 00 00 00              .db $00,$00,$00,$00
 5989   4F42   00 00 30 00              .db $00,$00,$30,$00
 5990   4F46   03 00 00 00              .db $03,$00,$00,$00
 5991   4F4A   00 30 C4 00              .db $00,$30,$C4,$00
 5992   4F4E   03 40 34 00              .db $03,$40,$34,$00
 5993   4F52   01 00 00 00              .db $01,$00,$00,$00
 5994                           spr7                            ; Alien 1, ok
 5995   4F56   00 0C 00 00              .db $00,$0c,$00,$00
 5996   4F5A   03 FF F0 00              .db $03,$FF,$F0,$00
 5997   4F5E   0F FF FC 00              .db $0f,$FF,$FC,$00
 5998   4F62   0E AA AC 00              .db $0e,$AA,$AC,$00
 5999   4F66   3A FB EB 00              .db $3A,$FB,$EB,$00
 6000   4F6A   3A D9 EB 00              .db $3A,$D9,$EB,$00
 6001   4F6E   0E AA AC 00              .db $0e,$AA,$AC,$00
 6002   4F72   03 AA B0 00              .db $03,$AA,$B0,$00
 6003   4F76   3E AA AF 00              .db $3E,$AA,$AF,$00
 6004   4F7A   EA AA AA C0              .db $EA,$AA,$AA,$C0
 6005   4F7E   EE AA AE C0              .db $EE,$AA,$AE,$C0
 6006   4F82   33 AA B3 00              .db $33,$AA,$B3,$00
 6007   4F86   03 AE B0 00              .db $03,$AE,$B0,$00
 6008   4F8A   0E B3 AC 00              .db $0e,$B3,$AC,$00
 6009   4F8E   3A C0 EB 00              .db $3A,$C0,$EB,$00
 6010   4F92   0F 00 3C 00              .db $0f,$00,$3C,$00
 6011                           spr8                            ; Alien 2, ok
 6012   4F96   3F 00 0F C0              .db $3F,$00,$0f,$C0
 6013   4F9A   FA C0 3A F0              .db $FA,$C0,$3A,$F0
 6014   4F9E   F9 FF F6 F0              .db $F9,$FF,$F6,$F0
 6015   4FA2   3F FF FF C0              .db $3F,$FF,$FF,$C0
 6016   4FA6   0F AA AF 00              .db $0f,$AA,$AF,$00
 6017   4FAA   0E AA AB 00              .db $0e,$AA,$AB,$00
 6018   4FAE   0E 55 5F 00              .db $0e,$55,$5F,$00
 6019   4FB2   03 55 5C 00              .db $03,$55,$5C,$00
 6020   4FB6   00 D5 70 00              .db $00,$D5,$70,$00
 6021   4FBA   03 00 0C 00              .db $03,$00,$0c,$00
 6022   4FBE   0F FF FF 00              .db $0f,$FF,$FF,$00
 6023   4FC2   3F FF FF C0              .db $3F,$FF,$FF,$C0
 6024   4FC6   3F 00 0F C0              .db $3F,$00,$0f,$C0
 6025   4FCA   3F C0 3F C0              .db $3F,$C0,$3F,$C0
 6026   4FCE   0F F0 FF 00              .db $0f,$F0,$FF,$00
 6027   4FD2   01 50 54 00              .db $01,$50,$54,$00
 6028                           spr9                            ; Alien 3, ok
 6029   4FD6   00 3F C0 00              .db $00,$3F,$C0,$00
 6030   4FDA   00 FA F0 00              .db $00,$FA,$F0,$00
 6031   4FDE   00 EA B0 00              .db $00,$EA,$B0,$00
 6032   4FE2   00 EA B0 00              .db $00,$EA,$B0,$00
 6033   4FE6   00 EA B0 00              .db $00,$EA,$B0,$00
 6034   4FEA   00 3A C0 00              .db $00,$3A,$C0,$00
 6035   4FEE   00 0F 00 00              .db $00,$0f,$00,$00
 6036   4FF2   00 0F 00 00              .db $00,$0f,$00,$00
 6037   4FF6   00 0F 00 00              .db $00,$0f,$00,$00
 6038   4FFA   00 FF F0 00              .db $00,$FF,$F0,$00
 6039   4FFE   03 FF FC 00              .db $03,$FF,$FC,$00
 6040   5002   3C FF F3 C0              .db $3C,$FF,$F3,$C0
 6041   5006   EB 3F CE B0              .db $EB,$3F,$CE,$B0
 6042   500A   EA C0 3A B0              .db $EA,$C0,$3A,$B0
 6043   500E   3A C0 3A C0              .db $3A,$C0,$3A,$C0
 6044   5012   0F 00 0F 00              .db $0f,$00,$0f,$00
 6045                           spr10                           ; Alien 4
 6046   5016   00 40 40 00              .db $00,$40,$40,$00
 6047   501A   01 51 50 00              .db $01,$51,$50,$00
 6048   501E   05 55 54 00              .db $05,$55,$54,$00
 6049   5022   15 55 A5 00              .db $15,$55,$A5,$00
 6050   5026   56 95 E5 40              .db $56,$95,$E5,$40
 6051   502A   56 95 E5 40              .db $56,$95,$E5,$40
 6052   502E   56 95 E5 40              .db $56,$95,$E5,$40
 6053   5032   05 55 54 00              .db $05,$55,$54,$00
 6054   5036   15 55 55 00              .db $15,$55,$55,$00
 6055   503A   55 55 55 40              .db $55,$55,$55,$40
 6056   503E   15 FF D5 00              .db $15,$FF,$D5,$00
 6057   5042   05 55 54 00              .db $05,$55,$54,$00
 6058   5046   15 55 55 00              .db $15,$55,$55,$00
 6059   504A   55 55 55 40              .db $55,$55,$55,$40
 6060   504E   15 51 55 00              .db $15,$51,$55,$00
 6061   5052   05 40 54 00              .db $05,$40,$54,$00
 6062   5056   01 00 10 00              .db $01,$00,$10,$00
 6063                           spr11                           ; Alien 5, ok
 6064   505A   03 FF FC 00              .db $03,$FF,$FC,$00
 6065   505E   0D 55 57 00              .db $0d,$55,$57,$00
 6066   5062   35 AA A5 C0              .db $35,$AA,$A5,$C0
 6067   5066   D6 FA F9 70              .db $D6,$FA,$F9,$70
 6068   506A   D6 CA 39 70              .db $D6,$CA,$39,$70
 6069   506E   D5 AA A5 70              .db $D5,$AA,$A5,$70
 6070   5072   D5 55 55 70              .db $D5,$55,$55,$70
 6071   5076   35 55 55 C0              .db $35,$55,$55,$C0
 6072   507A   0F 55 5F 00              .db $0f,$55,$5F,$00
 6073   507E   00 D5 70 00              .db $00,$D5,$70,$00
 6074   5082   03 55 5C 00              .db $03,$55,$5C,$00
 6075   5086   3D 55 57 C0              .db $3D,$55,$57,$C0
 6076   508A   D5 5F 55 70              .db $D5,$5F,$55,$70
 6077   508E   D5 70 D5 70              .db $D5,$70,$D5,$70
 6078   5092   35 C0 35 C0              .db $35,$C0,$35,$C0
 6079   5096   0F 00 0F 00              .db $0f,$00,$0f,$00
 6080                           spr12                           ; Alien 6, ok, myship upside down!!!
 6081   509A   00 F3 C0 00              .db $00,$F3,$C0,$00
 6082   509E   3F 7F 7F 00              .db $3F,$7F,$7F,$00
 6083   50A2   F5 FB D7 C0              .db $F5,$FB,$D7,$C0
 6084   50A6   DF EE FD C0              .db $DF,$EE,$FD,$C0
 6085   50AA   FF EE FF C0              .db $FF,$EE,$FF,$C0
 6086   50AE   FF EA FF C0              .db $FF,$EA,$FF,$C0
 6087   50B2   FF EA FF C0              .db $FF,$EA,$FF,$C0
 6088   50B6   CF EA FC C0              .db $CF,$EA,$FC,$C0
 6089   50BA   43 FB F0 40              .db $43,$FB,$F0,$40
 6090   50BE   03 FF F0 00              .db $03,$FF,$F0,$00
 6091   50C2   01 3F 10 00              .db $01,$3F,$10,$00
 6092   50C6   00 3F 00 00              .db $00,$3F,$00,$00
 6093   50CA   00 3F 00 00              .db $00,$3F,$00,$00
 6094   50CE   00 0C 00 00              .db $00,$0C,$00,$00
 6095   50D2   00 0C 00 00              .db $00,$0C,$00,$00
 6096   50D6   00 04 00 00              .db $00,$04,$00,$00
 6097                           
 6098                           ;       .db $03,$C0,$3C,$00
 6099                           ;       .db $3F,$C0,$3F,$C0
 6100                           ;       .db $3F,$F0,$FF,$C0
 6101                           ;       .db $FD,$7F,$D7,$F0
 6102                           ;       .db $F6,$95,$69,$F0
 6103                           ;       .db $36,$AA,$A9,$C0
 6104                           ;       .db $0d,$AF,$A7,$00
 6105                           ;       .db $0d,$B5,$E7,$00
 6106                           ;       .db $0d,$B5,$E7,$00
 6107                           ;       .db $0d,$AF,$A7,$00
 6108                           ;       .db $36,$AA,$A9,$C0
 6109                           ;       .db $F6,$95,$69,$F0
 6110                           ;       .db $FD,$7F,$D7,$F0
 6111                           ;       .db $3F,$F0,$FF,$C0
 6112                           ;       .db $3F,$C0,$3F,$C0
 6113                           ;       .db $03,$C0,$3C,$00
 6114                           spr13                           ; Alien 7, ok
 6115   50DA   14 00 01 40              .db $14,$00,$01,$40
 6116   50DE   55 00 05 50              .db $55,$00,$05,$50
 6117   50E2   45 40 15 10              .db $45,$40,$15,$10
 6118   50E6   01 50 54 00              .db $01,$50,$54,$00
 6119   50EA   01 55 54 00              .db $01,$55,$54,$00
 6120   50EE   07 F5 FD 00              .db $07,$F5,$FD,$00
 6121   50F2   15 C5 35 40              .db $15,$C5,$35,$40
 6122   50F6   55 55 55 50              .db $55,$55,$55,$50
 6123   50FA   59 55 56 50              .db $59,$55,$56,$50
 6124   50FE   57 BB B9 50              .db $57,$BB,$B9,$50
 6125   5102   15 55 55 40              .db $15,$55,$55,$40
 6126   5106   05 55 55 00              .db $05,$55,$55,$00
 6127   510A   01 50 54 00              .db $01,$50,$54,$00
 6128   510E   05 40 15 00              .db $05,$40,$15,$00
 6129   5112   15 00 05 40              .db $15,$00,$05,$40
 6130   5116   54 00 01 50              .db $54,$00,$01,$50
 6131                           spr14                           ; Alien 8
 6132   511A   3C 00 03 C0              .db $3C,$00,$03,$C0
 6133   511E   EF 00 0E F0              .db $EF,$00,$0e,$F0
 6134   5122   EB 3F CE B0              .db $EB,$3F,$CE,$B0
 6135   5126   3C FF F3 C0              .db $3C,$FF,$F3,$C0
 6136   512A   03 FF FC 00              .db $03,$FF,$FC,$00
 6137   512E   0F FF FF 00              .db $0f,$FF,$FF,$00
 6138   5132   0E BF FF 00              .db $0e,$BF,$FF,$00
 6139   5136   0E BF FF 00              .db $0e,$BF,$FF,$00
 6140   513A   0E BF FF 00              .db $0e,$BF,$FF,$00
 6141   513E   0E AF FF 00              .db $0e,$AF,$FF,$00
 6142   5142   0F AB FF 00              .db $0f,$AB,$FF,$00
 6143   5146   03 EA BC 00              .db $03,$EA,$BC,$00
 6144   514A   3C FF F3 C0              .db $3C,$FF,$F3,$C0
 6145   514E   EF 3F CE F0              .db $EF,$3F,$CE,$F0
 6146   5152   EB 00 0E B0              .db $EB,$00,$0e,$B0
 6147   5156   3C 00 03 C0              .db $3C,$00,$03,$C0
 6148                           spr15                           ; Alien 9
 6149   515A   14 05 01 40              .db $14,$05,$01,$40
 6150   515E   54 15 41 50              .db $54,$15,$41,$50
 6151   5162   5C 5F 53 50              .db $5C,$5F,$53,$50
 6152   5166   01 57 D4 00              .db $01,$57,$D4,$00
 6153   516A   05 55 F5 00              .db $05,$55,$F5,$00
 6154   516E   15 55 7D 40              .db $15,$55,$7D,$40
 6155   5172   59 55 5F 50              .db $59,$55,$5F,$50
 6156   5176   69 55 57 D0              .db $69,$55,$57,$D0
 6157   517A   69 55 57 D0              .db $69,$55,$57,$D0
 6158   517E   5A 55 57 50              .db $5A,$55,$57,$50
 6159   5182   16 95 55 40              .db $16,$95,$55,$40
 6160   5186   05 A5 55 00              .db $05,$A5,$55,$00
 6161   518A   01 69 54 00              .db $01,$69,$54,$00
 6162   518E   5C 5A 53 50              .db $5C,$5A,$53,$50
 6163   5192   54 15 41 50              .db $54,$15,$41,$50
 6164   5196   14 05 01 40              .db $14,$05,$01,$40
 6165                           spr16                           ; Alien 10, ok
 6166   519A   00 15 40 00              .db $00,$15,$40,$00
 6167   519E   0C 75 D3 00              .db $0c,$75,$D3,$00
 6168   51A2   01 75 D4 00              .db $01,$75,$D4,$00
 6169   51A6   C5 55 55 30              .db $C5,$55,$55,$30
 6170   51AA   F1 55 54 F0              .db $F1,$55,$54,$F0
 6171   51AE   3C 5A 53 C0              .db $3C,$5A,$53,$C0
 6172   51B2   0F C5 3F 00              .db $0f,$C5,$3F,$00
 6173   51B6   00 FF F0 00              .db $00,$FF,$F0,$00
 6174   51BA   05 2A 85 00              .db $05,$2A,$85,$00
 6175   51BE   15 55 55 40              .db $15,$55,$55,$40
 6176   51C2   15 6A 95 40              .db $15,$6A,$95,$40
 6177   51C6   55 15 45 50              .db $55,$15,$45,$50
 6178   51CA   55 2A 85 50              .db $55,$2A,$85,$50
 6179   51CE   55 15 45 50              .db $55,$15,$45,$50
 6180   51D2   54 2A 81 50              .db $54,$2A,$81,$50
 6181   51D6   00 0F 00 00              .db $00,$0f,$00,$00
 6182                           spr17                           ; Alien 11
 6183   51DA   0F 00 3C 00              .db $0f,$00,$3C,$00
 6184   51DE   35 C0 D7 00              .db $35,$C0,$D7,$00
 6185   51E2   D5 7F 55 C0              .db $D5,$7F,$55,$C0
 6186   51E6   D5 55 55 C0              .db $D5,$55,$55,$C0
 6187   51EA   D5 55 55 C0              .db $D5,$55,$55,$C0
 6188   51EE   35 D5 D7 00              .db $35,$D5,$D7,$00
 6189   51F2   0D 55 5C 00              .db $0d,$55,$5C,$00
 6190   51F6   03 55 70 00              .db $03,$55,$70,$00
 6191   51FA   03 55 70 00              .db $03,$55,$70,$00
 6192   51FE   0D 55 5C 00              .db $0d,$55,$5C,$00
 6193   5202   35 D5 D7 00              .db $35,$D5,$D7,$00
 6194   5206   D5 55 55 C0              .db $D5,$55,$55,$C0
 6195   520A   D5 55 55 C0              .db $D5,$55,$55,$C0
 6196   520E   D5 7F 55 C0              .db $D5,$7F,$55,$C0
 6197   5212   35 C0 D7 00              .db $35,$C0,$D7,$00
 6198   5216   0F 00 3C 00              .db $0f,$00,$3C,$00
 6199                           spr18                           ; Alien 12
 6200   521A   0C 00 0C 00              .db $0c,$00,$0c,$00
 6201   521E   33 00 33 00              .db $33,$00,$33,$00
 6202   5222   C0 C0 C0 C0              .db $C0,$C0,$C0,$C0
 6203   5226   F3 FF F3 C0              .db $F3,$FF,$F3,$C0
 6204   522A   CE AA AC C0              .db $CE,$AA,$AC,$C0
 6205   522E   3A AA AB 00              .db $3A,$AA,$AB,$00
 6206   5232   2A BF AA 00              .db $2A,$BF,$AA,$00
 6207   5236   3A D5 EB 00              .db $3A,$D5,$EB,$00
 6208   523A   3A D5 EB 00              .db $3A,$D5,$EB,$00
 6209   523E   2A BF AA 00              .db $2A,$BF,$AA,$00
 6210   5242   3A AA AB 00              .db $3A,$AA,$AB,$00
 6211   5246   CE AA AC C0              .db $CE,$AA,$AC,$C0
 6212   524A   F3 FF F3 C0              .db $F3,$FF,$F3,$C0
 6213   524E   C0 C0 C0 C0              .db $C0,$C0,$C0,$C0
 6214   5252   33 00 33 00              .db $33,$00,$33,$00
 6215   5256   0C 00 0C 00              .db $0c,$00,$0c,$00
 6216                           spr19                           ; Myship
 6217   525A   00 04 00 00              .db $00,$04,$00,$00
 6218   525E   00 0C 00 00              .db $00,$0C,$00,$00
 6219   5262   00 0C 00 00              .db $00,$0C,$00,$00
 6220   5266   00 3F 00 00              .db $00,$3F,$00,$00
 6221   526A   00 3F 00 00              .db $00,$3F,$00,$00
 6222   526E   01 3F 10 00              .db $01,$3F,$10,$00
 6223   5272   03 FF F0 00              .db $03,$FF,$F0,$00
 6224   5276   43 FB F0 40              .db $43,$FB,$F0,$40
 6225   527A   CF EA FC C0              .db $CF,$EA,$FC,$C0
 6226   527E   FF EA FF C0              .db $FF,$EA,$FF,$C0
 6227   5282   FF EA FF C0              .db $FF,$EA,$FF,$C0
 6228   5286   FF EE FF C0              .db $FF,$EE,$FF,$C0
 6229   528A   DF EE FD C0              .db $DF,$EE,$FD,$C0
 6230   528E   F5 FB D7 C0              .db $F5,$FB,$D7,$C0
 6231   5292   3F 7F 7F 00              .db $3F,$7F,$7F,$00
 6232   5296   00 F3 C0 00              .db $00,$F3,$C0,$00
 6233                           spr20                           ; Myship upside down
 6234   529A   00 F3 C0 00              .db $00,$F3,$C0,$00
 6235   529E   3F 7F 7F 00              .db $3F,$7F,$7F,$00
 6236   52A2   F5 FB D7 C0              .db $F5,$FB,$D7,$C0
 6237   52A6   DF EE FD C0              .db $DF,$EE,$FD,$C0
 6238   52AA   FF EE FF C0              .db $FF,$EE,$FF,$C0
 6239   52AE   FF EA FF C0              .db $FF,$EA,$FF,$C0
 6240   52B2   FF EA FF C0              .db $FF,$EA,$FF,$C0
 6241   52B6   CF EA FC C0              .db $CF,$EA,$FC,$C0
 6242   52BA   43 FB F0 40              .db $43,$FB,$F0,$40
 6243   52BE   03 FF F0 00              .db $03,$FF,$F0,$00
 6244   52C2   01 3F 10 00              .db $01,$3F,$10,$00
 6245   52C6   00 3F 00 00              .db $00,$3F,$00,$00
 6246   52CA   00 3F 00 00              .db $00,$3F,$00,$00
 6247   52CE   00 0C 00 00              .db $00,$0C,$00,$00
 6248   52D2   00 0C 00 00              .db $00,$0C,$00,$00
 6249   52D6   00 04 00 00              .db $00,$04,$00,$00
 6250                           
 6251                           
 6252   5300                            org ((*/256)+1)*256
 6253   5300                            include digits.inc
 6254                           ;----------------------------------------------
 6255                           ;DIGITS
 6256                           ;
 6257                           ; Storage of digits 0-9 for the score
 6258                           ; Digits are stored in a 2 x 8 x 8 format for fast access
 6259                           ; A digit is 5 x 8 coloured pixels + 1 pixel space
 6260                           ; A digit has a left- and a right byte 
 6261                           ; Because a character is 1.5 bytes width a digit
 6262                           ; can be plotted aligned left or right
 6263                           ;----------------------------------------------
 6264   5300                    digits
 6265                           
 6266                           digits_l                                        ; left digit left aligned
 6267   5300   FF C0 C0 C3 C3           .db $ff,$c0,$c0,$c3,$c3,$c3,$ff,$00 ; 0
        5305   C3 FF 00 
 6268   5308   0C 0C 0C 3C 3C           .db $0c,$0c,$0c,$3c,$3c,$3c,$3c,$00 ; 1
        530D   3C 3C 00 
 6269   5310   FF 00 00 FF F0           .db $ff,$00,$00,$ff,$f0,$f0,$ff,$00 ; 2
        5315   F0 FF 00 
 6270   5318   FF C3 03 3F 03           .db $ff,$c3,$03,$3f,$03,$c3,$ff,$00 ; 3
        531D   C3 FF 00 
 6271   5320   FF C3 C3 C3 FF           .db $ff,$c3,$c3,$c3,$ff,$0f,$0f,$00 ; 4
        5325   0F 0F 00 
 6272   5328   FF C0 C0 FF 03           .db $ff,$c0,$c0,$ff,$03,$c3,$ff,$00 ; 5
        532D   C3 FF 00 
 6273   5330   FF C0 C0 FF C0           .db $ff,$c0,$c0,$ff,$c0,$c0,$ff,$00 ; 6
        5335   C0 FF 00 
 6274   5338   FF 00 00 03 03           .db $ff,$00,$00,$03,$03,$03,$03,$00 ; 7
        533D   03 03 00 
 6275   5340   3F 33 33 FF C3           .db $3f,$33,$33,$ff,$c3,$c3,$ff,$00 ; 8
        5345   C3 FF 00 
 6276   5348   FF C0 C0 FF 03           .db $ff,$c0,$c0,$ff,$03,$03,$03,$00 ; 9
        534D   03 03 00 
 6277                           digits_r                                        ; left digit right aligned
 6278   5350   0F 0C 0C 0C 0C           .db $0f,$0c,$0c,$0c,$0c,$0c,$0f,$00 ; 0
        5355   0C 0F 00 
 6279   5358   00 00 00 03 03           .db $00,$00,$00,$03,$03,$03,$03,$00 ; 1
        535D   03 03 00 
 6280   5360   0F 00 00 0F 0F           .db $0f,$00,$00,$0f,$0f,$0f,$0f,$00 ; 2
        5365   0F 0F 00 
 6281   5368   0F 0C 00 03 00           .db $0f,$0c,$00,$03,$00,$0c,$0f,$00 ; 3
        536D   0C 0F 00 
 6282   5370   0F 0C 0C 0C 0F           .db $0f,$0c,$0c,$0c,$0f,$00,$00,$00 ; 4
        5375   00 00 00 
 6283   5378   0F 0C 0C 0F 00           .db $0f,$0c,$0c,$0f,$00,$0c,$0f,$00 ; 5
        537D   0C 0F 00 
 6284   5380   0F 0C 0C 0F 0C           .db $0f,$0c,$0c,$0f,$0c,$0c,$0f,$00 ; 6
        5385   0C 0F 00 
 6285   5388   0F 00 00 00 00           .db $0f,$00,$00,$00,$00,$00,$00,$00 ; 7
        538D   00 00 00 
 6286   5390   03 03 03 0F 0C           .db $03,$03,$03,$0f,$0c,$0c,$0f,$00 ; 8
        5395   0C 0F 00 
 6287   5398   0F 0C 0C 0F 00           .db $0f,$0c,$0c,$0f,$00,$00,$00,$00 ; 9
        539D   00 00 00 
 6288   53A0                    end_digits_r
 6289   53A0                            .blkb (256-end_digits_r+digits_l),0
 6290                           
 6291                           digits1_l                                       ; right digit left aligned
 6292   5400   C0 C0 C0 C0 C0           .db $c0,$c0,$c0,$c0,$c0,$c0,$c0,$00 ; 0
        5405   C0 C0 00 
 6293   5408   00 00 00 00 00           .db $00,$00,$00,$00,$00,$00,$00,$00 ; 1
        540D   00 00 00 
 6294   5410   C0 C0 C0 C0 00           .db $c0,$c0,$c0,$c0,$00,$00,$c0,$00 ; 2
        5415   00 C0 00 
 6295   5418   00 00 00 C0 C0           .db $00,$00,$00,$c0,$c0,$c0,$c0,$00 ; 3
        541D   C0 C0 00 
 6296   5420   00 00 00 00 C0           .db $00,$00,$00,$00,$c0,$00,$00,$00 ; 4
        5425   00 00 00 
 6297   5428   C0 00 00 C0 C0           .db $c0,$00,$00,$c0,$c0,$c0,$c0,$00 ; f
        542D   C0 C0 00 
 6298   5430   C0 C0 00 C0 C0           .db $c0,$c0,$00,$c0,$c0,$c0,$c0,$00 ; c
        5435   C0 C0 00 
 6299   5438   C0 C0 C0 C0 C0           .db $c0,$c0,$c0,$c0,$c0,$c0,$c0,$00 ; 7
        543D   C0 C0 00 
 6300   5440   00 00 00 C0 C0           .db $00,$00,$00,$c0,$c0,$c0,$c0,$00 ; 8
        5445   C0 C0 00 
 6301   5448   C0 C0 C0 C0 C0           .db $c0,$c0,$c0,$c0,$c0,$c0,$c0,$00 ; 3
        544D   C0 C0 00 
 6302                           digits1_r                                       ; right digit right aligned
 6303   5450   FC 0C 0C 3C 3C           .db $fc,$0c,$0c,$3c,$3c,$3c,$fc,$00 ; 0
        5455   3C FC 00 
 6304   5458   C0 C0 C0 C0 C0           .db $c0,$c0,$c0,$c0,$c0,$c0,$c0,$00 ; 1
        545D   C0 C0 00 
 6305   5460   FC 0C 0C FC 00           .db $fc,$0c,$0c,$fc,$00,$00,$fc,$00 ; 2
        5465   00 FC 00 
 6306   5468   F0 30 30 FC 3C           .db $f0,$30,$30,$fc,$3c,$3c,$fc,$00 ; 3
        546D   3C FC 00 
 6307   5470   F0 30 30 30 FC           .db $f0,$30,$30,$30,$fc,$f0,$f0,$00 ; 4
        5475   F0 F0 00 
 6308   5478   FC 00 00 FC 3C           .db $fc,$00,$00,$fc,$3c,$3c,$fc,$00 ; f
        547D   3C FC 00 
 6309   5480   FC 0C 00 FC 0C           .db $fc,$0c,$00,$fc,$0c,$0c,$fc,$00 ; c
        5485   0C FC 00 
 6310   5488   FC 0C 0C 3C 3C           .db $fc,$0c,$0c,$3c,$3c,$3c,$3c,$00 ; 7
        548D   3C 3C 00 
 6311   5490   F0 30 30 FC 3C           .db $f0,$30,$30,$fc,$3c,$3c,$fc,$00 ; 8
        5495   3C FC 00 
 6312   5498   FC 0C 0C FC 3C           .db $fc,$0c,$0c,$fc,$3c,$3c,$3c,$00 ; 3
        549D   3C 3C 00 
 6313                           
 6314                           
 6315                           
 6316                           
 6317                           
 6318   54A0                            include spfont.inc
 6319                           ;----------------------------------------------
 6320                           ;SPFONT
 6321                           ;
 6322                           ; SPFONT is storage of characters at $700
 6323                           ; A character is stored in landscape
 6324                           ; Every character is stored in 5 bytes (8 x 5 pixels)
 6325                           ; A character is displayed on screen as 5 x 8 pixels (portrait)
 6326                           ; Every screenpixel is a coloured pixel (2 bits)
 6327                           ; Every character is 1.5 bytes width (width 1 pixel space)
 6328                           ;
 6329                           ; eg:    Storage    Screen
 6330                           ;
 6331                           ;    $78 .1111...   .111.
 6332                           ;    $7F .1111111   .1.1.
 6333                           ;    $09 ....1..1   .1.1.
 6334                           ;    $0F ....1111   11111
 6335                           ;    $78 .1111...   11..1
 6336                           ;                   11..1
 6337                           ;                   11..1
 6338                           ;                   .....
 6339                           ;----------------------------------------------
 6340                           
 6341   54A0                    spfont
 6342                           
 6343                           ; REM 012345
 6344   54A0   7F 41 41 79 7F           .db  $7F,$41,$41,$79,$7F
 6345   54A5   00 78 7F 00 00           .db  $00,$78,$7F,$00,$00
 6346   54AA   79 79 49 49 4F           .db  $79,$79,$49,$49,$4F
 6347   54AF   63 49 49 7F 78           .db  $63,$49,$49,$7F,$78
 6348   54B4   1F 11 71 7F 10           .db  $1F,$11,$71,$7F,$10
 6349   54B9   6F 49 49 79 79           .db  $6F,$49,$49,$79,$79
 6350                           ; REM 6789
 6351   54BE   7F 49 49 49 7B           .db  $7F,$49,$49,$49,$7B
 6352   54C3   01 01 01 79 7F           .db  $01,$01,$01,$79,$7F
 6353   54C8   78 4F 49 7F 78           .db  $78,$4F,$49,$7F,$78
 6354   54CD   0F 09 09 79 7F           .db  $0F,$09,$09,$79,$7F
 6355                           ; REM ABCDEF
 6356   54D2   78 7F 09 0F 78           .db  $78,$7F,$09,$0F,$78
 6357   54D7   7F 79 49 4F 38           .db  $7F,$79,$49,$4F,$38
 6358   54DC   7F 79 41 41 63           .db  $7F,$79,$41,$41,$63
 6359   54E1   7F 79 41 41 7F           .db  $7F,$79,$41,$41,$7F
 6360   54E6   7F 79 49 49 49           .db  $7F,$79,$49,$49,$49
 6361   54EB   7F 79 09 09 09           .db  $7F,$79,$09,$09,$09
 6362                           ; REM GHIJKL
 6363   54F0   7F 79 41 49 7B           .db  $7F,$79,$41,$49,$7B
 6364   54F5   7F 78 08 08 7F           .db  $7F,$78,$08,$08,$7F
 6365   54FA   00 7F 78 00 00           .db  $00,$7F,$78,$00,$00
 6366   54FF   70 40 40 7F 78           .db  $70,$40,$40,$7F,$78
 6367   5504   7F 78 08 0F 78           .db  $7F,$78,$08,$0F,$78
 6368   5509   7F 78 40 40 40           .db  $7F,$78,$40,$40,$40
 6369                           ; REM MNOPQR
 6370   550E   7F 01 7F 01 7F           .db  $7F,$01,$7F,$01,$7F
 6371   5513   7F 79 01 01 7F           .db  $7F,$79,$01,$01,$7F
 6372   5518   7F 41 41 43 7F           .db  $7F,$41,$41,$43,$7F
 6373   551D   7F 79 09 09 0F           .db  $7F,$79,$09,$09,$0F
 6374   5522   7F 41 61 61 7F           .db  $7F,$41,$61,$61,$7F
 6375   5527   7F 79 09 0F 78           .db  $7F,$79,$09,$0F,$78
 6376                           ; REM STUVWX
 6377   552C   4F 49 49 79 79           .db  $4F,$49,$49,$79,$79
 6378   5531   01 01 7F 79 01           .db  $01,$01,$7F,$79,$01
 6379   5536   7F 78 40 40 7F           .db  $7F,$78,$40,$40,$7F
 6380   553B   0F 7F 40 70 0F           .db  $0F,$7F,$40,$70,$0F
 6381   5540   7F 40 7F 40 7F           .db  $7F,$40,$7F,$40,$7F
 6382   5545   77 78 08 08 77           .db  $77,$78,$08,$08,$77
 6383                           ; REM YZ.- space 
 6384   554A   0F 08 78 08 0F           .db  $0F,$08,$78,$08,$0F
 6385   554F   7B 79 49 49 6F           .db  $7B,$79,$49,$49,$6F
 6386   5554   00 00 60 00 00           .db  $00,$00,$60,$00,$00
 6387   5559   80 80 80 80 80           .db  $80,$80,$80,$80,$80
 6388   555E   00 00 00 00 00           .db  $00,$00,$00,$00,$00
 6389                           
 6390                           
 6391                           
 6392   5563                    eind_asm



           Lines Assembled :  6392             Assembly Errors :  0



